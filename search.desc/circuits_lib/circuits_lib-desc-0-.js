searchState.loadedDescShard("circuits_lib", 0, "The method ID for the header chain circuit.\nExecutes the bridge circuit in a zkVM environment, …\nConverts a compressed Groth16 proof into a proof structure …\nComputes a deposit constant hash using various transaction …\nRetrieves the first output of a transaction that is an …\nParses the OP_RETURN data from a Bitcoin script. It …\nComputes the Taproot sighash for a given transaction input.\nEncodes the BIP341 signing data for any flag type into a …\nComputes the maximum verified total work and watchtower …\nVerifies watchtower challenge transactions and collects …\nWork-only circuit method IDs for different networks.\nCircuitGroth16Proof represents a Groth16 proof for the …\nReturns the argument unchanged.\nCreates a new CircuitGroth16Proof from the given risc0 …\nCalls <code>U::from(self)</code>.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nGroth16 proof with total work and genesis state hash. In …\nCreates a claim digest for the work-only circuit output.\nCreates a digest for the journal of the work-only circuit …\nCreates an output digest for the work-only circuit output.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>CircuitGroth16WithTotalWork</code>.\nConverts a hexadecimal string to a decimal string …\nGiven the <code>pre_state</code> (which is actually the <code>method ID</code> of …\nVerifies the light client proof and returns the light …\nRepresents a Bitcoin Merkle tree.\nCalculates the Bitcoin Merkle root from a leaf’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a Merkle proof for a given index in the “…\nGiven an index, returns the path of sibling nodes from the …\nCalculates the Merkle root given a leaf transaction …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a standard Bitcoin Merkle tree. Leaf nodes are …\nConstructs a “mid-state” Merkle tree, designed for …\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVerifies a Merkle proof against a given root using the “…\nSPV (Simplified Payment Verification) structure that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVerifies the SPV proof using the provided MMRGuest.\nVerifies an Ethereum storage proof against an expected …\nVerifies Ethereum storage proofs related to deposit and …\nRepresents a constant value used for each deposit in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>WatchtowerInput</code> instance from the kickoff …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nA wrapper around Bitcoin’s <code>Transaction</code> type that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the first digest of the transaction to be used in …\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the transaction id, in big-endian byte order. One …\nConstant bridge amount in sats\nCalculates the double SHA256 hash of the input data.\nCalculates the SHA256 hash of the input data.\nUtility function to hash two nodes together\nThis struct represents a proof that can be used in zkVM …\nThis module defines the traits and structures for zkVM …\nAdds an assumption to the the guest code to be verified.\nThis uses little endianness in the items it serializes\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProves with the given data\nThis uses little endianness in the items it deserializes\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nAdding data to the host\nNumber of blocks per epoch\nThe output of the header chain circuit.\nThe state of the chain, which is used to verify the block …\nBitcoin block header.\nAn epoch should be two weeks (represented as number of …\nThe input of the header chain circuit. It contains the …\nThe input proof of the header chain circuit. The header …\nThe network constants for the Bitcoin network, which are …\nNetwork configuration holder for Bitcoin-specific …\nApplies the block headers to the chain state, updating the …\nConverts a compact target (bits) to a target in bytes.\nCalculates the new difficulty based on the last timestamp …\nCalculates the work for a given target.\nChecks if the hash is valid against the target bytes.\nComputes the block hash for the given block header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe main entry point of the header chain circuit.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculates the median of the last 11 timestamps, which is …\nConverts a target in bytes to a compact target (bits).\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the hash of the chain state, which is used to …\nValidates the block timestamp against the median of the …\nRepresents the MMR for inside zkVM (guest)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new MMR for inside zkVM\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVerifies an inclusion proof against the current MMR root\nRepresents the MMR for outside zkVM (native).\nAppends a new leaf to the MMR.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a proof for a given index. Returns the leaf as …\nGiven an index, returns the subroot index (which subtree …\nReturns the subroots of the MMR.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new MMR for native usage.\nRecalculates peaks based on the current leaves.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVerifies an inclusion proof against the current MMR root.\nThe method ID for the header chain circuit.\nConverts a <code>U256</code> work value into big endian array of 16 …\nExecutes the “work-only” zkVM circuit, verifying the …")