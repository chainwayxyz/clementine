searchState.loadedDescShard("circuits_lib", 0, "Bridge Circuit Module\nCommon Module\nCircuits-lib - Header Chain Circuit\nWork-Only Circuit - Proof-of-Work Extraction from Header …\nThe method ID for the header chain circuit.\nExecutes the bridge circuit in a zkVM environment, …\nBridge Circuit Constants\nConverts a compressed Groth16 proof into a proof structure …\nComputes a deposit constant hash using various transaction …\nRetrieves the first output of a transaction that is an …\nGroth16 Proof Struct\nBridge Circuit Groth16 Verifier\nLight Client Proof Verifier\nBitcoin Merkle Tree Implementation\nParses the OP_RETURN data from a Bitcoin script. It …\nComputes the Taproot sighash for a given transaction input.\nSPV (Simplified Payment Verification) This module provides …\nEthereum Storage Proof Verifier\nBridge Circuit Structs\nEncodes the BIP341 signing data for any flag type into a …\nComputes the maximum verified total work and watchtower …\nBitcoin Transaction Wrapper\nVerifies watchtower challenge transactions and collects …\nCircuitGroth16Proof represents a Groth16 proof for the …\nReturns the argument unchanged.\nCreates a new CircuitGroth16Proof from the given risc0 …\nCalls <code>U::from(self)</code>.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nGroth16 proof with total work and genesis state hash. In …\nCreates a claim digest for the work-only circuit output.\nCreates a digest for the journal of the work-only circuit …\nCreates an output digest for the work-only circuit output.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>CircuitGroth16WithTotalWork</code>.\nConverts a hexadecimal string to a decimal string …\nGiven the <code>pre_state</code> (which is actually the <code>method ID</code> of …\nVerifies the light client proof and returns the light …\nRepresents a Bitcoin Merkle tree.\nCalculates the Bitcoin Merkle root from a leaf’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a Merkle proof for a given index in the “…\nGiven an index, returns the path of sibling nodes from the …\nCalculates the Merkle root given a leaf transaction …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a standard Bitcoin Merkle tree. Leaf nodes are …\nConstructs a “mid-state” Merkle tree, designed for …\nReturns the Merkle root. Use this only for Bitcoin merkle …\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nSPV (Simplified Payment Verification) structure that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVerifies the SPV proof using the provided MMRGuest.\nVerifies an Ethereum storage proof against an expected …\nVerifies Ethereum storage proofs related to deposit and …\nRepresents a constant value used for each deposit in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>WatchtowerInput</code> instance from the kickoff …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nA wrapper around Bitcoin’s <code>Transaction</code> type that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the first digest of the transaction to be used in …\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the transaction id, in big-endian byte order. One …\nCommon Constants\nHashes\nZkVM Module\nThe number of kickoff outputs before the first assert utxo.\nThe theoretical maximum number of watchtowers that can be …\nThe number of assertion transactions that a challenged …\nCalculates the double SHA256 hash of the input data.\nCalculates the SHA256 hash of the input data.\nUtility function to hash two nodes together\nThis struct represents a proof that can be used in zkVM …\nThis module defines the traits and structures for zkVM …\nAdds an assumption to the the guest code to be verified.\nThis uses little endianness in the items it serializes\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProves with the given data\nThis uses little endianness in the items it deserializes\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nAdding data to the host\nNumber of blocks in a difficulty adjustment epoch.\nCircuit output containing the updated chain state and …\nVerifiable state of the Bitcoin header chain.\nSerializable representation of a Bitcoin block header.\nExpected duration of a difficulty adjustment epoch in …\nThe input of the header chain circuit. It contains the …\nPrevious proof type - either genesis state or previous …\nNetwork constants for the Bitcoin network configuration.\nNetwork configuration holder for Bitcoin-specific …\nApplies a sequence of block headers to the chain state.\nConverts compact target representation (bits) to full …\nCalculates the new difficulty target after a difficulty …\nCalculates the amount of work represented by a difficulty …\nValidates that a block hash meets the proof-of-work …\nComputes the double SHA256 hash of the block header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a genesis chain state.\nThe main entry point of the header chain circuit.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculates the median of 11 timestamps.\nMMR Guest - Merkle Mountain Range for zkVM\nMMR Native - Merkle Mountain Range for Native Environments\nCreates a new chain state with default values.\nConverts a full 32-byte target to compact representation …\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nComputes a cryptographic hash of the current chain state.\nValidates a block timestamp against the median time past …\nMerkle Mountain Range implementation for zkVM environments.\nAppends a new leaf to the MMR, updating subroots as needed.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new empty MMR instance.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVerifies an inclusion proof against the MMR subroots.\nProof of inclusion for an element in the MMR.\nMerkle Mountain Range implementation for native …\nAppends a leaf and recalculates the mountain peaks.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates an inclusion proof for a leaf at the given index.\nDetermines subroot index and internal position for a given …\nComputes the subroot hash by replaying the Merkle path …\nReturns the current MMR subroots (peaks of the mountain …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new empty MMR instance.\nCreates a new inclusion proof.\nRecalculates MMR peaks after appending new leaves.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVerifies an inclusion proof against the current MMR …\nNetwork-specific method ID for the header chain circuit.\nConverts 256-bit total work to compact 128-bit …\nMain entry point for the work-only zkVM circuit.")