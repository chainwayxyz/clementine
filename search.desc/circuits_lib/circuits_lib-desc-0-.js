searchState.loadedDescShard("circuits_lib", 0, "The method ID for the header chain circuit.\nExecutes the bridge circuit in a zkVM environment, …\nConverts a compressed Groth16 proof into a proof structure …\nComputes a deposit constant hash using various transaction …\nComputes the Taproot sighash for a given transaction input.\nEncodes the BIP341 signing data for any flag type into a …\nComputes the maximum verified total work and watchtower …\nVerifies watchtower challenge transactions and collects …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCode is taken from Clementine …\nCalculates the Bitcoin Merkle root from a leaf’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculates the Merkle root given a leaf transaction ID (…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a standard Bitcoin Merkle tree. Leaf nodes are …\nConstructs a “mid-state” Merkle tree, designed for …\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVerifies a Merkle proof against a given root using the “…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVerifies an Ethereum storage proof against an expected …\nVerifies Ethereum storage proofs related to deposit and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>WatchtowerInput</code> instance from the kickoff …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the first digest of the transaction to be used in …\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the transaction id, in big-endian byte order. One …\nConstant bridge amount in sats\nUtility function to hash two nodes together\nThis uses little endianness in the items it serializes\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis uses little endianness in the items it deserializes\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nNumber of blocks per epoch\nThe output of the header chain circuit.\nBitcoin block header.\nAn epoch should be two weeks (represented as number of …\nThe input of the header chain circuit.\nThe input proof of the header chain circuit. The proof can …\nNetwork configuration holder for Bitcoin-specific constants\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe main entry point of the header chain circuit.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nRepresents the MMR for inside zkVM (guest)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new MMR for inside zkVM\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVerifies an inclusion proof against the current MMR root\nRepresents the MMR for outside zkVM (native).\nAppends a new leaf to the MMR.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a proof for a given index. Returns the leaf as …\nGiven an index, returns the subroot index (which subtree …\nReturns the subroots of the MMR.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new MMR for native usage.\nRecalculates peaks based on the current leaves.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nReturns the <code>String</code> produced by <code>T</code>s <code>Debug</code> implementation.\nVerifies an inclusion proof against the current MMR root.\nThe method ID for the header chain circuit.\nConverts a <code>U256</code> work value into big endian array of 16 …\nExecutes the “work-only” zkVM circuit, verifying the …")