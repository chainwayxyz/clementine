// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Empty {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Outpoint {
    #[prost(bytes = "vec", tag = "1")]
    pub txid: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "2")]
    pub vout: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChallengeAckDigest {
    #[prost(bytes = "vec", tag = "1")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WinternitzPubkey {
    #[prost(bytes = "vec", repeated, tag = "3")]
    pub digit_pubkey: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
/// A deposit request's details.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepositParams {
    /// User's deposit UTXO.
    #[prost(message, optional, tag = "1")]
    pub deposit_outpoint: ::core::option::Option<Outpoint>,
    /// User's EVM address.
    #[prost(bytes = "vec", tag = "2")]
    pub evm_address: ::prost::alloc::vec::Vec<u8>,
    /// User's recovery taproot address.
    #[prost(string, tag = "3")]
    pub recovery_taproot_address: ::prost::alloc::string::String,
    /// User can take back funds after this amount of blocks.
    #[prost(uint32, tag = "4")]
    pub user_takes_after: u32,
}
/// Includes the deposit params and the nonce gen initial responses (pubkeys and their signatures from all verifiers)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DepositSignSession {
    #[prost(message, optional, tag = "1")]
    pub deposit_params: ::core::option::Option<DepositParams>,
    #[prost(message, repeated, tag = "2")]
    pub nonce_gen_first_responses: ::prost::alloc::vec::Vec<NonceGenFirstResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperatorConfig {
    #[prost(uint32, tag = "1")]
    pub operator_idx: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub collateral_funding_txid: ::prost::alloc::vec::Vec<u8>,
    #[prost(string, tag = "3")]
    pub xonly_pk: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub wallet_reimburse_address: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperatorParams {
    #[prost(oneof = "operator_params::Response", tags = "1, 2, 3")]
    pub response: ::core::option::Option<operator_params::Response>,
}
/// Nested message and enum types in `OperatorParams`.
pub mod operator_params {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        /// Operator's configuration.
        #[prost(message, tag = "1")]
        OperatorDetails(super::OperatorConfig),
        /// Winternitz pubkeys for each watchtowers challenge + bitvm assert tx.
        /// If there are 100 watchtowers and total of 1000 timetxs, it will take
        /// 1000 * (100*240 + 600*20) ~= 1 GB of hash for every winternitz pubkey.
        #[prost(message, tag = "2")]
        WinternitzPubkeys(super::WinternitzPubkey),
        /// Adaptor signatures for asserting a watchtower's challenge to zero.
        /// Total of 1000*100 preimages. TODO: Change comments here
        #[prost(message, tag = "3")]
        ChallengeAckDigests(super::ChallengeAckDigest),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperatorBurnSig {
    #[prost(bytes = "vec", tag = "1")]
    pub schnorr_sig: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewWithdrawalSigParams {
    #[prost(uint32, tag = "1")]
    pub withdrawal_id: u32,
    /// User's \[`bitcoin::sighash::TapSighashType::SinglePlusAnyoneCanPay`\]
    /// signature
    #[prost(bytes = "vec", tag = "2")]
    pub user_sig: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "3")]
    pub users_intent_outpoint: ::core::option::Option<Outpoint>,
    #[prost(bytes = "vec", tag = "4")]
    pub users_intent_script_pubkey: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "5")]
    pub users_intent_amount: u64,
    #[prost(bytes = "vec", tag = "6")]
    pub output_script_pubkey: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "7")]
    pub output_amount: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewWithdrawalSigResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub txid: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WithdrawalFinalizedParams {
    #[prost(uint32, tag = "1")]
    pub withdrawal_id: u32,
    #[prost(message, optional, tag = "2")]
    pub deposit_outpoint: ::core::option::Option<Outpoint>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifierParams {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub public_key: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "3")]
    pub num_verifiers: u32,
    #[prost(uint32, tag = "4")]
    pub num_watchtowers: u32,
    #[prost(uint32, tag = "5")]
    pub num_operators: u32,
    #[prost(uint32, tag = "6")]
    pub num_time_txs: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PartialSig {
    #[prost(bytes = "vec", tag = "1")]
    pub partial_sig: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NonceGenRequest {
    #[prost(uint32, tag = "1")]
    pub num_nonces: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NonceGenFirstResponse {
    /// ID of the nonce session (used to store nonces in verifier's memory)
    #[prost(uint32, tag = "1")]
    pub id: u32,
    /// Number of nonces to generate
    #[prost(uint32, tag = "2")]
    pub num_nonces: u32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NonceGenResponse {
    #[prost(oneof = "nonce_gen_response::Response", tags = "1, 2")]
    pub response: ::core::option::Option<nonce_gen_response::Response>,
}
/// Nested message and enum types in `NonceGenResponse`.
pub mod nonce_gen_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag = "1")]
        FirstResponse(super::NonceGenFirstResponse),
        #[prost(bytes, tag = "2")]
        PubNonce(::prost::alloc::vec::Vec<u8>),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifierDepositSignParams {
    #[prost(oneof = "verifier_deposit_sign_params::Params", tags = "1, 2")]
    pub params: ::core::option::Option<verifier_deposit_sign_params::Params>,
}
/// Nested message and enum types in `VerifierDepositSignParams`.
pub mod verifier_deposit_sign_params {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Params {
        #[prost(message, tag = "1")]
        DepositSignFirstParam(super::DepositSignSession),
        #[prost(bytes, tag = "2")]
        AggNonce(::prost::alloc::vec::Vec<u8>),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifierDepositFinalizeParams {
    #[prost(oneof = "verifier_deposit_finalize_params::Params", tags = "1, 2, 3")]
    pub params: ::core::option::Option<verifier_deposit_finalize_params::Params>,
}
/// Nested message and enum types in `VerifierDepositFinalizeParams`.
pub mod verifier_deposit_finalize_params {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Params {
        #[prost(message, tag = "1")]
        DepositSignFirstParam(super::DepositSignSession),
        #[prost(bytes, tag = "2")]
        SchnorrSig(::prost::alloc::vec::Vec<u8>),
        #[prost(bytes, tag = "3")]
        MoveTxAggNonce(::prost::alloc::vec::Vec<u8>),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VerifierPublicKeys {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub verifier_public_keys: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WatchtowerParams {
    #[prost(oneof = "watchtower_params::Response", tags = "1, 2, 3")]
    pub response: ::core::option::Option<watchtower_params::Response>,
}
/// Nested message and enum types in `WatchtowerParams`.
pub mod watchtower_params {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(uint32, tag = "1")]
        WatchtowerId(u32),
        /// Flattened list of Winternitz pubkeys for each operator's timetxs.
        #[prost(message, tag = "2")]
        WinternitzPubkeys(super::WinternitzPubkey),
        /// xonly public key serialized to bytes
        #[prost(bytes, tag = "3")]
        XonlyPk(::prost::alloc::vec::Vec<u8>),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RawSignedMoveTx {
    #[prost(bytes = "vec", tag = "1")]
    pub raw_tx: ::prost::alloc::vec::Vec<u8>,
}
/// Generated client implementations.
pub mod clementine_operator_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// An operator is responsible for paying withdrawals. It has an unique ID and
    /// chain of UTXOs named `time_txs`. An operator also runs a verifier. These are
    /// connected to the same database and both have access to watchtowers'
    /// winternitz pubkeys.
    #[derive(Debug, Clone)]
    pub struct ClementineOperatorClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ClementineOperatorClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ClementineOperatorClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ClementineOperatorClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ClementineOperatorClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Returns an operator's parameters. It will be called once, by the
        /// aggregator, to set all the public keys.
        ///
        /// # Returns
        ///
        /// Returns an [`OperatorParams`], which includes operator's configuration and
        /// Watchtower parameters.
        pub async fn get_params(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::OperatorParams>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineOperator/GetParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("clementine.ClementineOperator", "GetParams"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Signs everything that includes Operator's burn connector.
        ///
        /// # Parameters
        ///
        /// - User's deposit information
        /// - Nonce metadata
        ///
        /// # Returns
        ///
        /// - Operator burn Schnorr signature
        pub async fn deposit_sign(
            &mut self,
            request: impl tonic::IntoRequest<super::DepositSignSession>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::OperatorBurnSig>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineOperator/DepositSign",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("clementine.ClementineOperator", "DepositSign"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Prepares a withdrawal if it's profitable and previous time_tx's timelock
        /// has ended, by paying for the withdrawal and locking the current time_tx.
        pub async fn new_withdrawal_sig(
            &mut self,
            request: impl tonic::IntoRequest<super::NewWithdrawalSigParams>,
        ) -> std::result::Result<
            tonic::Response<super::NewWithdrawalSigResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineOperator/NewWithdrawalSig",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("clementine.ClementineOperator", "NewWithdrawalSig"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Checks if a withdrawal is finalized.
        ///
        /// Steps:
        ///
        /// 1. Calculate move_txid and check if the withdrawal idx matches it
        /// 2. Check if it is proved on citrea
        /// 3. Send operator_take_txs
        ///
        /// # Parameters
        ///
        /// - withdrawal_id: Withdrawal's ID
        /// - deposit_outpoint: Withdrawal's deposit UTXO
        pub async fn withdrawal_finalized(
            &mut self,
            request: impl tonic::IntoRequest<super::WithdrawalFinalizedParams>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineOperator/WithdrawalFinalized",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "clementine.ClementineOperator",
                        "WithdrawalFinalized",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod clementine_verifier_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ClementineVerifierClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ClementineVerifierClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ClementineVerifierClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ClementineVerifierClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ClementineVerifierClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Returns verifiers' metadata. Needs to be called once per setup.
        pub async fn get_params(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::VerifierParams>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineVerifier/GetParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("clementine.ClementineVerifier", "GetParams"));
            self.inner.unary(req, path, codec).await
        }
        /// Saves all verifiers public keys.
        pub async fn set_verifiers(
            &mut self,
            request: impl tonic::IntoRequest<super::VerifierPublicKeys>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineVerifier/SetVerifiers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("clementine.ClementineVerifier", "SetVerifiers"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Saves an operator.
        pub async fn set_operator(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::OperatorParams>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineVerifier/SetOperator",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("clementine.ClementineVerifier", "SetOperator"));
            self.inner.client_streaming(req, path, codec).await
        }
        /// Saves a watchtower.
        pub async fn set_watchtower(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::WatchtowerParams>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineVerifier/SetWatchtower",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("clementine.ClementineVerifier", "SetWatchtower"),
                );
            self.inner.client_streaming(req, path, codec).await
        }
        /// Generates nonces for a deposit.
        ///
        /// # Returns
        ///
        /// Nonce metadata followed by nonces.
        pub async fn nonce_gen(
            &mut self,
            request: impl tonic::IntoRequest<super::NonceGenRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::NonceGenResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineVerifier/NonceGen",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("clementine.ClementineVerifier", "NonceGen"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Signs deposit with given aggNonces and it's corresponding secNonce using
        /// nonce_id.
        pub async fn deposit_sign(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::VerifierDepositSignParams,
            >,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::PartialSig>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineVerifier/DepositSign",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("clementine.ClementineVerifier", "DepositSign"));
            self.inner.streaming(req, path, codec).await
        }
        /// Verifies every signature and signs move_tx.
        pub async fn deposit_finalize(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::VerifierDepositFinalizeParams,
            >,
        ) -> std::result::Result<tonic::Response<super::PartialSig>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineVerifier/DepositFinalize",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("clementine.ClementineVerifier", "DepositFinalize"),
                );
            self.inner.client_streaming(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod clementine_watchtower_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Watchtowers are responsible for challenging the operator's kickoff txs.
    /// Each watchtower also runs a verifier server connected to the same db. Thus,
    /// they will have the operator's winternitz pubkeys.
    #[derive(Debug, Clone)]
    pub struct ClementineWatchtowerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ClementineWatchtowerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ClementineWatchtowerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ClementineWatchtowerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ClementineWatchtowerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Returns every operator's winternitz public keys.
        pub async fn get_params(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::WatchtowerParams>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineWatchtower/GetParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("clementine.ClementineWatchtower", "GetParams"));
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod clementine_aggregator_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ClementineAggregatorClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ClementineAggregatorClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ClementineAggregatorClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ClementineAggregatorClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ClementineAggregatorClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn setup(
            &mut self,
            request: impl tonic::IntoRequest<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineAggregator/Setup",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("clementine.ClementineAggregator", "Setup"));
            self.inner.unary(req, path, codec).await
        }
        /// This will call, DepositNonceGen for every verifier,
        /// then it will aggregate one by one and then send it to DepositSign,
        /// then it will aggregate the partial sigs and send it to DepositFinalize,
        /// this will also call the operator to get their signatures and send it to
        /// DepositFinalize then it will collect the partial sigs and create the move
        /// tx.
        pub async fn new_deposit(
            &mut self,
            request: impl tonic::IntoRequest<super::DepositParams>,
        ) -> std::result::Result<
            tonic::Response<super::RawSignedMoveTx>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/clementine.ClementineAggregator/NewDeposit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("clementine.ClementineAggregator", "NewDeposit"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod clementine_operator_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ClementineOperatorServer.
    #[async_trait]
    pub trait ClementineOperator: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the GetParams method.
        type GetParamsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::OperatorParams, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Returns an operator's parameters. It will be called once, by the
        /// aggregator, to set all the public keys.
        ///
        /// # Returns
        ///
        /// Returns an [`OperatorParams`], which includes operator's configuration and
        /// Watchtower parameters.
        async fn get_params(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<tonic::Response<Self::GetParamsStream>, tonic::Status>;
        /// Server streaming response type for the DepositSign method.
        type DepositSignStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::OperatorBurnSig, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Signs everything that includes Operator's burn connector.
        ///
        /// # Parameters
        ///
        /// - User's deposit information
        /// - Nonce metadata
        ///
        /// # Returns
        ///
        /// - Operator burn Schnorr signature
        async fn deposit_sign(
            &self,
            request: tonic::Request<super::DepositSignSession>,
        ) -> std::result::Result<
            tonic::Response<Self::DepositSignStream>,
            tonic::Status,
        >;
        /// Prepares a withdrawal if it's profitable and previous time_tx's timelock
        /// has ended, by paying for the withdrawal and locking the current time_tx.
        async fn new_withdrawal_sig(
            &self,
            request: tonic::Request<super::NewWithdrawalSigParams>,
        ) -> std::result::Result<
            tonic::Response<super::NewWithdrawalSigResponse>,
            tonic::Status,
        >;
        /// Checks if a withdrawal is finalized.
        ///
        /// Steps:
        ///
        /// 1. Calculate move_txid and check if the withdrawal idx matches it
        /// 2. Check if it is proved on citrea
        /// 3. Send operator_take_txs
        ///
        /// # Parameters
        ///
        /// - withdrawal_id: Withdrawal's ID
        /// - deposit_outpoint: Withdrawal's deposit UTXO
        async fn withdrawal_finalized(
            &self,
            request: tonic::Request<super::WithdrawalFinalizedParams>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
    }
    /// An operator is responsible for paying withdrawals. It has an unique ID and
    /// chain of UTXOs named `time_txs`. An operator also runs a verifier. These are
    /// connected to the same database and both have access to watchtowers'
    /// winternitz pubkeys.
    #[derive(Debug)]
    pub struct ClementineOperatorServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ClementineOperatorServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ClementineOperatorServer<T>
    where
        T: ClementineOperator,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/clementine.ClementineOperator/GetParams" => {
                    #[allow(non_camel_case_types)]
                    struct GetParamsSvc<T: ClementineOperator>(pub Arc<T>);
                    impl<
                        T: ClementineOperator,
                    > tonic::server::ServerStreamingService<super::Empty>
                    for GetParamsSvc<T> {
                        type Response = super::OperatorParams;
                        type ResponseStream = T::GetParamsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineOperator>::get_params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/clementine.ClementineOperator/DepositSign" => {
                    #[allow(non_camel_case_types)]
                    struct DepositSignSvc<T: ClementineOperator>(pub Arc<T>);
                    impl<
                        T: ClementineOperator,
                    > tonic::server::ServerStreamingService<super::DepositSignSession>
                    for DepositSignSvc<T> {
                        type Response = super::OperatorBurnSig;
                        type ResponseStream = T::DepositSignStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DepositSignSession>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineOperator>::deposit_sign(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DepositSignSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/clementine.ClementineOperator/NewWithdrawalSig" => {
                    #[allow(non_camel_case_types)]
                    struct NewWithdrawalSigSvc<T: ClementineOperator>(pub Arc<T>);
                    impl<
                        T: ClementineOperator,
                    > tonic::server::UnaryService<super::NewWithdrawalSigParams>
                    for NewWithdrawalSigSvc<T> {
                        type Response = super::NewWithdrawalSigResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::NewWithdrawalSigParams>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineOperator>::new_withdrawal_sig(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = NewWithdrawalSigSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/clementine.ClementineOperator/WithdrawalFinalized" => {
                    #[allow(non_camel_case_types)]
                    struct WithdrawalFinalizedSvc<T: ClementineOperator>(pub Arc<T>);
                    impl<
                        T: ClementineOperator,
                    > tonic::server::UnaryService<super::WithdrawalFinalizedParams>
                    for WithdrawalFinalizedSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::WithdrawalFinalizedParams>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineOperator>::withdrawal_finalized(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = WithdrawalFinalizedSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ClementineOperatorServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "clementine.ClementineOperator";
    impl<T> tonic::server::NamedService for ClementineOperatorServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
pub mod clementine_verifier_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ClementineVerifierServer.
    #[async_trait]
    pub trait ClementineVerifier: std::marker::Send + std::marker::Sync + 'static {
        /// Returns verifiers' metadata. Needs to be called once per setup.
        async fn get_params(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::VerifierParams>, tonic::Status>;
        /// Saves all verifiers public keys.
        async fn set_verifiers(
            &self,
            request: tonic::Request<super::VerifierPublicKeys>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Saves an operator.
        async fn set_operator(
            &self,
            request: tonic::Request<tonic::Streaming<super::OperatorParams>>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Saves a watchtower.
        async fn set_watchtower(
            &self,
            request: tonic::Request<tonic::Streaming<super::WatchtowerParams>>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// Server streaming response type for the NonceGen method.
        type NonceGenStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::NonceGenResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Generates nonces for a deposit.
        ///
        /// # Returns
        ///
        /// Nonce metadata followed by nonces.
        async fn nonce_gen(
            &self,
            request: tonic::Request<super::NonceGenRequest>,
        ) -> std::result::Result<tonic::Response<Self::NonceGenStream>, tonic::Status>;
        /// Server streaming response type for the DepositSign method.
        type DepositSignStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::PartialSig, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Signs deposit with given aggNonces and it's corresponding secNonce using
        /// nonce_id.
        async fn deposit_sign(
            &self,
            request: tonic::Request<tonic::Streaming<super::VerifierDepositSignParams>>,
        ) -> std::result::Result<
            tonic::Response<Self::DepositSignStream>,
            tonic::Status,
        >;
        /// Verifies every signature and signs move_tx.
        async fn deposit_finalize(
            &self,
            request: tonic::Request<
                tonic::Streaming<super::VerifierDepositFinalizeParams>,
            >,
        ) -> std::result::Result<tonic::Response<super::PartialSig>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct ClementineVerifierServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ClementineVerifierServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ClementineVerifierServer<T>
    where
        T: ClementineVerifier,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/clementine.ClementineVerifier/GetParams" => {
                    #[allow(non_camel_case_types)]
                    struct GetParamsSvc<T: ClementineVerifier>(pub Arc<T>);
                    impl<T: ClementineVerifier> tonic::server::UnaryService<super::Empty>
                    for GetParamsSvc<T> {
                        type Response = super::VerifierParams;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineVerifier>::get_params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/clementine.ClementineVerifier/SetVerifiers" => {
                    #[allow(non_camel_case_types)]
                    struct SetVerifiersSvc<T: ClementineVerifier>(pub Arc<T>);
                    impl<
                        T: ClementineVerifier,
                    > tonic::server::UnaryService<super::VerifierPublicKeys>
                    for SetVerifiersSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VerifierPublicKeys>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineVerifier>::set_verifiers(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetVerifiersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/clementine.ClementineVerifier/SetOperator" => {
                    #[allow(non_camel_case_types)]
                    struct SetOperatorSvc<T: ClementineVerifier>(pub Arc<T>);
                    impl<
                        T: ClementineVerifier,
                    > tonic::server::ClientStreamingService<super::OperatorParams>
                    for SetOperatorSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::OperatorParams>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineVerifier>::set_operator(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetOperatorSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.client_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/clementine.ClementineVerifier/SetWatchtower" => {
                    #[allow(non_camel_case_types)]
                    struct SetWatchtowerSvc<T: ClementineVerifier>(pub Arc<T>);
                    impl<
                        T: ClementineVerifier,
                    > tonic::server::ClientStreamingService<super::WatchtowerParams>
                    for SetWatchtowerSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::WatchtowerParams>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineVerifier>::set_watchtower(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetWatchtowerSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.client_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/clementine.ClementineVerifier/NonceGen" => {
                    #[allow(non_camel_case_types)]
                    struct NonceGenSvc<T: ClementineVerifier>(pub Arc<T>);
                    impl<
                        T: ClementineVerifier,
                    > tonic::server::ServerStreamingService<super::NonceGenRequest>
                    for NonceGenSvc<T> {
                        type Response = super::NonceGenResponse;
                        type ResponseStream = T::NonceGenStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::NonceGenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineVerifier>::nonce_gen(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = NonceGenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/clementine.ClementineVerifier/DepositSign" => {
                    #[allow(non_camel_case_types)]
                    struct DepositSignSvc<T: ClementineVerifier>(pub Arc<T>);
                    impl<
                        T: ClementineVerifier,
                    > tonic::server::StreamingService<super::VerifierDepositSignParams>
                    for DepositSignSvc<T> {
                        type Response = super::PartialSig;
                        type ResponseStream = T::DepositSignStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::VerifierDepositSignParams>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineVerifier>::deposit_sign(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DepositSignSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/clementine.ClementineVerifier/DepositFinalize" => {
                    #[allow(non_camel_case_types)]
                    struct DepositFinalizeSvc<T: ClementineVerifier>(pub Arc<T>);
                    impl<
                        T: ClementineVerifier,
                    > tonic::server::ClientStreamingService<
                        super::VerifierDepositFinalizeParams,
                    > for DepositFinalizeSvc<T> {
                        type Response = super::PartialSig;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::VerifierDepositFinalizeParams>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineVerifier>::deposit_finalize(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DepositFinalizeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.client_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ClementineVerifierServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "clementine.ClementineVerifier";
    impl<T> tonic::server::NamedService for ClementineVerifierServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
pub mod clementine_watchtower_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ClementineWatchtowerServer.
    #[async_trait]
    pub trait ClementineWatchtower: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the GetParams method.
        type GetParamsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::WatchtowerParams, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Returns every operator's winternitz public keys.
        async fn get_params(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<tonic::Response<Self::GetParamsStream>, tonic::Status>;
    }
    /// Watchtowers are responsible for challenging the operator's kickoff txs.
    /// Each watchtower also runs a verifier server connected to the same db. Thus,
    /// they will have the operator's winternitz pubkeys.
    #[derive(Debug)]
    pub struct ClementineWatchtowerServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ClementineWatchtowerServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for ClementineWatchtowerServer<T>
    where
        T: ClementineWatchtower,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/clementine.ClementineWatchtower/GetParams" => {
                    #[allow(non_camel_case_types)]
                    struct GetParamsSvc<T: ClementineWatchtower>(pub Arc<T>);
                    impl<
                        T: ClementineWatchtower,
                    > tonic::server::ServerStreamingService<super::Empty>
                    for GetParamsSvc<T> {
                        type Response = super::WatchtowerParams;
                        type ResponseStream = T::GetParamsStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineWatchtower>::get_params(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ClementineWatchtowerServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "clementine.ClementineWatchtower";
    impl<T> tonic::server::NamedService for ClementineWatchtowerServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
pub mod clementine_aggregator_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ClementineAggregatorServer.
    #[async_trait]
    pub trait ClementineAggregator: std::marker::Send + std::marker::Sync + 'static {
        async fn setup(
            &self,
            request: tonic::Request<super::Empty>,
        ) -> std::result::Result<tonic::Response<super::Empty>, tonic::Status>;
        /// This will call, DepositNonceGen for every verifier,
        /// then it will aggregate one by one and then send it to DepositSign,
        /// then it will aggregate the partial sigs and send it to DepositFinalize,
        /// this will also call the operator to get their signatures and send it to
        /// DepositFinalize then it will collect the partial sigs and create the move
        /// tx.
        async fn new_deposit(
            &self,
            request: tonic::Request<super::DepositParams>,
        ) -> std::result::Result<tonic::Response<super::RawSignedMoveTx>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct ClementineAggregatorServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ClementineAggregatorServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for ClementineAggregatorServer<T>
    where
        T: ClementineAggregator,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/clementine.ClementineAggregator/Setup" => {
                    #[allow(non_camel_case_types)]
                    struct SetupSvc<T: ClementineAggregator>(pub Arc<T>);
                    impl<
                        T: ClementineAggregator,
                    > tonic::server::UnaryService<super::Empty> for SetupSvc<T> {
                        type Response = super::Empty;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Empty>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineAggregator>::setup(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetupSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/clementine.ClementineAggregator/NewDeposit" => {
                    #[allow(non_camel_case_types)]
                    struct NewDepositSvc<T: ClementineAggregator>(pub Arc<T>);
                    impl<
                        T: ClementineAggregator,
                    > tonic::server::UnaryService<super::DepositParams>
                    for NewDepositSvc<T> {
                        type Response = super::RawSignedMoveTx;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DepositParams>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClementineAggregator>::new_deposit(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = NewDepositSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ClementineAggregatorServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "clementine.ClementineAggregator";
    impl<T> tonic::server::NamedService for ClementineAggregatorServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
