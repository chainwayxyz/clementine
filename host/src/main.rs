use std::iter;
use std::{fs::File, io::BufReader};

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use bridge_core::btc::BlockHeader;
use bridge_methods::{GUEST_ELF, GUEST_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use serde_json::Value;
use bridge_core::merkle::{MerkleTree, self};
// use bridge_core::utils::char_to_digit;
use bridge_core::utils::parse_str;
use bridge_core::btc::calculate_double_sha256;
use bitcoin::hash_types::Txid;
use bitcoin::hashes::Hash;
// use bitcoin::hex::FromHex;
use bitcoin::merkle_tree::{self, PartialMerkleTree};
use bridge_core::tx::{Transaction, TxInput, TxOutput};

#[allow(non_snake_case)]
#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct BlockInfoExtras {
    reward: u128,
    coinbaseRaw: String,
    orphans: Vec<String>,
    medianFee: f64,
    feeRange: Vec<f64>,
    coinbaseAddress: String,
    header: String,
    // ...
    // add the fields you want
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct BlockInfo {
    id: String,
    height: usize,
    version: usize,
    timestamp: u128,
    bits: u128,
    nonce: u128,
    difficulty: f64,
    merkle_root: String,
    tx_count: usize,
    size: u128,
    weight: u128,
    previousblockhash: String,
    mediantime: u128,
    stale: bool,
    extras: BlockInfoExtras,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct RpcResult {
    bestblockhash: String,
    chainwork: String,
}

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct RpcInfo {
    result: RpcResult,
}

pub fn json_to_obj<T: DeserializeOwned>(file_path: &str) -> T {
    let file = File::open(file_path).expect("error");
    let reader = BufReader::new(file);
    let a: T = serde_json::from_reader(reader).expect("error");
    return a;
}

fn main() {
    env_logger::init();

    let block_info_list: Vec<BlockInfo> = json_to_obj::<Value>("./host/data/block.json")
        .as_array()
        .unwrap()
        .iter()
        .map(|block_info_value| {
            serde_json::from_value::<BlockInfo>(block_info_value.clone()).unwrap()
        })
        .collect();

    let rpc_info_list: Vec<RpcInfo> = json_to_obj::<Value>("./host/data/rpc.json")
        .as_array()
        .unwrap()
        .iter()
        .map(|rpc_info_value| serde_json::from_value::<RpcInfo>(rpc_info_value.clone()).unwrap())
        .collect();

    // assert_eq!(rpc_info_list.len() - block_info_list.len(), 1);

    let n: u32 = block_info_list.len() as u32;

    let first_chain_work: [u8; 32] = hex::decode(rpc_info_list[0].result.chainwork.clone())
        .unwrap()
        .try_into()
        .unwrap();

    let mut env = ExecutorEnv::builder();

    env.write(&n).unwrap();
    env.write(&first_chain_work).unwrap();

    // let mut env = ExecutorEnv::builder()
    //     .write(&n)
    //     .unwrap()
    //     .write(&first_chain_work)
    //     .unwrap();
    // .build()
    // .unwrap();

    for i in 0..n as usize {
        let block_header: [u8; 80] = hex::decode(block_info_list[i].extras.header.clone())
            .unwrap()
            .try_into()
            .unwrap();
        let block_header = BlockHeader::from_slice(&block_header);
        env.write(&block_header).unwrap();
    }

    let simple_tx_from_json = json_to_obj::<Value>("./host/data/simpletx.json");
    let simple_tx_version = simple_tx_from_json["version"].as_u64().unwrap() as i32;
    let simple_tx_lock_time = simple_tx_from_json["locktime"].as_u64().unwrap() as u32;
    let simple_tx_inputs = simple_tx_from_json["inputs"].as_array().unwrap();
    let simple_tx_outputs = simple_tx_from_json["outputs"].as_array().unwrap();
    let simple_tx_input_count = simple_tx_inputs.len();
    let new_tx_inputs = simple_tx_inputs.iter().map(|input| {
        let prev_tx_id = hex::decode(input["txid"].as_str().unwrap()).unwrap().try_into().unwrap();
        let output_index = input["output"].as_u64().unwrap() as u32;
        let mut script_sig = hex::decode(input["script"].as_str().unwrap()).unwrap();
        script_sig.extend(iter::repeat(0).take(256 - script_sig.len()));
        let script_sig_size = script_sig.len() as u8;
        let sequence = input["sequence"].as_u64().unwrap() as u32;
        let script_sig_array: [u8; 256] = script_sig.try_into().unwrap();
        TxInput::new(prev_tx_id, output_index, script_sig_size, script_sig_array, sequence)
    }).collect::<Vec<TxInput>>();
    let new_tx_outputs = simple_tx_outputs.iter().map(|output| {
        let value = output["value"].as_u64().unwrap();
        let mut script_pub_key = hex::decode(output["script"].as_str().unwrap()).unwrap();
        script_pub_key.extend(iter::repeat(0).take(256 - script_pub_key.len()));
        let script_pub_key_size = script_pub_key.len() as u8;
        let script_pub_key_array: [u8; 256] = script_pub_key.try_into().unwrap();
        TxOutput::new(value, script_pub_key_size, script_pub_key_array)
    }).collect::<Vec<TxOutput>>();
    let simple_tx = Transaction::new(
        simple_tx_version,
        simple_tx_input_count as u8,
        new_tx_inputs.try_into().unwrap(),
        simple_tx_outputs.len() as u8,
        new_tx_outputs.try_into().unwrap(),
        simple_tx_lock_time,
    );
    let serialized_tx = simple_tx.serialize();
    println!("serialized_tx: {}", hex::encode(&serialized_tx.0[..serialized_tx.1]));
    let calculated_tx_id = simple_tx.calculate_txid();
    println!("calculated_tx_id: {}", hex::encode(calculated_tx_id));



    let env_build = env.build().unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove_elf(env_build, GUEST_ELF).unwrap();

    let (mut output_block_hash, last_chain_work): ([u8; 32], [u8; 32]) =
        receipt.journal.decode().unwrap();

    output_block_hash.reverse();

    println!("Output: {}", hex::encode(output_block_hash));
    println!("Chain Work: {}", hex::encode(last_chain_work));

    assert_eq!(
        hex::encode(last_chain_work),
        rpc_info_list[rpc_info_list.len() - 1].result.chainwork
    );

    assert_eq!(
        hex::encode(output_block_hash),
        rpc_info_list[rpc_info_list.len() - 1].result.bestblockhash
    );

    // Optional: Verify receipt to confirm that recipients will also be able to
    // verify your receipt
    receipt.verify(GUEST_ID).unwrap();
}
