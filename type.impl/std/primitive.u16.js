(function() {
    var type_impls = Object.fromEntries([["clementine_core",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbsDiff-for-u16\" class=\"impl\"><a href=\"#impl-AbsDiff-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AbsDiff for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff\" class=\"method trait-impl\"><a href=\"#method.abs_diff\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>abs_diff</code> functions in the standard library, for example\n<a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.abs_diff\" title=\"method u32::abs_diff\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","AbsDiff","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbsDiffAssign-for-u16\" class=\"impl\"><a href=\"#impl-AbsDiffAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AbsDiffAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff_assign\" class=\"method trait-impl\"><a href=\"#method.abs_diff_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abs_diff_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Subtracts a number by another and takes the absolute value, in place. The output\ntype is the unsigned type with the same width.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::abs_diff#abs_diff_assign\">here</a>.</p>\n</div></details></div></details>","AbsDiffAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Absorb-for-u16\" class=\"impl\"><a href=\"#impl-Absorb-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Absorb for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sponge_bytes\" class=\"method trait-impl\"><a href=\"#method.to_sponge_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sponge_bytes</a>(&amp;self, dest: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;)</h4></section></summary><div class='docblock'>Converts the object into a list of bytes that can be absorbed by a <code>CryptographicSponge</code>.\nAppend the list to <code>dest</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sponge_field_elements\" class=\"method trait-impl\"><a href=\"#method.to_sponge_field_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sponge_field_elements</a>&lt;F&gt;(&amp;self, dest: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;F&gt;)<div class=\"where\">where\n    F: PrimeField,</div></h4></section></summary><div class='docblock'>Converts the object into field elements that can be absorbed by a <code>CryptographicSponge</code>.\nAppend the list to <code>dest</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sponge_bytes_as_vec\" class=\"method trait-impl\"><a href=\"#method.to_sponge_bytes_as_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sponge_bytes_as_vec</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts the object into a list of bytes that can be absorbed by a <code>CryptographicSponge</code>.\nReturn the list as <code>Vec</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sponge_field_elements_as_vec\" class=\"method trait-impl\"><a href=\"#method.to_sponge_field_elements_as_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sponge_field_elements_as_vec</a>&lt;F&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;F&gt;<div class=\"where\">where\n    F: PrimeField,</div></h4></section></summary><div class='docblock'>Converts the object into field elements that can be absorbed by a <code>CryptographicSponge</code>.\nReturn the list as <code>Vec</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.batch_to_sponge_bytes\" class=\"method trait-impl\"><a href=\"#method.batch_to_sponge_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">batch_to_sponge_bytes</a>(batch: &amp;[Self], dest: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Specifies the conversion into a list of bytes for a batch. Append the list to <code>dest</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.batch_to_sponge_bytes_as_vec\" class=\"method trait-impl\"><a href=\"#method.batch_to_sponge_bytes_as_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">batch_to_sponge_bytes_as_vec</a>(batch: &amp;[Self]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Specifies the conversion into a list of bytes for a batch. Return the list as <code>Vec</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.batch_to_sponge_field_elements\" class=\"method trait-impl\"><a href=\"#method.batch_to_sponge_field_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">batch_to_sponge_field_elements</a>&lt;F&gt;(batch: &amp;[Self], dest: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;F&gt;)<div class=\"where\">where\n    F: PrimeField,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Specifies the conversion into a list of field elements for a batch. Append the list to <code>dest</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.batch_to_sponge_field_elements_as_vec\" class=\"method trait-impl\"><a href=\"#method.batch_to_sponge_field_elements_as_vec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">batch_to_sponge_field_elements_as_vec</a>&lt;F&gt;(batch: &amp;[Self]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;F&gt;<div class=\"where\">where\n    F: PrimeField,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Specifies the conversion into a list of field elements for a batch. Return the list as <code>Vec</code>.</div></details></div></details>","Absorb","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Add%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_repr/struct.OwnedRepr.html\" title=\"struct ndarray::data_repr::OwnedRepr\">OwnedRepr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&'a ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26BigInt%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/addition.rs.html#85\">Source</a><a href=\"#impl-Add%3C%26BigInt%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/addition.rs.html#85\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/addition.rs.html#85\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&BigInt>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26BigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/addition.rs.html#116\">Source</a><a href=\"#impl-Add%3C%26BigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/addition.rs.html#116\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/addition.rs.html#116\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26Complex%3Cu16%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#impl-Add%3C%26Complex%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&'a Complex<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#123\">Source</a></span><a href=\"#impl-Add%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#123\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#123\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Add%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataOwned.html\" title=\"trait ndarray::data_traits::DataOwned\">DataOwned</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; + <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataMut.html\" title=\"trait ndarray::data_traits::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CBigInt%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/addition.rs.html#85\">Source</a><a href=\"#impl-Add%3CBigInt%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/addition.rs.html#85\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/addition.rs.html#85\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<BigInt>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CBigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/addition.rs.html#116\">Source</a><a href=\"#impl-Add%3CBigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/addition.rs.html#116\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/addition.rs.html#116\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CComplex%3Cu16%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#impl-Add%3CComplex%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<Complex<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-Add%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = U16&lt;O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: U16&lt;O&gt;) -&gt; U16&lt;O&gt;</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#123\">Source</a></span><a href=\"#impl-Add-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#123\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#123\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">const fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#779\">Source</a></span><a href=\"#impl-AddAssign%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#779\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-AddAssign%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: U16&lt;O&gt;)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#779\">Source</a></span><a href=\"#impl-AddAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#779\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddMul-for-u16\" class=\"impl\"><a href=\"#impl-AddMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AddMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_mul\" class=\"method trait-impl\"><a href=\"#method.add_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">add_mul</a>(self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Adds a number and the product of two other numbers.</p>\n<p>$f(x, y, z) = x + yz$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::add_mul#add_mul\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","AddMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddMulAssign-for-u16\" class=\"impl\"><a href=\"#impl-AddMulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AddMulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_mul_assign\" class=\"method trait-impl\"><a href=\"#method.add_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">add_mul_assign</a>(&amp;mut self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Adds the product of two other numbers to a number in place.</p>\n<p>$x \\gets x + yz$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::add_mul#add_mul_assign\">here</a>.</p>\n</div></details></div></details>","AddMulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShl%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShl%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shl\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shl</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount, and any number may be shifted by any\nnegative amount; shifting by a negative amount with a high absolute value\nreturns <code>Some(0)</code>.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(2^b x) &amp;\n\\text{if} \\quad b \\geq 0 \\ \\mathrm{and}\\ 2^b x &lt; 2^W, \\\\\n\\operatorname{None} &amp;\n\\text{if} \\quad b \\geq 0 \\ \\mathrm{and} \\ 2^b x \\geq 2^W, \\\\\n\\operatorname{Some}(\\lfloor x/2^{-b} \\rfloor) &amp;\n\\text{if} \\quad b &lt; 0,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shl#arithmetic_checked_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShl<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShl%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShl%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shl\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shl</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount, and any number may be shifted by any\nnegative amount; shifting by a negative amount with a high absolute value\nreturns <code>Some(0)</code>.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(2^b x) &amp;\n\\text{if} \\quad b \\geq 0 \\ \\mathrm{and}\\ 2^b x &lt; 2^W, \\\\\n\\operatorname{None} &amp;\n\\text{if} \\quad b \\geq 0 \\ \\mathrm{and} \\ 2^b x \\geq 2^W, \\\\\n\\operatorname{Some}(\\lfloor x/2^{-b} \\rfloor) &amp;\n\\text{if} \\quad b &lt; 0,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shl#arithmetic_checked_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShl<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShl%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShl%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shl\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shl</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount, and any number may be shifted by any\nnegative amount; shifting by a negative amount with a high absolute value\nreturns <code>Some(0)</code>.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(2^b x) &amp;\n\\text{if} \\quad b \\geq 0 \\ \\mathrm{and}\\ 2^b x &lt; 2^W, \\\\\n\\operatorname{None} &amp;\n\\text{if} \\quad b \\geq 0 \\ \\mathrm{and} \\ 2^b x \\geq 2^W, \\\\\n\\operatorname{Some}(\\lfloor x/2^{-b} \\rfloor) &amp;\n\\text{if} \\quad b &lt; 0,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shl#arithmetic_checked_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShl<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShl%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShl%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shl\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shl</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount, and any number may be shifted by any\nnegative amount; shifting by a negative amount with a high absolute value\nreturns <code>Some(0)</code>.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(2^b x) &amp;\n\\text{if} \\quad b \\geq 0 \\ \\mathrm{and}\\ 2^b x &lt; 2^W, \\\\\n\\operatorname{None} &amp;\n\\text{if} \\quad b \\geq 0 \\ \\mathrm{and} \\ 2^b x \\geq 2^W, \\\\\n\\operatorname{Some}(\\lfloor x/2^{-b} \\rfloor) &amp;\n\\text{if} \\quad b &lt; 0,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shl#arithmetic_checked_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShl<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShl%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShl%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shl\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shl</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount, and any number may be shifted by any\nnegative amount; shifting by a negative amount with a high absolute value\nreturns <code>Some(0)</code>.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(2^b x) &amp;\n\\text{if} \\quad b \\geq 0 \\ \\mathrm{and}\\ 2^b x &lt; 2^W, \\\\\n\\operatorname{None} &amp;\n\\text{if} \\quad b \\geq 0 \\ \\mathrm{and} \\ 2^b x \\geq 2^W, \\\\\n\\operatorname{Some}(\\lfloor x/2^{-b} \\rfloor) &amp;\n\\text{if} \\quad b &lt; 0,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shl#arithmetic_checked_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShl<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShl%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShl%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shl\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shl</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount, and any number may be shifted by any\nnegative amount; shifting by a negative amount with a high absolute value\nreturns <code>Some(0)</code>.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(2^b x) &amp;\n\\text{if} \\quad b \\geq 0 \\ \\mathrm{and}\\ 2^b x &lt; 2^W, \\\\\n\\operatorname{None} &amp;\n\\text{if} \\quad b \\geq 0 \\ \\mathrm{and} \\ 2^b x \\geq 2^W, \\\\\n\\operatorname{Some}(\\lfloor x/2^{-b} \\rfloor) &amp;\n\\text{if} \\quad b &lt; 0,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shl#arithmetic_checked_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShl<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShl%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShl%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shl\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shl</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(2^b x) &amp; \\text{if} \\quad 2^b x &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad 2^b x \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shl#arithmetic_checked_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShl<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShl%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShl%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shl\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shl</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(2^b x) &amp; \\text{if} \\quad 2^b x &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad 2^b x \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shl#arithmetic_checked_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShl<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShl%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShl%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shl\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shl</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(2^b x) &amp; \\text{if} \\quad 2^b x &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad 2^b x \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shl#arithmetic_checked_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShl<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShl%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShl%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shl\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shl</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(2^b x) &amp; \\text{if} \\quad 2^b x &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad 2^b x \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shl#arithmetic_checked_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShl<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShl%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShl%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shl\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shl</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(2^b x) &amp; \\text{if} \\quad 2^b x &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad 2^b x \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shl#arithmetic_checked_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShl<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShl%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShl%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shl\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shl</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(2^b x) &amp; \\text{if} \\quad 2^b x &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad 2^b x \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shl#arithmetic_checked_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShl<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShr%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShr%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shr\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shr</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount, and any number may be shifted by any\nnon-negative amount; shifting by a large amount returns <code>Some(0)</code>.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(\\lfloor x/2^b \\rfloor) &amp;\n\\text{if} \\quad b \\geq 0, \\\\\n\\operatorname{Some}(2^{-b} x) &amp;\n\\text{if} \\quad b &lt; 0 \\ \\mathrm{and} \\ 2^{-b} x &lt; 2^W, \\\\\n\\operatorname{None} &amp;\n\\text{if} \\quad b &lt; 0 \\ \\mathrm{and} \\ 2^{-b} x \\geq 2^W, \\\\\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shr#arithmetic_checked_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShr<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShr%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShr%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shr\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shr</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount, and any number may be shifted by any\nnon-negative amount; shifting by a large amount returns <code>Some(0)</code>.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(\\lfloor x/2^b \\rfloor) &amp;\n\\text{if} \\quad b \\geq 0, \\\\\n\\operatorname{Some}(2^{-b} x) &amp;\n\\text{if} \\quad b &lt; 0 \\ \\mathrm{and} \\ 2^{-b} x &lt; 2^W, \\\\\n\\operatorname{None} &amp;\n\\text{if} \\quad b &lt; 0 \\ \\mathrm{and} \\ 2^{-b} x \\geq 2^W, \\\\\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shr#arithmetic_checked_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShr<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShr%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShr%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shr\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shr</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount, and any number may be shifted by any\nnon-negative amount; shifting by a large amount returns <code>Some(0)</code>.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(\\lfloor x/2^b \\rfloor) &amp;\n\\text{if} \\quad b \\geq 0, \\\\\n\\operatorname{Some}(2^{-b} x) &amp;\n\\text{if} \\quad b &lt; 0 \\ \\mathrm{and} \\ 2^{-b} x &lt; 2^W, \\\\\n\\operatorname{None} &amp;\n\\text{if} \\quad b &lt; 0 \\ \\mathrm{and} \\ 2^{-b} x \\geq 2^W, \\\\\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shr#arithmetic_checked_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShr<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShr%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShr%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shr\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shr</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount, and any number may be shifted by any\nnon-negative amount; shifting by a large amount returns <code>Some(0)</code>.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(\\lfloor x/2^b \\rfloor) &amp;\n\\text{if} \\quad b \\geq 0, \\\\\n\\operatorname{Some}(2^{-b} x) &amp;\n\\text{if} \\quad b &lt; 0 \\ \\mathrm{and} \\ 2^{-b} x &lt; 2^W, \\\\\n\\operatorname{None} &amp;\n\\text{if} \\quad b &lt; 0 \\ \\mathrm{and} \\ 2^{-b} x \\geq 2^W, \\\\\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shr#arithmetic_checked_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShr<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShr%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShr%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shr\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shr</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount, and any number may be shifted by any\nnon-negative amount; shifting by a large amount returns <code>Some(0)</code>.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(\\lfloor x/2^b \\rfloor) &amp;\n\\text{if} \\quad b \\geq 0, \\\\\n\\operatorname{Some}(2^{-b} x) &amp;\n\\text{if} \\quad b &lt; 0 \\ \\mathrm{and} \\ 2^{-b} x &lt; 2^W, \\\\\n\\operatorname{None} &amp;\n\\text{if} \\quad b &lt; 0 \\ \\mathrm{and} \\ 2^{-b} x \\geq 2^W, \\\\\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shr#arithmetic_checked_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShr<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArithmeticCheckedShr%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ArithmeticCheckedShr%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ArithmeticCheckedShr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arithmetic_checked_shr\" class=\"method trait-impl\"><a href=\"#method.arithmetic_checked_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arithmetic_checked_shr</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2). If the result is too\nlarge to be represented, <code>None</code> is returned.</p>\n<p>Zero may be shifted by any amount, and any number may be shifted by any\nnon-negative amount; shifting by a large amount returns <code>Some(0)</code>.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(\\lfloor x/2^b \\rfloor) &amp;\n\\text{if} \\quad b \\geq 0, \\\\\n\\operatorname{Some}(2^{-b} x) &amp;\n\\text{if} \\quad b &lt; 0 \\ \\mathrm{and} \\ 2^{-b} x &lt; 2^W, \\\\\n\\operatorname{None} &amp;\n\\text{if} \\quad b &lt; 0 \\ \\mathrm{and} \\ 2^{-b} x \\geq 2^W, \\\\\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::arithmetic_checked_shr#arithmetic_checked_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ArithmeticCheckedShr<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cf32%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Cf32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<f32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cf64%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Cf64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<f64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci128%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci16%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci32%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci64%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Ci8%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cisize%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu128%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu16%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu32%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu64%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cu8%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsPrimitive%3Cusize%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#impl-AsPrimitive%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#757\">Source</a><a href=\"#method.as_\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html#tymethod.as_\" class=\"fn\">as_</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Convert a value to another, using the <code>as</code> operator.</div></details></div></details>","AsPrimitive<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsULE-for-u16\" class=\"impl\"><a href=\"#impl-AsULE-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AsULE for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.ULE\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ULE\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ULE</a> = RawBytesULE&lt;2&gt;</h4></section></summary><div class='docblock'>The ULE type corresponding to <code>Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_unaligned\" class=\"method trait-impl\"><a href=\"#method.to_unaligned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_unaligned</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as AsULE&gt;::ULE</h4></section></summary><div class='docblock'>Converts from <code>Self</code> to <code>Self::ULE</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_unaligned\" class=\"method trait-impl\"><a href=\"#method.from_unaligned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_unaligned</a>(unaligned: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as AsULE&gt;::ULE) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts from <code>Self::ULE</code> to <code>Self</code>. <a>Read more</a></div></details></div></details>","AsULE","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#169\">Source</a></span><a href=\"#impl-Binary-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#169\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Binary.html#tymethod.fmt\">Read more</a></div></details></div></details>","Binary","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BinomialCoefficient-for-u16\" class=\"impl\"><a href=\"#impl-BinomialCoefficient-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BinomialCoefficient for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.binomial_coefficient\" class=\"method trait-impl\"><a href=\"#method.binomial_coefficient\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">binomial_coefficient</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Computes the binomial coefficient of two numbers. If the inputs are too large, the\nfunction panics.</p>\n<p>The second argument must be non-negative, but the first may be negative. If it is,\nthe identity $\\binom{-n}{k} = (-1)^k \\binom{n+k-1}{k}$ is used.</p>\n<p>$$\nf(n, k) = \\begin{cases}\n\\binom{n}{k} &amp; \\text{if} \\quad n \\geq 0, \\\\\n(-1)^k \\binom{-n+k-1}{k} &amp; \\text{if} \\quad n &lt; 0.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(k) = O(k)$</p>\n<p>$M(k) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $k$ is <code>k.abs()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the result is not representable by this type, or if $k$ is negative.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::binomial_coefficient#binomial_coefficient\">here</a>.</p>\n</div></details></div></details>","BinomialCoefficient","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAccess-for-u16\" class=\"impl\"><a href=\"#impl-BitAccess-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BitAccess for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_bit\" class=\"method trait-impl\"><a href=\"#method.get_bit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_bit</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether the $i$th bit of an unsigned primitive integer, or the\ncoefficient of $2^i$ in its binary expansion, is 0 or 1.</p>\n<p><code>false</code> means 0 and <code>true</code> means 1. Getting bits beyond the type’s width is allowed;\nthose bits are false.</p>\n<p>Let\n$$\nn = \\sum_{i=0}^\\infty 2^{b_i},\n$$\nwhere for all $i$, $b_i\\in \\{0, 1\\}$; so finitely many of the bits are 1, and the\nrest are 0. Then $f(n, j) = (b_j = 1)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::bit_access#get_bit\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_bit\" class=\"method trait-impl\"><a href=\"#method.set_bit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">set_bit</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Sets the $i$th bit of an unsigned primitive integer, or the coefficient of $2^i$ in\nits binary expansion, to 1.</p>\n<p>Setting bits beyond the type’s width is disallowed.</p>\n<p>Let\n$$\nn = \\sum_{i=0}^{W-1} 2^{b_i},\n$$\nwhere for all $i$, $b_i\\in \\{0, 1\\}$, and $W$ is the width of the type. Then\n$$\nn \\gets \\begin{cases}\nn + 2^j &amp; \\text{if} \\quad b_j = 0, \\\\\nn &amp; \\text{otherwise},\n\\end{cases}\n$$\nwhere $j &lt; W$.</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if $i \\geq W$, where $i$ is <code>index</code> and $W$ is <code>$t::WIDTH</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::bit_access#set_bit\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear_bit\" class=\"method trait-impl\"><a href=\"#method.clear_bit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clear_bit</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Sets the $i$th bit of an unsigned primitive integer, or the coefficient of $2^i$ in\nits binary expansion, to 0.</p>\n<p>Clearing bits beyond the type’s width is allowed; since those bits are already\n<code>false</code>, clearing them does nothing.</p>\n<p>Let\n$$\nn = \\sum_{i=0}^{W-1} 2^{b_i},\n$$\nwhere for all $i$, $b_i\\in \\{0, 1\\}$, and $W$ is the width of the type. Then\n$$\nn \\gets \\begin{cases}\nn - 2^j &amp; \\text{if} \\quad b_j = 1, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::bit_access#clear_bit\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.assign_bit\" class=\"method trait-impl\"><a href=\"#method.assign_bit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">assign_bit</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, bit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Sets the bit at <code>index</code> to whichever value <code>bit</code> is. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flip_bit\" class=\"method trait-impl\"><a href=\"#method.flip_bit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">flip_bit</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Sets the bit at <code>index</code> to the opposite of its original value. <a>Read more</a></div></details></div></details>","BitAccess","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-BitAnd%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_repr/struct.OwnedRepr.html\" title=\"struct ndarray::data_repr::OwnedRepr\">OwnedRepr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(\n    self,\n    rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;,\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::bit::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<&'a ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#178\">Source</a></span><a href=\"#impl-BitAnd%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#178\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::bit::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#178\">Source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::bit::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-BitAnd%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataOwned.html\" title=\"trait ndarray::data_traits::DataOwned\">DataOwned</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; + <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataMut.html\" title=\"trait ndarray::data_traits::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-BitAnd%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = U16&lt;O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: U16&lt;O&gt;) -&gt; U16&lt;O&gt;</h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#178\">Source</a></span><a href=\"#impl-BitAnd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#178\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#178\">Source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#726\">Source</a></span><a href=\"#impl-BitAndAssign%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#726\">Source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-BitAndAssign%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: U16&lt;O&gt;)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#726\">Source</a></span><a href=\"#impl-BitAndAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#726\">Source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitBlock-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/bit-vec/0.8.0/src/bit_vec/lib.rs.html#190-196\">Source</a><a href=\"#impl-BitBlock-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/bit-vec/0.8.0/bit_vec/trait.BitBlock.html\" title=\"trait bit_vec::BitBlock\">BitBlock</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/bit-vec/0.8.0/src/bit_vec/lib.rs.html#190-196\">Source</a><a href=\"#method.bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/bit-vec/0.8.0/bit_vec/trait.BitBlock.html#tymethod.bits\" class=\"fn\">bits</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>How many bits it has</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_byte\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/bit-vec/0.8.0/src/bit_vec/lib.rs.html#190-196\">Source</a><a href=\"#method.from_byte\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/bit-vec/0.8.0/bit_vec/trait.BitBlock.html#tymethod.from_byte\" class=\"fn\">from_byte</a>(byte: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Convert a byte into this type (lowest-order bits set)</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/bit-vec/0.8.0/src/bit_vec/lib.rs.html#190-196\">Source</a><a href=\"#method.count_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/bit-vec/0.8.0/bit_vec/trait.BitBlock.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Count the number of 1’s in the bitwise repr</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/bit-vec/0.8.0/src/bit_vec/lib.rs.html#190-196\">Source</a><a href=\"#method.count_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/bit-vec/0.8.0/bit_vec/trait.BitBlock.html#method.count_zeros\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Count the number of 0’s in the bitwise repr</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/bit-vec/0.8.0/src/bit_vec/lib.rs.html#190-196\">Source</a><a href=\"#method.one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/bit-vec/0.8.0/bit_vec/trait.BitBlock.html#tymethod.one\" class=\"fn\">one</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Get <code>1</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/bit-vec/0.8.0/src/bit_vec/lib.rs.html#190-196\">Source</a><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/bit-vec/0.8.0/bit_vec/trait.BitBlock.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Get <code>0</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/bit-vec/0.8.0/src/bit_vec/lib.rs.html#154\">Source</a><a href=\"#method.bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/bit-vec/0.8.0/bit_vec/trait.BitBlock.html#method.bytes\" class=\"fn\">bytes</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>How many bytes it has</div></details></div></details>","BitBlock","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitBlockAccess-for-u16\" class=\"impl\"><a href=\"#impl-BitBlockAccess-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BitBlockAccess for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_bits\" class=\"method trait-impl\"><a href=\"#method.get_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_bits</a>(&amp;self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Extracts a block of adjacent bits from a number.</p>\n<p>The first index is <code>start</code> and last index is <code>end - 1</code>.</p>\n<p>The block of bits has the same type as the input. If <code>end</code> is greater than the\ntype’s width, the high bits of the result are all 0.</p>\n<p>Let\n$$\nn = \\sum_{i=0}^\\infty 2^{b_i},\n$$\nwhere for all $i$, $b_i\\in \\{0, 1\\}$; so finitely many of the bits are 1, and the\nrest are 0. Then\n$$\nf(n, p, q) = \\sum_{i=p}^{q-1} 2^{b_{i-p}}.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>start &lt; end</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::bit_block_access#get_bits\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.assign_bits\" class=\"method trait-impl\"><a href=\"#method.assign_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">assign_bits</a>(\n    &amp;mut self,\n    start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n    end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n    bits: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as BitBlockAccess&gt;::Bits,\n)</h4></section></summary><div class=\"docblock\"><p>Replaces a block of adjacent bits in a number with other bits.</p>\n<p>The least-significant <code>end - start</code> bits of <code>bits</code> are assigned to bits <code>start</code>\nthrough <code>end - 1</code>, inclusive, of <code>self</code>.</p>\n<p>The block of bits has the same type as the input. If <code>bits</code> has fewer bits than `end</p>\n<ul>\n<li>start<code>, the high bits are interpreted as 0. If </code>end<code>is greater than the type's width, the high bits of</code>bits` must be 0.</li>\n</ul>\n<p>Let\n$$\nn = \\sum_{i=0}^{W-1} 2^{b_i},\n$$\nwhere for all $i$, $b_i\\in \\{0, 1\\}$ and $W$ is <code>$t::WIDTH</code>. Let\n$$\nm = \\sum_{i=0}^k 2^{d_i},\n$$\nwhere for all $i$, $d_i\\in \\{0, 1\\}$. Also, let $p, q \\in \\mathbb{N}$, where $d_i\n= 0$ for all $i \\geq W + p$.</p>\n<p>Then\n$$\nn \\gets \\sum_{i=0}^{W-1} 2^{c_i},\n$$\nwhere\n$$\n\\{c_0, c_1, c_2, \\ldots, c_ {W-1}\\} =\n\\{b_0, b_1, b_2, \\ldots, b_{p-1}, d_0, d_1, \\ldots, d_{p-q-1}, b_q, \\ldots,\nb_ {W-1}\\}.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Let <code>W</code> be the type’s width. Panics if <code>start &lt; end</code>, or if <code>end &gt; W</code> and bits <code>W - start</code> through <code>end - start</code> of <code>bits</code> are nonzero.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::bit_block_access#assign_bits\">here</a>.</p>\n</div></details><section id=\"associatedtype.Bits\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bits\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Bits</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_bits_owned\" class=\"method trait-impl\"><a href=\"#method.get_bits_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_bits_owned</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; Self::Bits</h4></section></summary><div class='docblock'>Extracts a block of bits whose first index is <code>start</code> and last index is <code>end - 1</code>, taking\nownership of <code>self</code>. <a>Read more</a></div></details></div></details>","BitBlockAccess","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitConvertible-for-u16\" class=\"impl\"><a href=\"#impl-BitConvertible-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BitConvertible for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_bits_asc\" class=\"method trait-impl\"><a href=\"#method.to_bits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_bits_asc</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the bits of a number in ascending order: least- to\nmost-significant.</p>\n<p>If the number is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty; otherwise, it ends with <code>true</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>self.significant_bits()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::bit_convertible#to_bits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_bits_desc\" class=\"method trait-impl\"><a href=\"#method.to_bits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_bits_desc</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the bits of a number in descending order: most- to\nleast-significant.</p>\n<p>If the number is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty; otherwise, it begins with <code>true</code>.</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>self.significant_bits()</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::bit_convertible#to_bits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bits_asc\" class=\"method trait-impl\"><a href=\"#method.from_bits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_bits_asc</a>&lt;I&gt;(bits: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of bits into a number. The bits should be in ascending order\n(least- to most-significant).</p>\n<p>The function panics if the input represents a number that can’t fit in the output\ntype.</p>\n<p>$$\nf((b_i)_ {i=0}^{k-1}) = \\sum_{i=0}^{k-1}2^i [b_i],\n$$\nwhere braces denote the Iverson bracket, which converts a bit to 0 or 1.</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>bits.count()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the bits represent a value that isn’t representable by the output type.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::bit_convertible#from_bits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bits_desc\" class=\"method trait-impl\"><a href=\"#method.from_bits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_bits_desc</a>&lt;I&gt;(bits: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of bits into a number. The bits should be in descending order\n(most- to least-significant).</p>\n<p>The function panics if the input represents a number that can’t fit in the output\ntype.</p>\n<p>$$\nf((b_i)_ {i=0}^{k-1}) = \\sum_{i=0}^{k-1}2^{k-i-1} [b_i],\n$$\nwhere braces denote the Iverson bracket, which converts a bit to 0 or 1.</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>bits.count()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the bits represent a value that isn’t representable by the output type.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::bit_convertible#from_bits_desc\">here</a>.</p>\n</div></details></div></details>","BitConvertible","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitIterable-for-u16\" class=\"impl\"><a href=\"#impl-BitIterable-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BitIterable for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bits\" class=\"method trait-impl\"><a href=\"#method.bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">bits</a>(self) -&gt; PrimitiveUnsignedBitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a double-ended iterator over the bits of an unsigned primitive integer.</p>\n<p>The forward order is ascending, so that less significant bits appear first. There\nare no trailing false bits going forward, or leading falses going backward.</p>\n<p>If it’s necessary to get a [<code>Vec</code>] of all the bits, consider using\n<a href=\"super::traits::BitConvertible::to_bits_asc\"><code>to_bits_asc</code></a> or\n<a href=\"super::traits::BitConvertible::to_bits_desc\"><code>to_bits_desc</code></a> instead.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::bit_iterable#bits\">here</a>.</p>\n</div></details><section id=\"associatedtype.BitIterator\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.BitIterator\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">BitIterator</a> = PrimitiveUnsignedBitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></div></details>","BitIterable","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-BitOr%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_repr/struct.OwnedRepr.html\" title=\"struct ndarray::data_repr::OwnedRepr\">OwnedRepr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(\n    self,\n    rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;,\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::bit::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<&'a ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#278\">Source</a></span><a href=\"#impl-BitOr%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#278\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::bit::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#278\">Source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::bit::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-BitOr%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataOwned.html\" title=\"trait ndarray::data_traits::DataOwned\">DataOwned</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; + <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataMut.html\" title=\"trait ndarray::data_traits::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-BitOr%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = U16&lt;O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: U16&lt;O&gt;) -&gt; U16&lt;O&gt;</h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#278\">Source</a></span><a href=\"#impl-BitOr-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#278\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#278\">Source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#797\">Source</a></span><a href=\"#impl-BitOrAssign%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#797\">Source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-BitOrAssign%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: U16&lt;O&gt;)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#797\">Source</a></span><a href=\"#impl-BitOrAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#797\">Source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitRegister-for-u16\" class=\"impl\"><a href=\"#impl-BitRegister-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BitRegister for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.ALL\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.ALL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">ALL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 65_535u16</h4></section></summary><div class='docblock'>The literal <code>!0</code>.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.INDX\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.INDX\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">INDX</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a> = _</h4></section></summary><div class='docblock'>The number of bits required to store an index in the range <code>0 .. BITS</code>.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MASK\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MASK\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MASK</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a> = _</h4></section></summary><div class='docblock'>A mask over all bits that can be used as an index within the element.\nThis is the value with the least significant <code>INDX</code>-many bits set high.</div></details></div></details>","BitRegister","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitScan-for-u16\" class=\"impl\"><a href=\"#impl-BitScan-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BitScan for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_of_next_false_bit\" class=\"method trait-impl\"><a href=\"#method.index_of_next_false_bit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">index_of_next_false_bit</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Given a number and a starting index, searches the number for the smallest index of a\n<code>false</code> bit that is greater than or equal to the starting index.</p>\n<p>Since the number is unsigned and therefore has an implicit prefix of infinitely-many\nzeros, this function always returns a value.</p>\n<p>Starting beyond the type’s width is allowed; the result is the starting index.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::bit_scan#index_of_next_false_bit\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_of_next_true_bit\" class=\"method trait-impl\"><a href=\"#method.index_of_next_true_bit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">index_of_next_true_bit</a>(self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Given a number and a starting index, searches the number for the smallest index of a\n<code>true</code> bit that is greater than or equal to the starting index.</p>\n<p>If the starting index is greater than or equal to the type’s width, the result is\n<code>None</code> since there are no <code>true</code> bits past that point.</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::bit_scan#index_of_next_true_bit\">here</a>.</p>\n</div></details></div></details>","BitScan","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitStore-for-u16\" class=\"impl\"><a href=\"#impl-BitStore-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BitStore for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Access\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Access\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Access</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/cell/struct.Cell.html\" title=\"struct core::cell::Cell\">Cell</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>The unsigned integers will only be <code>BitStore</code> type parameters\nfor handles to unaliased memory, following the normal Rust\nreference rules.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ZERO\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.ZERO\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">ZERO</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 0u16</h4></section></summary><div class='docblock'>The zero constant.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ALIGNED_TO_SIZE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.ALIGNED_TO_SIZE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">ALIGNED_TO_SIZE</a>: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">1</a>]</h4></section></summary><div class='docblock'>All implementors are required to have their alignment match their size. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ALIAS_WIDTH\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.ALIAS_WIDTH\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">ALIAS_WIDTH</a>: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">1</a>]</h4></section></summary><div class='docblock'>All implementors are required to have <code>Self</code> and <code>Self::Alias</code> be equal\nin representation. This is true by fiat for all types except the\nunsigned integers. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Mem\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mem\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Mem</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The element type used in the memory region underlying a <code>BitSlice</code>. It\nis <em>always</em> one of the unsigned integer fundamentals.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Alias\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Alias\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Alias</a> = BitSafeU16</h4></section></summary><div class='docblock'>A sibling <code>BitStore</code> implementor that is known to be alias-safe. It is\nused when a <code>BitSlice</code> introduces multiple handles that view the same\nmemory location, and at least one of them has write capabilities to it.\nIt must have the same underlying memory type, and can only change access\npatterns or public-facing usage.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Unalias\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Unalias\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Unalias</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The inverse of <code>::Alias</code>. It is used when a <code>BitSlice</code> removes the\nconditions that required a <code>T -&gt; T::Alias</code> transition.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method trait-impl\"><a href=\"#method.new\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">new</a>(value: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as BitStore&gt;::Mem) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wraps a raw memory value as a <code>BitStore</code> type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_value\" class=\"method trait-impl\"><a href=\"#method.load_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_value</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as BitStore&gt;::Mem</h4></section></summary><div class='docblock'>Loads a value out of the memory system according to the <code>::Access</code>\nrules. This may be called when the value is aliased by a write-capable\nreference.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store_value\" class=\"method trait-impl\"><a href=\"#method.store_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store_value</a>(&amp;mut self, value: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as BitStore&gt;::Mem)</h4></section></summary><div class='docblock'>Stores a value into the memory system. This is only called when there\nare no other handles to the value, and it may bypass <code>::Access</code>\nconstraints.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_bit\" class=\"method trait-impl\"><a href=\"#method.get_bit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_bit</a>&lt;O&gt;(&amp;self, index: BitIdx&lt;Self::Mem&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    O: BitOrder,</div></h4></section></summary><div class='docblock'>Reads a single bit out of the memory system according to the <code>::Access</code>\nrules. This is lifted from <a href=\"crate::access::BitAccess\"><code>BitAccess</code></a> so that it can be used\nelsewhere without additional casts. <a>Read more</a></div></details></div></details>","BitStore","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-BitXor%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_repr/struct.OwnedRepr.html\" title=\"struct ndarray::data_repr::OwnedRepr\">OwnedRepr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(\n    self,\n    rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;,\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::bit::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<&'a ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#378\">Source</a></span><a href=\"#impl-BitXor%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#378\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::bit::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#378\">Source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::bit::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-BitXor%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataOwned.html\" title=\"trait ndarray::data_traits::DataOwned\">DataOwned</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; + <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataMut.html\" title=\"trait ndarray::data_traits::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-BitXor%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = U16&lt;O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: U16&lt;O&gt;) -&gt; U16&lt;O&gt;</h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#378\">Source</a></span><a href=\"#impl-BitXor-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#378\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#378\">Source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#868\">Source</a></span><a href=\"#impl-BitXorAssign%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#868\">Source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-BitXorAssign%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: U16&lt;O&gt;)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#868\">Source</a></span><a href=\"#impl-BitXorAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#868\">Source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Bits-for-u16\" class=\"impl\"><a href=\"#impl-Bits-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Bits for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.EMPTY\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.EMPTY\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">EMPTY</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 0u16</h4></section></summary><div class='docblock'>A value with all bits unset.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ALL\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.ALL\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">ALL</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 65_535u16</h4></section></summary><div class='docblock'>A value with all bits set.</div></details></div></details>","Bits","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorshDeserialize-for-u16\" class=\"impl\"><a href=\"#impl-BorshDeserialize-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BorshDeserialize for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.deserialize_reader\" class=\"method trait-impl\"><a href=\"#method.deserialize_reader\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize_reader</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut R</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize</a>(buf: &amp;mut &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Deserializes this instance from a given slice of bytes.\nUpdates the buffer to point at the remaining bytes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_slice\" class=\"method trait-impl\"><a href=\"#method.try_from_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_from_slice</a>(v: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Deserialize this instance from a slice of bytes.</div></details><section id=\"method.try_from_reader\" class=\"method trait-impl\"><a href=\"#method.try_from_reader\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_from_reader</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut R</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></div></details>","BorshDeserialize","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorshSerialize-for-u16\" class=\"impl\"><a href=\"#impl-BorshSerialize-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BorshSerialize for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize</a>&lt;W&gt;(&amp;self, writer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></div></details>","BorshSerialize","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Bounded-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/bounds.rs.html#59\">Source</a><a href=\"#impl-Bounded-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/bounds/trait.Bounded.html\" title=\"trait num_traits::bounds::Bounded\">Bounded</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/bounds.rs.html#59\">Source</a><a href=\"#method.min_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/bounds/trait.Bounded.html#tymethod.min_value\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns the smallest finite number this type can represent</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/bounds.rs.html#59\">Source</a><a href=\"#method.max_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/bounds/trait.Bounded.html#tymethod.max_value\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns the largest finite number this type can represent</div></details></div></details>","Bounded","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CanonicalDeserialize-for-u16\" class=\"impl\"><a href=\"#impl-CanonicalDeserialize-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CanonicalDeserialize for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_with_mode\" class=\"method trait-impl\"><a href=\"#method.deserialize_with_mode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize_with_mode</a>&lt;R&gt;(\n    reader: R,\n    _compress: Compress,\n    _validate: Validate,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, SerializationError&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>The general deserialize method that takes in customization flags.</div></details><section id=\"method.deserialize_compressed\" class=\"method trait-impl\"><a href=\"#method.deserialize_compressed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize_compressed</a>&lt;R&gt;(reader: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, SerializationError&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section><section id=\"method.deserialize_compressed_unchecked\" class=\"method trait-impl\"><a href=\"#method.deserialize_compressed_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize_compressed_unchecked</a>&lt;R&gt;(\n    reader: R,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, SerializationError&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section><section id=\"method.deserialize_uncompressed\" class=\"method trait-impl\"><a href=\"#method.deserialize_uncompressed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize_uncompressed</a>&lt;R&gt;(reader: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, SerializationError&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section><section id=\"method.deserialize_uncompressed_unchecked\" class=\"method trait-impl\"><a href=\"#method.deserialize_uncompressed_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize_uncompressed_unchecked</a>&lt;R&gt;(\n    reader: R,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, SerializationError&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></div></details>","CanonicalDeserialize","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CanonicalSerialize-for-u16\" class=\"impl\"><a href=\"#impl-CanonicalSerialize-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CanonicalSerialize for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_with_mode\" class=\"method trait-impl\"><a href=\"#method.serialize_with_mode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize_with_mode</a>&lt;W&gt;(\n    &amp;self,\n    writer: W,\n    _compress: Compress,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, SerializationError&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>The general serialize method that takes in customization flags.</div></details><section id=\"method.serialized_size\" class=\"method trait-impl\"><a href=\"#method.serialized_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialized_size</a>(&amp;self, _compress: Compress) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.serialize_compressed\" class=\"method trait-impl\"><a href=\"#method.serialize_compressed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize_compressed</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, SerializationError&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section><section id=\"method.compressed_size\" class=\"method trait-impl\"><a href=\"#method.compressed_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">compressed_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.serialize_uncompressed\" class=\"method trait-impl\"><a href=\"#method.serialize_uncompressed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize_uncompressed</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, SerializationError&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section><section id=\"method.uncompressed_size\" class=\"method trait-impl\"><a href=\"#method.uncompressed_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">uncompressed_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></div></details>","CanonicalSerialize","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CarryingMulAdd-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/intrinsics/fallback.rs.html#34-45\">Source</a><a href=\"#impl-CarryingMulAdd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/intrinsics/fallback/trait.CarryingMulAdd.html\" title=\"trait core::intrinsics::fallback::CarryingMulAdd\">CarryingMulAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Unsigned\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/intrinsics/fallback.rs.html#34-45\">Source</a><a href=\"#associatedtype.Unsigned\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/intrinsics/fallback/trait.CarryingMulAdd.html#associatedtype.Unsigned\" class=\"associatedtype\">Unsigned</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>core_intrinsics_fallbacks</code>)</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_mul_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/intrinsics/fallback.rs.html#34-45\">Source</a><a href=\"#method.carrying_mul_add\" class=\"anchor\">§</a><h4 class=\"code-header\">const fn <a href=\"https://doc.rust-lang.org/1.85.1/core/intrinsics/fallback/trait.CarryingMulAdd.html#tymethod.carrying_mul_add\" class=\"fn\">carrying_mul_add</a>(self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>core_intrinsics_fallbacks</code>)</span></div></span></details></div></details>","CarryingMulAdd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CeilingDivAssignNegMod-for-u16\" class=\"impl\"><a href=\"#impl-CeilingDivAssignNegMod-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CeilingDivAssignNegMod for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceiling_div_assign_neg_mod\" class=\"method trait-impl\"><a href=\"#method.ceiling_div_assign_neg_mod\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ceiling_div_assign_neg_mod</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Divides a number by another number in place, returning the remainder of the negative\nof the first number divided by the second.</p>\n<p>The quotient and remainder satisfy $x = qy - r$ and $0 \\leq r &lt; y$.</p>\n<p>$$\nf(x, y) = y\\left \\lceil \\frac{x}{y} \\right \\rceil - x,\n$$\n$$\nx \\gets \\left \\lceil \\frac{x}{y} \\right \\rceil.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::div_mod#ceiling_div_assign_neg_mod\">here</a>.</p>\n</div></details><section id=\"associatedtype.ModOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ModOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ModOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CeilingDivAssignNegMod","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CeilingDivNegMod-for-u16\" class=\"impl\"><a href=\"#impl-CeilingDivNegMod-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CeilingDivNegMod for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceiling_div_neg_mod\" class=\"method trait-impl\"><a href=\"#method.ceiling_div_neg_mod\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ceiling_div_neg_mod</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Divides a number by another number, returning the ceiling of the quotient and the\nremainder of the negative of the first number divided by the second.</p>\n<p>The quotient and remainder satisfy $x = qy - r$ and $0 \\leq r &lt; y$.</p>\n<p>$$\nf(x, y) = \\left ( \\left \\lceil \\frac{x}{y} \\right \\rceil, \\space\ny\\left \\lceil \\frac{x}{y} \\right \\rceil - x \\right ).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::div_mod#ceiling_div_neg_mod\">here</a>.</p>\n</div></details><section id=\"associatedtype.DivOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.DivOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">DivOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><section id=\"associatedtype.ModOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ModOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ModOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CeilingDivNegMod","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CeilingLogBase-for-u16\" class=\"impl\"><a href=\"#impl-CeilingLogBase-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CeilingLogBase for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceiling_log_base\" class=\"method trait-impl\"><a href=\"#method.ceiling_log_base\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ceiling_log_base</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the ceiling of the base-$b$ logarithm of a positive integer.</p>\n<p>$f(x, b) = \\lceil\\log_b x\\rceil$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>self.significant_bits() / base.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is 0 or <code>base</code> is less than 2.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::log_base#ceiling_log_base\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></div></details>","CeilingLogBase","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CeilingLogBase2-for-u16\" class=\"impl\"><a href=\"#impl-CeilingLogBase2-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CeilingLogBase2 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceiling_log_base_2\" class=\"method trait-impl\"><a href=\"#method.ceiling_log_base_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ceiling_log_base_2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the ceiling of the base-2 logarithm of a positive integer.</p>\n<p>$f(x) = \\lceil\\log_2 x\\rceil$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::log_base_2#ceiling_log_base_2\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></div></details>","CeilingLogBase2","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CeilingLogBasePowerOf2%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-CeilingLogBasePowerOf2%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CeilingLogBasePowerOf2&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceiling_log_base_power_of_2\" class=\"method trait-impl\"><a href=\"#method.ceiling_log_base_power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ceiling_log_base_power_of_2</a>(self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the ceiling of the base-$2^k$ logarithm of a positive integer.</p>\n<p>$f(x, k) = \\lceil\\log_{2^k} x\\rceil$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is infinite, <code>NaN</code>, or less than or equal to zero, or if <code>pow</code> is\nzero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::log_base_power_of_2#ceiling_log_base_power_of_2\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></div></details>","CeilingLogBasePowerOf2<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CeilingRoot%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-CeilingRoot%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CeilingRoot&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceiling_root\" class=\"method trait-impl\"><a href=\"#method.ceiling_root\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ceiling_root</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Returns the ceiling of the $n$th root of a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a>.</p>\n<p>$f(x, n) = \\lceil\\sqrt[n]{x}\\rceil$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>exp</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::root#ceiling_root\">here</a>.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>The <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> implementation calls the implementation for <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>s.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CeilingRoot<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CeilingRootAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-CeilingRootAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CeilingRootAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceiling_root_assign\" class=\"method trait-impl\"><a href=\"#method.ceiling_root_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ceiling_root_assign</a>(&amp;mut self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Replaces an integer with the ceiling of its $n$th root.</p>\n<p>$x \\gets \\lceil\\sqrt[n]{x}\\rceil$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>exp</code> is zero, or if <code>self</code> is negative and <code>exp</code> is even.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::root#ceiling_root_assign\">here</a>.</p>\n</div></details></div></details>","CeilingRootAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CeilingSqrt-for-u16\" class=\"impl\"><a href=\"#impl-CeilingSqrt-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CeilingSqrt for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceiling_sqrt\" class=\"method trait-impl\"><a href=\"#method.ceiling_sqrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ceiling_sqrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Returns the ceiling of the square root of a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a>.</p>\n<p>$f(x) = \\lceil\\sqrt{x}\\rceil$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::sqrt#ceiling_sqrt\">here</a>.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>The <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> implementation calls the implementation for <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>s.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CeilingSqrt","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CeilingSqrtAssign-for-u16\" class=\"impl\"><a href=\"#impl-CeilingSqrtAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CeilingSqrtAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ceiling_sqrt_assign\" class=\"method trait-impl\"><a href=\"#method.ceiling_sqrt_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ceiling_sqrt_assign</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Replaces an integer with the ceiling of its square root.</p>\n<p>$x \\gets \\lceil\\sqrt{x}\\rceil$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is negative.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::sqrt#ceiling_sqrt_assign\">here</a>.</p>\n</div></details></div></details>","CeilingSqrtAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedAdd-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#23\">Source</a><a href=\"#impl-CheckedAdd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedAdd.html\" title=\"trait num_traits::ops::checked::CheckedAdd\">CheckedAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#23\">Source</a><a href=\"#method.checked_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedAdd.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Adds two numbers, checking for overflow. If overflow happens, <code>None</code> is\nreturned.</div></details></div></details>","CheckedAdd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedAdd-for-u16\" class=\"impl\"><a href=\"#impl-CheckedAdd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedAdd for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method trait-impl\"><a href=\"#method.checked_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_add</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>checked_add</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.checked_add\" title=\"method u32::checked_add\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedAdd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedAddMul-for-u16\" class=\"impl\"><a href=\"#impl-CheckedAddMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedAddMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_mul\" class=\"method trait-impl\"><a href=\"#method.checked_add_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_add_mul</a>(self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Adds a number and the product of two other numbers, returning <code>None</code> if the result\ncannot be represented.</p>\n<p>$$\nf(x, y, z) = \\begin{cases}\n\\operatorname{Some}(x + yz) &amp; \\text{if} \\quad x + yz &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad x + yz \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::checked_add_mul#checked_add_mul\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedAddMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedBinomialCoefficient-for-u16\" class=\"impl\"><a href=\"#impl-CheckedBinomialCoefficient-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedBinomialCoefficient for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_binomial_coefficient\" class=\"method trait-impl\"><a href=\"#method.checked_binomial_coefficient\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_binomial_coefficient</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the binomial coefficient of two numbers. If the inputs are too large, the\nfunction returns <code>None</code>.</p>\n<p>$$\nf(n, k) = \\begin{cases}\n\\operatorname{Some}(\\binom{n}{k}) &amp; \\text{if} \\quad \\binom{n}{k} &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad \\binom{n}{k} \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(k) = O(k)$</p>\n<p>$M(k) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $k$ is <code>k</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::binomial_coefficient#checked_binomial_coefficient\">here</a>.</p>\n</div></details></div></details>","CheckedBinomialCoefficient","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedDiv-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#88\">Source</a><a href=\"#impl-CheckedDiv-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedDiv.html\" title=\"trait num_traits::ops::checked::CheckedDiv\">CheckedDiv</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#88\">Source</a><a href=\"#method.checked_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedDiv.html#tymethod.checked_div\" class=\"fn\">checked_div</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, <code>None</code> is returned.</div></details></div></details>","CheckedDiv","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedDiv-for-u16\" class=\"impl\"><a href=\"#impl-CheckedDiv-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedDiv for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div\" class=\"method trait-impl\"><a href=\"#method.checked_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_div</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>checked_div</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.checked_div\" title=\"method u32::checked_div\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedDiv","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedDoubleFactorial-for-u16\" class=\"impl\"><a href=\"#impl-CheckedDoubleFactorial-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedDoubleFactorial for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_double_factorial\" class=\"method trait-impl\"><a href=\"#method.checked_double_factorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_double_factorial</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the double factorial of a number.</p>\n<p>If the input is too large, the function returns <code>None</code>.</p>\n<p>$$\nf(n) = \\begin{cases}\n\\operatorname{Some}(n!!) &amp; \\text{if} \\quad n!! &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad n!! \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<p>$n!! = O(\\sqrt{n}(n/e)^{n/2})$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::factorial#checked_double_factorial\">here</a>.</p>\n</div></details></div></details>","CheckedDoubleFactorial","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedEuclid-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#185\">Source</a><a href=\"#impl-CheckedEuclid-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.CheckedEuclid.html\" title=\"trait num_traits::ops::euclid::CheckedEuclid\">CheckedEuclid</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#185\">Source</a><a href=\"#method.checked_div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.CheckedEuclid.html#tymethod.checked_div_euclid\" class=\"fn\">checked_div_euclid</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Performs euclid division that returns <code>None</code> instead of panicking on division by zero\nand instead of wrapping around on underflow and overflow.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#185\">Source</a><a href=\"#method.checked_rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.CheckedEuclid.html#tymethod.checked_rem_euclid\" class=\"fn\">checked_rem_euclid</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Finds the euclid remainder of dividing two numbers, checking for underflow, overflow and\ndivision by zero. If any of that happens, <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_rem_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#163\">Source</a><a href=\"#method.checked_div_rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.CheckedEuclid.html#method.checked_div_rem_euclid\" class=\"fn\">checked_div_rem_euclid</a>(&amp;self, v: &amp;Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(Self, Self)&gt;</h4></section></summary><div class='docblock'>Returns both the quotient and remainder from checked Euclidean division. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.CheckedEuclid.html#method.checked_div_rem_euclid\">Read more</a></div></details></div></details>","CheckedEuclid","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedFactorial-for-u16\" class=\"impl\"><a href=\"#impl-CheckedFactorial-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedFactorial for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_factorial\" class=\"method trait-impl\"><a href=\"#method.checked_factorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_factorial</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the factorial of a number.</p>\n<p>If the input is too large, the function returns <code>None</code>.</p>\n<p>$$\nf(n) = \\begin{cases}\n\\operatorname{Some}(n!) &amp; \\text{if} \\quad n! &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad n! \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<p>$n! = O(\\sqrt{n}(n/e)^n)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::factorial#checked_factorial\">here</a>.</p>\n</div></details></div></details>","CheckedFactorial","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedLcm-for-u16\" class=\"impl\"><a href=\"#impl-CheckedLcm-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedLcm for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_lcm\" class=\"method trait-impl\"><a href=\"#method.checked_lcm\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_lcm</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the LCM (least common multiple) of two numbers, returning <code>None</code> if the\nresult is too large to represent.</p>\n<p>$$\nf(x, y) = \\begin{cases}\n\\operatorname{Some}(\\operatorname{lcm}(x, y)) &amp;\n\\text{if} \\quad \\operatorname{lcm}(x, y) &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad \\operatorname{lcm}(x, y) \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n^2)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>max(self.significant_bits(), other.significant_bits())</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::lcm#checked_lcm\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedLcm","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedLogBase-for-u16\" class=\"impl\"><a href=\"#impl-CheckedLogBase-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedLogBase for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_log_base\" class=\"method trait-impl\"><a href=\"#method.checked_log_base\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_log_base</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base-$b$ logarithm of a positive integer. If the integer is not a power\nof $b$, <code>None</code> is returned.</p>\n<p>$$\nf(x, b) = \\begin{cases}\n\\operatorname{Some}(\\log_b x) &amp; \\text{if} \\quad \\log_b x \\in \\Z, \\\\\n\\operatorname{None} &amp; \\textrm{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>self.significant_bits() / base.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is 0 or <code>base</code> is less than 2.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::log_base#checked_log_base\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></div></details>","CheckedLogBase","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedLogBase2-for-u16\" class=\"impl\"><a href=\"#impl-CheckedLogBase2-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedLogBase2 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_log_base_2\" class=\"method trait-impl\"><a href=\"#method.checked_log_base_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_log_base_2</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base-2 logarithm of a positive integer. If the integer is not a power of\n2, <code>None</code> is returned.</p>\n<p>$$\nf(x) = \\begin{cases}\n\\operatorname{Some}(\\log_2 x) &amp; \\text{if} \\quad \\log_2 x \\in \\Z, \\\\\n\\operatorname{None} &amp; \\textrm{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::log_base_2#checked_log_base_2\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></div></details>","CheckedLogBase2","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedLogBasePowerOf2%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-CheckedLogBasePowerOf2%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedLogBasePowerOf2&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_log_base_power_of_2\" class=\"method trait-impl\"><a href=\"#method.checked_log_base_power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_log_base_power_of_2</a>(self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base-$2^k$ logarithm of a positive integer. If the integer is not a\npower of $2^k$, <code>None</code> is returned.</p>\n<p>$$\nf(x, k) = \\begin{cases}\n\\operatorname{Some}(\\log_{2^k} x) &amp; \\text{if} \\quad \\log_{2^k} x \\in \\Z, \\\\\n\\operatorname{None} &amp; \\textrm{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is infinite, <code>NaN</code>, or less than or equal to zero, or if <code>pow</code> is\nzero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::log_base_power_of_2#ceiling_log_base_power_of_2\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></div></details>","CheckedLogBasePowerOf2<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedMul-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#66\">Source</a><a href=\"#impl-CheckedMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedMul.html\" title=\"trait num_traits::ops::checked::CheckedMul\">CheckedMul</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#66\">Source</a><a href=\"#method.checked_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedMul.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, <code>None</code> is returned.</div></details></div></details>","CheckedMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedMul-for-u16\" class=\"impl\"><a href=\"#impl-CheckedMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method trait-impl\"><a href=\"#method.checked_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_mul</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>checked_mul</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.checked_mul\" title=\"method u32::checked_mul\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedMultifactorial-for-u16\" class=\"impl\"><a href=\"#impl-CheckedMultifactorial-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedMultifactorial for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_multifactorial\" class=\"method trait-impl\"><a href=\"#method.checked_multifactorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_multifactorial</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes a multifactorial of a number.</p>\n<p>If the input is too large, the function returns <code>None</code>.</p>\n<p>$$\nf(n, m) = \\begin{cases}\n\\operatorname{Some}(n!^{(m)}) &amp; \\text{if} \\quad n!^{(m)} &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad n!^{(m)} \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<p>$n!^{(m)} = O(\\sqrt{n}(n/e)^{n/m})$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::factorial#checked_multifactorial\">here</a>.</p>\n</div></details></div></details>","CheckedMultifactorial","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedNeg-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#173\">Source</a><a href=\"#impl-CheckedNeg-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedNeg.html\" title=\"trait num_traits::ops::checked::CheckedNeg\">CheckedNeg</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#173\">Source</a><a href=\"#method.checked_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedNeg.html#tymethod.checked_neg\" class=\"fn\">checked_neg</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Negates a number, returning <code>None</code> for results that can’t be represented, like signed <code>MIN</code>\nvalues that can’t be positive, or non-zero unsigned values that can’t be negative. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedNeg.html#tymethod.checked_neg\">Read more</a></div></details></div></details>","CheckedNeg","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedNeg-for-u16\" class=\"impl\"><a href=\"#impl-CheckedNeg-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedNeg for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method trait-impl\"><a href=\"#method.checked_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>checked_neg</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.checked_neg\" title=\"method u32::checked_neg\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedNeg","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedNextPowerOf2-for-u16\" class=\"impl\"><a href=\"#impl-CheckedNextPowerOf2-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedNextPowerOf2 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_2\" class=\"method trait-impl\"><a href=\"#method.checked_next_power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_next_power_of_2</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>checked_next_power_of_two</code> functions in the standard\nlibrary, for example <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.checked_next_power_of_two\" title=\"method u32::checked_next_power_of_two\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedNextPowerOf2","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedPow%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-CheckedPow%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedPow&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method trait-impl\"><a href=\"#method.checked_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>checked_pow</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.checked_pow\" title=\"method u32::checked_pow\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedPow<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedPrimorial-for-u16\" class=\"impl\"><a href=\"#impl-CheckedPrimorial-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedPrimorial for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_primorial\" class=\"method trait-impl\"><a href=\"#method.checked_primorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_primorial</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the primorial of a number: the product of all primes less than or equal to\nit.</p>\n<p>The\n<a href=\"CheckedPrimorial::checked_product_of_first_n_primes\"><code>checked_product_of_first_n_primes</code></a>\nfunction is similar; it computes the primorial of the $n$th prime.</p>\n<p>If the input is too large, the function returns <code>None</code>.</p>\n<p>$$\nf(n) = \\begin{cases}\n\\operatorname{Some}(n\\#) &amp; \\text{if} \\quad n\\# &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad n\\# \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primorial#checked_primorial\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_product_of_first_n_primes\" class=\"method trait-impl\"><a href=\"#method.checked_product_of_first_n_primes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_product_of_first_n_primes</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the product of the first $n$ primes.</p>\n<p>The <a href=\"CheckedPrimorial::checked_primorial\"><code>checked_primorial</code></a> function is similar;\nit computes the product of all primes less than or equal to $n$.</p>\n<p>If the input is too large, the function returns <code>None</code>.</p>\n<p>$$\nf(n) = \\begin{cases}\n\\operatorname{Some}(p_n\\#) &amp; \\text{if} \\quad p_n\\# &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad p_n\\# \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::primorial#checked_product_of_first_n_primes\">here</a>.</p>\n</div></details></div></details>","CheckedPrimorial","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedRem-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#127\">Source</a><a href=\"#impl-CheckedRem-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedRem.html\" title=\"trait num_traits::ops::checked::CheckedRem\">CheckedRem</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#127\">Source</a><a href=\"#method.checked_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedRem.html#tymethod.checked_rem\" class=\"fn\">checked_rem</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Finds the remainder of dividing two numbers, checking for underflow, overflow and division\nby zero. If any of that happens, <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedRem.html#tymethod.checked_rem\">Read more</a></div></details></div></details>","CheckedRem","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedRoot%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-CheckedRoot%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedRoot&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_root\" class=\"method trait-impl\"><a href=\"#method.checked_root\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_root</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the the $n$th root of a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a>, or <code>None</code> if the <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> is not a perfect $n$th\npower.</p>\n<p>$$\nf(x, n) = \\begin{cases}\n\\operatorname{Some}(sqrt[n]{x}) &amp; \\text{if} \\quad \\sqrt[n]{x} \\in \\Z, \\\\\n\\operatorname{None} &amp; \\textrm{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>exp</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::root#checked_root\">here</a>.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>The <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> implementation calls the implementation for <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>s.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedRoot<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedShl-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#217\">Source</a><a href=\"#impl-CheckedShl-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedShl.html\" title=\"trait num_traits::ops::checked::CheckedShl\">CheckedShl</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#217\">Source</a><a href=\"#method.checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedShl.html#tymethod.checked_shl\" class=\"fn\">checked_shl</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedShl.html#tymethod.checked_shl\">Read more</a></div></details></div></details>","CheckedShl","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedShr-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#250\">Source</a><a href=\"#impl-CheckedShr-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedShr.html\" title=\"trait num_traits::ops::checked::CheckedShr\">CheckedShr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#250\">Source</a><a href=\"#method.checked_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedShr.html#tymethod.checked_shr\" class=\"fn\">checked_shr</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedShr.html#tymethod.checked_shr\">Read more</a></div></details></div></details>","CheckedShr","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedSqrt-for-u16\" class=\"impl\"><a href=\"#impl-CheckedSqrt-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedSqrt for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sqrt\" class=\"method trait-impl\"><a href=\"#method.checked_sqrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_sqrt</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the the square root of a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a>, or <code>None</code> if the integer is not a perfect square.</p>\n<p>$$\nf(x) = \\begin{cases}\n\\operatorname{Some}(sqrt{x}) &amp; \\text{if} \\quad \\sqrt{x} \\in \\Z, \\\\\n\\operatorname{None} &amp; \\textrm{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::sqrt#checked_sqrt\">here</a>.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>The <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> implementation calls the implementation for <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>s.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedSqrt","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedSquare-for-u16\" class=\"impl\"><a href=\"#impl-CheckedSquare-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedSquare for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_square\" class=\"method trait-impl\"><a href=\"#method.checked_square\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_square</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Squares a number, returning <code>None</code> if the result cannot be represented.</p>\n<p>$$\nf(x) = \\begin{cases}\n\\operatorname{Some}(x^2) &amp; \\text{if} \\quad x^2 &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad x^2 \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::checked_square#checked_square\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedSquare","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedSub-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#44\">Source</a><a href=\"#impl-CheckedSub-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedSub.html\" title=\"trait num_traits::ops::checked::CheckedSub\">CheckedSub</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/checked.rs.html#44\">Source</a><a href=\"#method.checked_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/checked/trait.CheckedSub.html#tymethod.checked_sub\" class=\"fn\">checked_sub</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Subtracts two numbers, checking for underflow. If underflow happens,\n<code>None</code> is returned.</div></details></div></details>","CheckedSub","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedSub-for-u16\" class=\"impl\"><a href=\"#impl-CheckedSub-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedSub for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method trait-impl\"><a href=\"#method.checked_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>checked_sub</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.checked_sub\" title=\"method u32::checked_sub\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedSub","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedSubMul-for-u16\" class=\"impl\"><a href=\"#impl-CheckedSubMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedSubMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_mul\" class=\"method trait-impl\"><a href=\"#method.checked_sub_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_sub_mul</a>(self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Subtracts a number by the product of two other numbers, returning <code>None</code> if the\nresult cannot be represented.</p>\n<p>$$\nf(x, y, z) = \\begin{cases}\n\\operatorname{Some}(x - yz) &amp; \\text{if} \\quad x \\geq yz, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad x &lt; yz,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::checked_sub_mul#checked_sub_mul\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","CheckedSubMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CheckedSubfactorial-for-u16\" class=\"impl\"><a href=\"#impl-CheckedSubfactorial-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CheckedSubfactorial for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_subfactorial\" class=\"method trait-impl\"><a href=\"#method.checked_subfactorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_subfactorial</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the subfactorial of a number.</p>\n<p>The subfactorial of $n$ counts the number of derangements of a set of size $n$; a\nderangement is a permutation with no fixed points.</p>\n<p>If the input is too large, the function returns <code>None</code>.</p>\n<p>$$\nf(n) = \\begin{cases}\n\\operatorname{Some}(!n) &amp; \\text{if} \\quad !n &lt; 2^W, \\\\\n\\operatorname{None} &amp; \\text{if} \\quad !n \\geq 2^W,\n\\end{cases}\n$$\nwhere $W$ is <code>Self::WIDTH</code>.</p>\n<p>$!n = O(n!) = O(\\sqrt{n}(n/e)^n)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::factorial#checked_subfactorial\">here</a>.</p>\n</div></details></div></details>","CheckedSubfactorial","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/clone.rs.html#334-339\">Source</a></span><a href=\"#impl-Clone-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/clone.rs.html#334-339\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConditionallySelectable-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#542\">Source</a><a href=\"#impl-ConditionallySelectable-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html\" title=\"trait subtle::ConditionallySelectable\">ConditionallySelectable</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.conditional_select\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#542\">Source</a><a href=\"#method.conditional_select\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html#tymethod.conditional_select\" class=\"fn\">conditional_select</a>(a: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, b: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, choice: <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Select <code>a</code> or <code>b</code> according to <code>choice</code>. <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html#tymethod.conditional_select\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.conditional_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#542\">Source</a><a href=\"#method.conditional_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html#method.conditional_assign\" class=\"fn\">conditional_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, choice: <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a>)</h4></section></summary><div class='docblock'>Conditionally assign <code>other</code> to <code>self</code>, according to <code>choice</code>. <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html#method.conditional_assign\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.conditional_swap\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#542\">Source</a><a href=\"#method.conditional_swap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html#method.conditional_swap\" class=\"fn\">conditional_swap</a>(a: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, b: &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, choice: <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a>)</h4></section></summary><div class='docblock'>Conditionally swap <code>self</code> and <code>other</code> if <code>choice == 1</code>; otherwise,\nreassign both unto themselves. <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConditionallySelectable.html#method.conditional_swap\">Read more</a></div></details></div></details>","ConditionallySelectable","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstOne-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#164\">Source</a><a href=\"#impl-ConstOne-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.ConstOne.html\" title=\"trait num_traits::identities::ConstOne\">ConstOne</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.ONE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#164\">Source</a><a href=\"#associatedconstant.ONE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.ConstOne.html#associatedconstant.ONE\" class=\"constant\">ONE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 1u16</h4></section></summary><div class='docblock'>The multiplicative identity element of <code>Self</code>, <code>1</code>.</div></details></div></details>","ConstOne","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstZero-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#59\">Source</a><a href=\"#impl-ConstZero-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.ConstZero.html\" title=\"trait num_traits::identities::ConstZero\">ConstZero</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.ZERO\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#59\">Source</a><a href=\"#associatedconstant.ZERO\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.ConstZero.html#associatedconstant.ZERO\" class=\"constant\">ZERO</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 0u16</h4></section></summary><div class='docblock'>The additive identity element of <code>Self</code>, <code>0</code>.</div></details></div></details>","ConstZero","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstantTimeEq-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#371\">Source</a><a href=\"#impl-ConstantTimeEq-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html\" title=\"trait subtle::ConstantTimeEq\">ConstantTimeEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ct_eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#371\">Source</a><a href=\"#method.ct_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html#tymethod.ct_eq\" class=\"fn\">ct_eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a></h4></section></summary><div class='docblock'>Determine if two items are equal. <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html#tymethod.ct_eq\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ct_ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#284\">Source</a><a href=\"#method.ct_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html#method.ct_ne\" class=\"fn\">ct_ne</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a></h4></section></summary><div class='docblock'>Determine if two items are NOT equal. <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeEq.html#method.ct_ne\">Read more</a></div></details></div></details>","ConstantTimeEq","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstantTimeGreater-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#915\">Source</a><a href=\"#impl-ConstantTimeGreater-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeGreater.html\" title=\"trait subtle::ConstantTimeGreater\">ConstantTimeGreater</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ct_gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#915\">Source</a><a href=\"#method.ct_gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeGreater.html#tymethod.ct_gt\" class=\"fn\">ct_gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a></h4></section></summary><div class=\"docblock\"><p>Returns Choice::from(1) iff x &gt; y, and Choice::from(0) iff x &lt;= y.</p>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h5>\n<p>This algoritm would also work for signed integers if we first\nflip the top bit, e.g. <code>let x: u8 = x ^ 0x80</code>, etc.</p>\n</div></details></div></details>","ConstantTimeGreater","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConstantTimeLess-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#976\">Source</a><a href=\"#impl-ConstantTimeLess-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeLess.html\" title=\"trait subtle::ConstantTimeLess\">ConstantTimeLess</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ct_lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/subtle/2.6.0/src/subtle/lib.rs.html#970\">Source</a><a href=\"#method.ct_lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeLess.html#method.ct_lt\" class=\"fn\">ct_lt</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"struct\" href=\"https://docs.rs/subtle/2.6.0/subtle/struct.Choice.html\" title=\"struct subtle::Choice\">Choice</a></h4></section></summary><div class='docblock'>Determine whether <code>self &lt; other</code>. <a href=\"https://docs.rs/subtle/2.6.0/subtle/trait.ConstantTimeLess.html#method.ct_lt\">Read more</a></div></details></div></details>","ConstantTimeLess","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Contiguous-for-u16\" class=\"impl\"><a href=\"#impl-Contiguous-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Contiguous for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_VALUE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MAX_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MAX_VALUE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 65_535u16</h4></section></summary><div class='docblock'>The upper <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN_VALUE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MIN_VALUE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MIN_VALUE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 0u16</h4></section></summary><div class='docblock'>The lower <em>inclusive</em> bound for valid instances of this type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Int\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Int\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Int</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The primitive integer type with an identical representation to this\ntype. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_integer\" class=\"method trait-impl\"><a href=\"#method.from_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_integer</a>(value: Self::Int) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>If <code>value</code> is within the range for valid instances of this type,\nreturns <code>Some(converted_value)</code>, otherwise, returns <code>None</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_integer\" class=\"method trait-impl\"><a href=\"#method.into_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_integer</a>(self) -&gt; Self::Int</h4></section></summary><div class='docblock'>Perform the conversion from <code>C</code> into the underlying integral type. This\nmostly exists otherwise generic code would need unsafe for the <code>value as integer</code> <a>Read more</a></div></details></div></details>","Contiguous","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3C%26Integer%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3C%26Integer%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; ConvertibleFrom&lt;&amp;'a Integer&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: &amp;Integer) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether an [<code>Integer</code>] can be converted to an unsigned primitive integer.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primitive_int_from_integer#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<&'a Integer>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3C%26Natural%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3C%26Natural%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; ConvertibleFrom&lt;&amp;'a Natural&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: &amp;Natural) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a [<code>Natural</code>] can be converted to a value of a primitive unsigned\ninteger type that’s smaller than a <a href=\"crate#limbs\"><code>Limb</code></a>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primitive_int_from_natural#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<&'a Natural>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Cf32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Cf32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks whether a value of a floating point type is convertible to an\nunsigned type.</p>\n<p>An exact conversion is possible if the floating point value is an integer,\nnot negative (negative zero is ok), and not too large.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<f32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Cf64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Cf64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks whether a value of a floating point type is convertible to an\nunsigned type.</p>\n<p>An exact conversion is possible if the floating point value is an integer,\nnot negative (negative zero is ok), and not too large.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<f64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a value is convertible to a different type.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned then,\n$$\nf_W(n) = (0 \\leq n &lt; 2^W).\n$$</p>\n<p>If the target type is signed then,\n$$\nf_W(n) = (-2^{W-1} \\leq n &lt; 2^{W-1}-1).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a value is convertible to a different type.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned then,\n$$\nf_W(n) = (0 \\leq n &lt; 2^W).\n$$</p>\n<p>If the target type is signed then,\n$$\nf_W(n) = (-2^{W-1} \\leq n &lt; 2^{W-1}-1).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a value is convertible to a different type.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned then,\n$$\nf_W(n) = (0 \\leq n &lt; 2^W).\n$$</p>\n<p>If the target type is signed then,\n$$\nf_W(n) = (-2^{W-1} \\leq n &lt; 2^{W-1}-1).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a value is convertible to a different type.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned then,\n$$\nf_W(n) = (0 \\leq n &lt; 2^W).\n$$</p>\n<p>If the target type is signed then,\n$$\nf_W(n) = (-2^{W-1} \\leq n &lt; 2^{W-1}-1).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a value is convertible to a different type.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned then,\n$$\nf_W(n) = (0 \\leq n &lt; 2^W).\n$$</p>\n<p>If the target type is signed then,\n$$\nf_W(n) = (-2^{W-1} \\leq n &lt; 2^{W-1}-1).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a value is convertible to a different type.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned then,\n$$\nf_W(n) = (0 \\leq n &lt; 2^W).\n$$</p>\n<p>If the target type is signed then,\n$$\nf_W(n) = (-2^{W-1} \\leq n &lt; 2^{W-1}-1).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a value is convertible to a different type.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned then,\n$$\nf_W(n) = (0 \\leq n &lt; 2^W).\n$$</p>\n<p>If the target type is signed then,\n$$\nf_W(n) = (-2^{W-1} \\leq n &lt; 2^{W-1}-1).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(_: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks whether a value is convertible to its own type. The result is always <code>true</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a value is convertible to a different type.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned then,\n$$\nf_W(n) = (0 \\leq n &lt; 2^W).\n$$</p>\n<p>If the target type is signed then,\n$$\nf_W(n) = (-2^{W-1} \\leq n &lt; 2^{W-1}-1).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a value is convertible to a different type.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned then,\n$$\nf_W(n) = (0 \\leq n &lt; 2^W).\n$$</p>\n<p>If the target type is signed then,\n$$\nf_W(n) = (-2^{W-1} \\leq n &lt; 2^{W-1}-1).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(_: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks whether a value is convertible to a different type. The result is always\n<code>true</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvertibleFrom%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ConvertibleFrom%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ConvertibleFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.convertible_from\" class=\"method trait-impl\"><a href=\"#method.convertible_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">convertible_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a value is convertible to a different type.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned then,\n$$\nf_W(n) = (0 \\leq n &lt; 2^W).\n$$</p>\n<p>If the target type is signed then,\n$$\nf_W(n) = (-2^{W-1} \\leq n &lt; 2^{W-1}-1).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#convertible_from\">here</a>.</p>\n</div></details></div></details>","ConvertibleFrom<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CoprimeWith-for-u16\" class=\"impl\"><a href=\"#impl-CoprimeWith-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CoprimeWith for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.coprime_with\" class=\"method trait-impl\"><a href=\"#method.coprime_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">coprime_with</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether two numbers are coprime; that is, whether they have no common factor\nother than 1.</p>\n<p>Every number is coprime with 1. No number is coprime with 0, except 1.</p>\n<p>$f(x, y) = (\\gcd(x, y) = 1)$.</p>\n<p>$f(x, y) = ((k,m,n \\in \\N \\land x=km \\land y=kn) \\implies k=1)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n^2)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>max(self.significant_bits(), other.significant_bits())</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::coprime_with#coprime_with\">here</a>.</p>\n</div></details></div></details>","CoprimeWith","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CountOnes-for-u16\" class=\"impl\"><a href=\"#impl-CountOnes-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CountOnes for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method trait-impl\"><a href=\"#method.count_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>count_ones</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.count_ones\" title=\"method u32::count_ones\">this one</a>.</p>\n</div></details></div></details>","CountOnes","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CountZeros-for-u16\" class=\"impl\"><a href=\"#impl-CountZeros-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl CountZeros for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros\" class=\"method trait-impl\"><a href=\"#method.count_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>count_zeros</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.count_zeros\" title=\"method u32::count_zeros\">this one</a>.</p>\n</div></details></div></details>","CountZeros","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#509-512\">Source</a></span><a href=\"#impl-Debug-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#509-512\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable-for-u16\" class=\"impl\"><a href=\"#impl-Decodable-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Decodable for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.consensus_decode\" class=\"method trait-impl\"><a href=\"#method.consensus_decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">consensus_decode</a>&lt;R&gt;(r: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut R</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, Error&gt;<div class=\"where\">where\n    R: Read + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Decode an object with a well-defined format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.consensus_decode_from_finite_reader\" class=\"method trait-impl\"><a href=\"#method.consensus_decode_from_finite_reader\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">consensus_decode_from_finite_reader</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut R</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Error&gt;<div class=\"where\">where\n    R: Read + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Decode <code>Self</code> from a size-limited reader. <a>Read more</a></div></details></div></details>","Decodable","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Decodable-for-u16\" class=\"impl\"><a href=\"#impl-Decodable-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Decodable for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode\" class=\"method trait-impl\"><a href=\"#method.decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode</a>(buf: &amp;mut &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, Error&gt;</h4></section></summary><div class='docblock'>Decodes the blob into the appropriate type. <code>buf</code> must be advanced past\nthe decoded object.</div></details></div></details>","Decodable","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DecodeValue%3C'a%3E-for-u16\" class=\"impl\"><a href=\"#impl-DecodeValue%3C'a%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; DecodeValue&lt;'a&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.decode_value\" class=\"method trait-impl\"><a href=\"#method.decode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">decode_value</a>&lt;R&gt;(reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut R</a>, header: Header) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, Error&gt;<div class=\"where\">where\n    R: Reader&lt;'a&gt;,</div></h4></section></summary><div class='docblock'>Attempt to decode this message using the provided [<code>Reader</code>].</div></details></div></details>","DecodeValue<'a>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/default.rs.html#170\">Source</a></span><a href=\"#impl-Default-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/default.rs.html#170\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#427-433\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/impls.rs.html#427-433\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;D as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Digits%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-Digits%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Digits&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_digits_asc\" class=\"method trait-impl\"><a href=\"#method.to_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_digits_asc</a>(&amp;self, base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the digits of a number in ascending order\n(least- to most-significant).</p>\n<p>The base must be convertible to <code>Self</code>. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is\nempty; otherwise, it ends with a nonzero digit.</p>\n<p>$f(x, b) = (d_i)_ {i=0}^{k-1}$, where $0 \\leq d_i &lt; b$ for all $i$, $k=0$ or\n$d_{k-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{k-1}b^i d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than <code>Self::MAX</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#to_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_digits_desc\" class=\"method trait-impl\"><a href=\"#method.to_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_digits_desc</a>(&amp;self, base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the digits of a number in descending order\n(most- to least-significant).</p>\n<p>The base must be convertible to <code>Self</code>. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is\nempty; otherwise, it begins with a nonzero digit.</p>\n<p>$f(x, b) = (d_i)_ {i=0}^{k-1}$, where $0 \\leq d_i &lt; b$ for all $i$, $k=0$ or\n$d_{k-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{k-1}b^i d_{k-i-1} = x.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than <code>$t::MAX</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#to_digits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_digits_asc\" class=\"method trait-impl\"><a href=\"#method.from_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_digits_asc</a>&lt;I&gt;(base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of digits into a value.</p>\n<p>The input digits are in ascending order (least- to most-significant). The\nbase must be no larger than <code>Self::MAX</code>. The function returns <code>None</code> if the\ninput represents a number that can’t fit in <code>Self</code>, if <code>base</code> is greater\nthan <code>Self::MAX</code>, or if any of the digits are greater than or equal to the\nbase.</p>\n<p>$$\nf((d_i)_ {i=0}^{k-1}, b) = \\sum_{i=0}^{k-1}b^id_i.\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#from_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_digits_desc\" class=\"method trait-impl\"><a href=\"#method.from_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_digits_desc</a>&lt;I&gt;(base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of digits into a value.</p>\n<p>The input digits are in descending order (most- to least-significant). The\nbase must be no larger than <code>Self::MAX</code>. The function returns <code>None</code> if the\ninput represents a number that can’t fit in <code>Self</code>, if <code>base</code> is greater\nthan <code>Self::MAX</code>, or if any of the digits are greater than or equal to the\nbase.</p>\n<p>$$\nf((d_i)_ {i=0}^{k-1}, b) = \\sum_{i=0}^{k-1}b^{k-i-1}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#from_digits_desc\">here</a>.</p>\n</div></details></div></details>","Digits<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Digits%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-Digits%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Digits&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_digits_asc\" class=\"method trait-impl\"><a href=\"#method.to_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_digits_asc</a>(&amp;self, base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the digits of a number in ascending order\n(least- to most-significant).</p>\n<p>The base must be convertible to <code>Self</code>. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is\nempty; otherwise, it ends with a nonzero digit.</p>\n<p>$f(x, b) = (d_i)_ {i=0}^{k-1}$, where $0 \\leq d_i &lt; b$ for all $i$, $k=0$ or\n$d_{k-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{k-1}b^i d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than <code>Self::MAX</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#to_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_digits_desc\" class=\"method trait-impl\"><a href=\"#method.to_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_digits_desc</a>(&amp;self, base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the digits of a number in descending order\n(most- to least-significant).</p>\n<p>The base must be convertible to <code>Self</code>. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is\nempty; otherwise, it begins with a nonzero digit.</p>\n<p>$f(x, b) = (d_i)_ {i=0}^{k-1}$, where $0 \\leq d_i &lt; b$ for all $i$, $k=0$ or\n$d_{k-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{k-1}b^i d_{k-i-1} = x.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than <code>$t::MAX</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#to_digits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_digits_asc\" class=\"method trait-impl\"><a href=\"#method.from_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_digits_asc</a>&lt;I&gt;(base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of digits into a value.</p>\n<p>The input digits are in ascending order (least- to most-significant). The\nbase must be no larger than <code>Self::MAX</code>. The function returns <code>None</code> if the\ninput represents a number that can’t fit in <code>Self</code>, if <code>base</code> is greater\nthan <code>Self::MAX</code>, or if any of the digits are greater than or equal to the\nbase.</p>\n<p>$$\nf((d_i)_ {i=0}^{k-1}, b) = \\sum_{i=0}^{k-1}b^id_i.\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#from_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_digits_desc\" class=\"method trait-impl\"><a href=\"#method.from_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_digits_desc</a>&lt;I&gt;(base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of digits into a value.</p>\n<p>The input digits are in descending order (most- to least-significant). The\nbase must be no larger than <code>Self::MAX</code>. The function returns <code>None</code> if the\ninput represents a number that can’t fit in <code>Self</code>, if <code>base</code> is greater\nthan <code>Self::MAX</code>, or if any of the digits are greater than or equal to the\nbase.</p>\n<p>$$\nf((d_i)_ {i=0}^{k-1}, b) = \\sum_{i=0}^{k-1}b^{k-i-1}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#from_digits_desc\">here</a>.</p>\n</div></details></div></details>","Digits<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Digits%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-Digits%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Digits&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_digits_asc\" class=\"method trait-impl\"><a href=\"#method.to_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_digits_asc</a>(&amp;self, base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the digits of a number in ascending order\n(least- to most-significant).</p>\n<p>The base must be convertible to <code>Self</code>. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is\nempty; otherwise, it ends with a nonzero digit.</p>\n<p>$f(x, b) = (d_i)_ {i=0}^{k-1}$, where $0 \\leq d_i &lt; b$ for all $i$, $k=0$ or\n$d_{k-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{k-1}b^i d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than <code>Self::MAX</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#to_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_digits_desc\" class=\"method trait-impl\"><a href=\"#method.to_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_digits_desc</a>(&amp;self, base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the digits of a number in descending order\n(most- to least-significant).</p>\n<p>The base must be convertible to <code>Self</code>. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is\nempty; otherwise, it begins with a nonzero digit.</p>\n<p>$f(x, b) = (d_i)_ {i=0}^{k-1}$, where $0 \\leq d_i &lt; b$ for all $i$, $k=0$ or\n$d_{k-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{k-1}b^i d_{k-i-1} = x.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than <code>$t::MAX</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#to_digits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_digits_asc\" class=\"method trait-impl\"><a href=\"#method.from_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_digits_asc</a>&lt;I&gt;(base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of digits into a value.</p>\n<p>The input digits are in ascending order (least- to most-significant). The\nbase must be no larger than <code>Self::MAX</code>. The function returns <code>None</code> if the\ninput represents a number that can’t fit in <code>Self</code>, if <code>base</code> is greater\nthan <code>Self::MAX</code>, or if any of the digits are greater than or equal to the\nbase.</p>\n<p>$$\nf((d_i)_ {i=0}^{k-1}, b) = \\sum_{i=0}^{k-1}b^id_i.\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#from_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_digits_desc\" class=\"method trait-impl\"><a href=\"#method.from_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_digits_desc</a>&lt;I&gt;(base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of digits into a value.</p>\n<p>The input digits are in descending order (most- to least-significant). The\nbase must be no larger than <code>Self::MAX</code>. The function returns <code>None</code> if the\ninput represents a number that can’t fit in <code>Self</code>, if <code>base</code> is greater\nthan <code>Self::MAX</code>, or if any of the digits are greater than or equal to the\nbase.</p>\n<p>$$\nf((d_i)_ {i=0}^{k-1}, b) = \\sum_{i=0}^{k-1}b^{k-i-1}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#from_digits_desc\">here</a>.</p>\n</div></details></div></details>","Digits<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Digits%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-Digits%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Digits&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_digits_asc\" class=\"method trait-impl\"><a href=\"#method.to_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_digits_asc</a>(&amp;self, base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the digits of a number in ascending order\n(least- to most-significant).</p>\n<p>The base must be convertible to <code>Self</code>. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is\nempty; otherwise, it ends with a nonzero digit.</p>\n<p>$f(x, b) = (d_i)_ {i=0}^{k-1}$, where $0 \\leq d_i &lt; b$ for all $i$, $k=0$ or\n$d_{k-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{k-1}b^i d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than <code>Self::MAX</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#to_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_digits_desc\" class=\"method trait-impl\"><a href=\"#method.to_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_digits_desc</a>(&amp;self, base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the digits of a number in descending order\n(most- to least-significant).</p>\n<p>The base must be convertible to <code>Self</code>. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is\nempty; otherwise, it begins with a nonzero digit.</p>\n<p>$f(x, b) = (d_i)_ {i=0}^{k-1}$, where $0 \\leq d_i &lt; b$ for all $i$, $k=0$ or\n$d_{k-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{k-1}b^i d_{k-i-1} = x.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than <code>$t::MAX</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#to_digits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_digits_asc\" class=\"method trait-impl\"><a href=\"#method.from_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_digits_asc</a>&lt;I&gt;(base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of digits into a value.</p>\n<p>The input digits are in ascending order (least- to most-significant). The\nbase must be no larger than <code>Self::MAX</code>. The function returns <code>None</code> if the\ninput represents a number that can’t fit in <code>Self</code>, if <code>base</code> is greater\nthan <code>Self::MAX</code>, or if any of the digits are greater than or equal to the\nbase.</p>\n<p>$$\nf((d_i)_ {i=0}^{k-1}, b) = \\sum_{i=0}^{k-1}b^id_i.\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#from_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_digits_desc\" class=\"method trait-impl\"><a href=\"#method.from_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_digits_desc</a>&lt;I&gt;(base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of digits into a value.</p>\n<p>The input digits are in descending order (most- to least-significant). The\nbase must be no larger than <code>Self::MAX</code>. The function returns <code>None</code> if the\ninput represents a number that can’t fit in <code>Self</code>, if <code>base</code> is greater\nthan <code>Self::MAX</code>, or if any of the digits are greater than or equal to the\nbase.</p>\n<p>$$\nf((d_i)_ {i=0}^{k-1}, b) = \\sum_{i=0}^{k-1}b^{k-i-1}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#from_digits_desc\">here</a>.</p>\n</div></details></div></details>","Digits<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Digits%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-Digits%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Digits&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_digits_asc\" class=\"method trait-impl\"><a href=\"#method.to_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_digits_asc</a>(&amp;self, base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the digits of a number in ascending order\n(least- to most-significant).</p>\n<p>The base must be convertible to <code>Self</code>. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is\nempty; otherwise, it ends with a nonzero digit.</p>\n<p>$f(x, b) = (d_i)_ {i=0}^{k-1}$, where $0 \\leq d_i &lt; b$ for all $i$, $k=0$ or\n$d_{k-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{k-1}b^i d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than <code>Self::MAX</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#to_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_digits_desc\" class=\"method trait-impl\"><a href=\"#method.to_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_digits_desc</a>(&amp;self, base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the digits of a number in descending order\n(most- to least-significant).</p>\n<p>The base must be convertible to <code>Self</code>. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is\nempty; otherwise, it begins with a nonzero digit.</p>\n<p>$f(x, b) = (d_i)_ {i=0}^{k-1}$, where $0 \\leq d_i &lt; b$ for all $i$, $k=0$ or\n$d_{k-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{k-1}b^i d_{k-i-1} = x.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than <code>$t::MAX</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#to_digits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_digits_asc\" class=\"method trait-impl\"><a href=\"#method.from_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_digits_asc</a>&lt;I&gt;(base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of digits into a value.</p>\n<p>The input digits are in ascending order (least- to most-significant). The\nbase must be no larger than <code>Self::MAX</code>. The function returns <code>None</code> if the\ninput represents a number that can’t fit in <code>Self</code>, if <code>base</code> is greater\nthan <code>Self::MAX</code>, or if any of the digits are greater than or equal to the\nbase.</p>\n<p>$$\nf((d_i)_ {i=0}^{k-1}, b) = \\sum_{i=0}^{k-1}b^id_i.\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#from_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_digits_desc\" class=\"method trait-impl\"><a href=\"#method.from_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_digits_desc</a>&lt;I&gt;(base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of digits into a value.</p>\n<p>The input digits are in descending order (most- to least-significant). The\nbase must be no larger than <code>Self::MAX</code>. The function returns <code>None</code> if the\ninput represents a number that can’t fit in <code>Self</code>, if <code>base</code> is greater\nthan <code>Self::MAX</code>, or if any of the digits are greater than or equal to the\nbase.</p>\n<p>$$\nf((d_i)_ {i=0}^{k-1}, b) = \\sum_{i=0}^{k-1}b^{k-i-1}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#from_digits_desc\">here</a>.</p>\n</div></details></div></details>","Digits<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Digits%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-Digits%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Digits&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_digits_asc\" class=\"method trait-impl\"><a href=\"#method.to_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_digits_asc</a>(&amp;self, base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the digits of a number in ascending order\n(least- to most-significant).</p>\n<p>The base must be convertible to <code>Self</code>. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is\nempty; otherwise, it ends with a nonzero digit.</p>\n<p>$f(x, b) = (d_i)_ {i=0}^{k-1}$, where $0 \\leq d_i &lt; b$ for all $i$, $k=0$ or\n$d_{k-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{k-1}b^i d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than <code>Self::MAX</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#to_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_digits_desc\" class=\"method trait-impl\"><a href=\"#method.to_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_digits_desc</a>(&amp;self, base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the digits of a number in descending order\n(most- to least-significant).</p>\n<p>The base must be convertible to <code>Self</code>. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is\nempty; otherwise, it begins with a nonzero digit.</p>\n<p>$f(x, b) = (d_i)_ {i=0}^{k-1}$, where $0 \\leq d_i &lt; b$ for all $i$, $k=0$ or\n$d_{k-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{k-1}b^i d_{k-i-1} = x.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than <code>$t::MAX</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#to_digits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_digits_asc\" class=\"method trait-impl\"><a href=\"#method.from_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_digits_asc</a>&lt;I&gt;(base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of digits into a value.</p>\n<p>The input digits are in ascending order (least- to most-significant). The\nbase must be no larger than <code>Self::MAX</code>. The function returns <code>None</code> if the\ninput represents a number that can’t fit in <code>Self</code>, if <code>base</code> is greater\nthan <code>Self::MAX</code>, or if any of the digits are greater than or equal to the\nbase.</p>\n<p>$$\nf((d_i)_ {i=0}^{k-1}, b) = \\sum_{i=0}^{k-1}b^id_i.\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#from_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_digits_desc\" class=\"method trait-impl\"><a href=\"#method.from_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_digits_desc</a>&lt;I&gt;(base: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of digits into a value.</p>\n<p>The input digits are in descending order (most- to least-significant). The\nbase must be no larger than <code>Self::MAX</code>. The function returns <code>None</code> if the\ninput represents a number that can’t fit in <code>Self</code>, if <code>base</code> is greater\nthan <code>Self::MAX</code>, or if any of the digits are greater than or equal to the\nbase.</p>\n<p>$$\nf((d_i)_ {i=0}^{k-1}, b) = \\sum_{i=0}^{k-1}b^{k-i-1}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::general_digits#from_digits_desc\">here</a>.</p>\n</div></details></div></details>","Digits<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#519-526\">Source</a></span><a href=\"#impl-Display-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#519-526\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Div%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_repr/struct.OwnedRepr.html\" title=\"struct ndarray::data_repr::OwnedRepr\">OwnedRepr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&'a ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26BigInt%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#31\">Source</a><a href=\"#impl-Div%3C%26BigInt%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#31\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#31\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&BigInt>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26BigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#375\">Source</a><a href=\"#impl-Div%3C%26BigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#375\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#375\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26Complex%3Cu16%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#impl-Div%3C%26Complex%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&'a Complex<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#501-504\">Source</a></span><a href=\"#impl-Div%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#501-504\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#501-504\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Div%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataOwned.html\" title=\"trait ndarray::data_traits::DataOwned\">DataOwned</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; + <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataMut.html\" title=\"trait ndarray::data_traits::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CBigInt%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#31\">Source</a><a href=\"#impl-Div%3CBigInt%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#31\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#31\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<BigInt>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CBigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#375\">Source</a><a href=\"#impl-Div%3CBigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#375\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#375\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CComplex%3Cu16%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#impl-Div%3CComplex%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<Complex<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/nonzero.rs.html#2054-2063\">Source</a></span><a href=\"#impl-Div%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/nonzero/struct.NonZero.html\" title=\"struct core::num::nonzero::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/nonzero.rs.html#2054-2063\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/nonzero/struct.NonZero.html\" title=\"struct core::num::nonzero::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/nonzero.rs.html#2054-2063\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details></div></details>","Div<NonZero<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-Div%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = U16&lt;O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: U16&lt;O&gt;) -&gt; U16&lt;O&gt;</h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#501-504\">Source</a></span><a href=\"#impl-Div-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#501-504\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#501-504\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#961\">Source</a></span><a href=\"#impl-DivAssign%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#961\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/nonzero.rs.html#2054-2063\">Source</a></span><a href=\"#impl-DivAssign%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/nonzero/struct.NonZero.html\" title=\"struct core::num::nonzero::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/nonzero.rs.html#2054-2063\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/nonzero/struct.NonZero.html\" title=\"struct core::num::nonzero::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any fractional\npart of the exact result, and cannot panic.</p>\n</div></details></div></details>","DivAssign<NonZero<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-DivAssign%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: U16&lt;O&gt;)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#961\">Source</a></span><a href=\"#impl-DivAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#961\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssignMod-for-u16\" class=\"impl\"><a href=\"#impl-DivAssignMod-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DivAssignMod for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign_mod\" class=\"method trait-impl\"><a href=\"#method.div_assign_mod\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">div_assign_mod</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Divides a number by another number in place, returning the remainder. The quotient\nis rounded towards negative infinity.</p>\n<p>The quotient and remainder satisfy $x = qy + r$ and $0 \\leq r &lt; y$.</p>\n<p>$$\nf(x, y) = x - y\\left \\lfloor \\frac{x}{y} \\right \\rfloor,\n$$\n$$\nx \\gets \\left \\lfloor \\frac{x}{y} \\right \\rfloor.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::div_mod#div_assign_mod\">here</a>.</p>\n</div></details><section id=\"associatedtype.ModOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ModOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ModOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","DivAssignMod","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssignRem-for-u16\" class=\"impl\"><a href=\"#impl-DivAssignRem-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DivAssignRem for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign_rem\" class=\"method trait-impl\"><a href=\"#method.div_assign_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">div_assign_rem</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Divides a number by another number in place, returning the remainder. The quotient\nis rounded towards zero.</p>\n<p>The quotient and remainder satisfy $x = qy + r$ and $0 \\leq r &lt; y$.</p>\n<p>$$\nf(x, y) = x - y\\left \\lfloor \\frac{x}{y} \\right \\rfloor,\n$$\n$$\nx \\gets \\left \\lfloor \\frac{x}{y} \\right \\rfloor.\n$$</p>\n<p>For unsigned integers, <code>div_assign_rem</code> is equivalent to <code>div_assign_mod</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::div_mod#div_assign_rem\">here</a>.</p>\n</div></details><section id=\"associatedtype.RemOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RemOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">RemOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","DivAssignRem","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivExact-for-u16\" class=\"impl\"><a href=\"#impl-DivExact-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DivExact for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_exact\" class=\"method trait-impl\"><a href=\"#method.div_exact\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">div_exact</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Divides a value by another value. The first value must be exactly divisible by the\nsecond.</p>\n<p>If <code>self</code> is not exactly divisible by <code>other</code>, this function may panic or return a\nmeaningless result.</p>\n<p>$$\nf(x, y) = \\frac{x}{y}.\n$$</p>\n<p>If you are unsure whether the division will be exact, use <code>self / other</code> instead. If\nyou’re unsure and you want to know, use <code>self.div_mod(other)</code> and check whether the\nremainder is zero. If you want a function that panics if the division is not exact,\nuse <code>self.div_round(other, Exact)</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is zero or if <code>self</code> is <code>Self::MIN</code> and other is -1.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::div_exact#div_exact\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","DivExact","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivExactAssign-for-u16\" class=\"impl\"><a href=\"#impl-DivExactAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DivExactAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_exact_assign\" class=\"method trait-impl\"><a href=\"#method.div_exact_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">div_exact_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Divides a value by another value in place. The value being assigned to must be\nexactly divisible by the value on the right-hand side.</p>\n<p>If <code>self</code> is not exactly divisible by <code>other</code>, this function may panic or return a\nmeaningless result.</p>\n<p>$$\nx \\gets \\frac{x}{y}.\n$$</p>\n<p>If you are unsure whether the division will be exact, use <code>self /= other</code> instead.\nIf you’re unsure and you want to know, use <code>self.div_assign_mod(other)</code> and check\nwhether the remainder is zero. If you want a function that panics if the division is\nnot exact, use <code>self.div_round_assign(other, Exact)</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is zero or if <code>self</code> is <code>Self::MIN</code> and other is -1.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::div_exact#div_exact_assign\">here</a>.</p>\n</div></details></div></details>","DivExactAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivMod-for-u16\" class=\"impl\"><a href=\"#impl-DivMod-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DivMod for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_mod\" class=\"method trait-impl\"><a href=\"#method.div_mod\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">div_mod</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Divides a number by another number, returning the quotient and remainder. The\nquotient is rounded towards negative infinity.</p>\n<p>The quotient and remainder satisfy $x = qy + r$ and $0 \\leq r &lt; y$.</p>\n<p>$$\nf(x, y) = \\left ( \\left \\lfloor \\frac{x}{y} \\right \\rfloor, \\space\nx - y\\left \\lfloor \\frac{x}{y} \\right \\rfloor \\right ).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::div_mod#div_mod\">here</a>.</p>\n</div></details><section id=\"associatedtype.DivOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.DivOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">DivOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><section id=\"associatedtype.ModOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ModOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ModOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","DivMod","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivRem-for-u16\" class=\"impl\"><a href=\"#impl-DivRem-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DivRem for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_rem\" class=\"method trait-impl\"><a href=\"#method.div_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">div_rem</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Divides a number by another number, returning the quotient and remainder. The\nquotient is rounded towards zero.</p>\n<p>The quotient and remainder satisfy $x = qy + r$ and $0 \\leq r &lt; y$.</p>\n<p>$$\nf(x, y) = \\left ( \\left \\lfloor \\frac{x}{y} \\right \\rfloor, \\space\nx - y\\left \\lfloor \\frac{x}{y} \\right \\rfloor \\right ).\n$$</p>\n<p>For unsigned integers, <code>div_rem</code> is equivalent to <code>div_mod</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::div_mod#div_rem\">here</a>.</p>\n</div></details><section id=\"associatedtype.DivOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.DivOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">DivOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><section id=\"associatedtype.RemOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RemOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">RemOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","DivRem","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivRound-for-u16\" class=\"impl\"><a href=\"#impl-DivRound-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DivRound for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_round\" class=\"method trait-impl\"><a href=\"#method.div_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">div_round</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Divides a value by another value and rounds according to a specified rounding mode.\nAn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating whether the returned value is less\nthan, equal to, or greater than the exact value.</p>\n<p>Let $q = \\frac{x}{y}$, and let $g$ be the function that just returns the first\nelement of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$$\ng(x, y, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.\n$$</p>\n<p>$$\ng(x, y, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.\n$$</p>\n<p>$$\ng(x, y, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if} \\quad  q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp;\n\\text{if} \\quad  q - \\lfloor q \\rfloor = \\frac{1}{2}\n\\ \\text{and} \\ \\lfloor q \\rfloor \\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2}\n\\ \\text{and} \\ \\lfloor q \\rfloor \\ \\text{is odd.}\n\\end{cases}\n$$</p>\n<p>$g(x, y, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, y, r) = (g(x, y, r), \\operatorname{cmp}(g(x, y, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is zero, or if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by\n<code>other</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::div_round#div_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","DivRound","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivRoundAssign-for-u16\" class=\"impl\"><a href=\"#impl-DivRoundAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DivRoundAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_round_assign\" class=\"method trait-impl\"><a href=\"#method.div_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">div_round_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Divides a value by another value in place and rounds according to a specified\nrounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned, indicating whether the assigned value is\nless than, equal to, or greater than the exact value.</p>\n<p>See the [<code>DivRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is zero, or if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by\n<code>other</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::div_round#div_round_assign\">here</a>.</p>\n</div></details></div></details>","DivRoundAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivisibleBy-for-u16\" class=\"impl\"><a href=\"#impl-DivisibleBy-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DivisibleBy for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.divisible_by\" class=\"method trait-impl\"><a href=\"#method.divisible_by\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">divisible_by</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether a number is divisible by another number; in other words, whether the\nfirst number is a multiple of the second.</p>\n<p>This means that zero is divisible by any number, including zero; but a nonzero\nnumber is never divisible by zero.</p>\n<p>$f(x, m) = (m|x)$.</p>\n<p>$f(x, m) = (\\exists k \\in \\N : x = km)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::divisible_by#divisible_by\">here</a>.</p>\n</div></details></div></details>","DivisibleBy","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivisibleByPowerOf2-for-u16\" class=\"impl\"><a href=\"#impl-DivisibleByPowerOf2-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DivisibleByPowerOf2 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.divisible_by_power_of_2\" class=\"method trait-impl\"><a href=\"#method.divisible_by_power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">divisible_by_power_of_2</a>(self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether a number is divisible by $2^k$.</p>\n<p>$f(x, k) = (2^k|x)$.</p>\n<p>$f(x, k) = (\\exists n \\in \\N : \\ x = n2^k)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::divisible_by_power_of_2#divisible_by_power_of_2\">here</a>.</p>\n</div></details></div></details>","DivisibleByPowerOf2","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DoubleFactorial-for-u16\" class=\"impl\"><a href=\"#impl-DoubleFactorial-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DoubleFactorial for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.double_factorial\" class=\"method trait-impl\"><a href=\"#method.double_factorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">double_factorial</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Computes the double factorial of a number.</p>\n<p>If the input is too large, the function panics. For a function that returns <code>None</code>\ninstead, try\n<a href=\"CheckedDoubleFactorial::checked_double_factorial\"><code>checked_double_factorial</code></a>.</p>\n<p>$$\nf(n) = n!! = n \\times (n - 2) \\times (n - 4) \\times \\cdots \\times i,\n$$\nwhere $i$ is 1 if $n$ is odd and $2$ if $n$ is even.</p>\n<p>$n!! = O(\\sqrt{n}(n/e)^{n/2})$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the output is too large to be represented.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::factorial#double_factorial\">here</a>.</p>\n</div></details></div></details>","DoubleFactorial","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encodable-for-u16\" class=\"impl\"><a href=\"#impl-Encodable-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Encodable for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.consensus_encode\" class=\"method trait-impl\"><a href=\"#method.consensus_encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">consensus_encode</a>&lt;W&gt;(&amp;self, w: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, Error&gt;<div class=\"where\">where\n    W: Write + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Encodes an object with a well-defined format. <a>Read more</a></div></details></div></details>","Encodable","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Encodable-for-u16\" class=\"impl\"><a href=\"#impl-Encodable-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Encodable for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.length\" class=\"method trait-impl\"><a href=\"#method.length\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">length</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the length of the encoding of this type in bytes. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode\" class=\"method trait-impl\"><a href=\"#method.encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode</a>(&amp;self, out: &amp;mut dyn BufMut)</h4></section></summary><div class='docblock'>Encodes the type into the <code>out</code> buffer.</div></details></div></details>","Encodable","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EncodeValue-for-u16\" class=\"impl\"><a href=\"#impl-EncodeValue-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl EncodeValue for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_len\" class=\"method trait-impl\"><a href=\"#method.value_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_len</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Length, Error&gt;</h4></section></summary><div class='docblock'>Compute the length of this value (sans [<code>Tag</code>]+[<code>Length</code>] header) when\nencoded as ASN.1 DER.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.encode_value\" class=\"method trait-impl\"><a href=\"#method.encode_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">encode_value</a>(&amp;self, writer: &amp;mut impl Writer) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Encode value (sans [<code>Tag</code>]+[<code>Length</code>] header) as ASN.1 DER using the\nprovided [<code>Writer</code>].</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.header\" class=\"method trait-impl\"><a href=\"#method.header\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">header</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Header, Error&gt;<div class=\"where\">where\n    Self: Tagged,</div></h4></section></summary><div class='docblock'>Get the [<code>Header</code>] used to encode this value.</div></details></div></details>","EncodeValue","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EqAbs%3CInteger%3E-for-u16\" class=\"impl\"><a href=\"#impl-EqAbs%3CInteger%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl EqAbs&lt;Integer&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_abs\" class=\"method trait-impl\"><a href=\"#method.eq_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq_abs</a>(&amp;self, other: &amp;Integer) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether the absolute values of a primitive unsigned integer and an\n[<code>Integer</code>] are equal.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<p>See <a href=\"super::eq_abs_primitive_int#eq_abs\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne_abs\" class=\"method trait-impl\"><a href=\"#method.ne_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Compares the absolute values of two numbers for inequality, taking both by reference. <a>Read more</a></div></details></div></details>","EqAbs<Integer>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EqAbs%3CNatural%3E-for-u16\" class=\"impl\"><a href=\"#impl-EqAbs%3CNatural%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl EqAbs&lt;Natural&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_abs\" class=\"method trait-impl\"><a href=\"#method.eq_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq_abs</a>(&amp;self, other: &amp;Natural) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether the absolute values of a primitive unsigned integer and a\n[<code>Natural</code>] are equal.</p>\n<p>Since both values are non-negative, this is the same as ordinary equality.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<p>See <a href=\"super::eq_abs_primitive_int#eq_abs\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne_abs\" class=\"method trait-impl\"><a href=\"#method.ne_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Compares the absolute values of two numbers for inequality, taking both by reference. <a>Read more</a></div></details></div></details>","EqAbs<Natural>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EqAbs-for-u16\" class=\"impl\"><a href=\"#impl-EqAbs-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl EqAbs for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_abs\" class=\"method trait-impl\"><a href=\"#method.eq_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq_abs</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Compares the absolute values of two numbers for equality, taking both by reference.</p>\n<p>For unsigned values, this is the same as ordinary equality.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::eq_abs#eq_abs\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne_abs\" class=\"method trait-impl\"><a href=\"#method.ne_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Compares the absolute values of two numbers for inequality, taking both by reference. <a>Read more</a></div></details></div></details>","EqAbs","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EqMod-for-u16\" class=\"impl\"><a href=\"#impl-EqMod-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl EqMod for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_mod\" class=\"method trait-impl\"><a href=\"#method.eq_mod\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq_mod</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether a number is equivalent to another number modulo a third; that is,\nwhether the difference between the first two is a multiple of the third.</p>\n<p>Two numbers are equal to each other modulo 0 iff they are equal.</p>\n<p>$f(x, y, m) = (x \\equiv y \\mod m)$.</p>\n<p>$f(x, y, m) = (\\exists k \\in \\Z : x - y = km)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::eq_mod#eq_mod\">here</a>.</p>\n</div></details></div></details>","EqMod","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EqModPowerOf2-for-u16\" class=\"impl\"><a href=\"#impl-EqModPowerOf2-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl EqModPowerOf2 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq_mod_power_of_2\" class=\"method trait-impl\"><a href=\"#method.eq_mod_power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq_mod_power_of_2</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether one number is equal to another modulo $2^k$.</p>\n<p>$f(x, y, k) = (x \\equiv y \\mod 2^k)$.</p>\n<p>$f(x, y, k) = (\\exists n \\in \\Z : x - y = n2^k)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::eq_mod_power_of_2#eq_mod_power_of_2\">here</a>.</p>\n</div></details></div></details>","EqModPowerOf2","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Euclid-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#89\">Source</a><a href=\"#impl-Euclid-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html\" title=\"trait num_traits::ops::euclid::Euclid\">Euclid</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#89\">Source</a><a href=\"#method.div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html#tymethod.div_euclid\" class=\"fn\">div_euclid</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Calculates Euclidean division, the matching method for <code>rem_euclid</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html#tymethod.div_euclid\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#89\">Source</a><a href=\"#method.rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html#tymethod.rem_euclid\" class=\"fn\">rem_euclid</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Calculates the least nonnegative remainder of <code>self (mod v)</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html#tymethod.rem_euclid\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_rem_euclid\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/euclid.rs.html#67\">Source</a><a href=\"#method.div_rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html#method.div_rem_euclid\" class=\"fn\">div_rem_euclid</a>(&amp;self, v: &amp;Self) -&gt; (Self, Self)</h4></section></summary><div class='docblock'>Returns both the quotient and remainder from Euclidean division. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/euclid/trait.Euclid.html#method.div_rem_euclid\">Read more</a></div></details></div></details>","Euclid","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExtendedGcd-for-u16\" class=\"impl\"><a href=\"#impl-ExtendedGcd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ExtendedGcd for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extended_gcd\" class=\"method trait-impl\"><a href=\"#method.extended_gcd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">extended_gcd</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the GCD (greatest common divisor) of two numbers $a$ and $b$, and also the\ncoefficients $x$ and $y$ in Bézout’s identity $ax+by=\\gcd(a,b)$.</p>\n<p>The are infinitely many $x$, $y$ that satisfy the identity for any $a$, $b$, so the\nfull specification is more detailed:</p>\n<ul>\n<li>$f(0, 0) = (0, 0, 0)$.</li>\n<li>$f(a, ak) = (a, 1, 0)$ if $a &gt; 0$ and $k \\neq 1$.</li>\n<li>$f(bk, b) = (b, 0, 1)$ if $b &gt; 0$.</li>\n<li>$f(a, b) = (g, x, y)$ if $a \\neq 0$ and $b \\neq 0$ and $\\gcd(a, b) \\neq \\min(a,\nb)$, where $g = \\gcd(a, b) \\geq 0$, $ax + by = g$, $x \\leq \\lfloor b/g \\rfloor$,\nand $y \\leq \\lfloor a/g \\rfloor$.</li>\n</ul>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n^2)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>max(self.significant_bits(), other.significant_bits())</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::extended_gcd#extended_gcd\">here</a>.</p>\n</div></details><section id=\"associatedtype.Gcd\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Gcd\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Gcd</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><section id=\"associatedtype.Cofactor\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Cofactor\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Cofactor</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a></h4></section></div></details>","ExtendedGcd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Factorial-for-u16\" class=\"impl\"><a href=\"#impl-Factorial-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Factorial for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.factorial\" class=\"method trait-impl\"><a href=\"#method.factorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">factorial</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Computes the factorial of a number.</p>\n<p>If the input is too large, the function panics. For a function that returns <code>None</code>\ninstead, try <a href=\"CheckedFactorial::checked_factorial\"><code>checked_factorial</code></a>.</p>\n<p>$$\nf(n) = n! = 1 \\times 2 \\times 3 \\times \\cdots \\times n.\n$$</p>\n<p>$n! = O(\\sqrt{n}(n/e)^n)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the output is too large to be represented.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::factorial#factorial\">here</a>.</p>\n</div></details></div></details>","Factorial","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FixedTag-for-u16\" class=\"impl\"><a href=\"#impl-FixedTag-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FixedTag for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.TAG\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.TAG\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">TAG</a>: Tag = Tag::Integer</h4></section></summary><div class='docblock'>ASN.1 tag</div></details></div></details>","FixedTag","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FloorLogBase-for-u16\" class=\"impl\"><a href=\"#impl-FloorLogBase-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FloorLogBase for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor_log_base\" class=\"method trait-impl\"><a href=\"#method.floor_log_base\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">floor_log_base</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the floor of the base-$b$ logarithm of a positive integer.</p>\n<p>$f(x, b) = \\lfloor\\log_b x\\rfloor$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>self.significant_bits() / base.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is 0 or <code>base</code> is less than 2.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::log_base#floor_log_base\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></div></details>","FloorLogBase","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FloorLogBase2-for-u16\" class=\"impl\"><a href=\"#impl-FloorLogBase2-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FloorLogBase2 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor_log_base_2\" class=\"method trait-impl\"><a href=\"#method.floor_log_base_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">floor_log_base_2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the floor of the base-2 logarithm of a positive integer.</p>\n<p>$f(x) = \\lfloor\\log_2 x\\rfloor$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::log_base_2#floor_log_base_2\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></div></details>","FloorLogBase2","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FloorLogBasePowerOf2%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-FloorLogBasePowerOf2%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FloorLogBasePowerOf2&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor_log_base_power_of_2\" class=\"method trait-impl\"><a href=\"#method.floor_log_base_power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">floor_log_base_power_of_2</a>(self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the floor of the base-$2^k$ logarithm of a positive integer.</p>\n<p>$f(x, k) = \\lfloor\\log_{2^k} x\\rfloor$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is infinite, <code>NaN</code>, or less than or equal to zero, or if <code>pow</code> is\nzero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::log_base_power_of_2#floor_log_base_power_of_2\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></div></details>","FloorLogBasePowerOf2<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FloorRoot%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-FloorRoot%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FloorRoot&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor_root\" class=\"method trait-impl\"><a href=\"#method.floor_root\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">floor_root</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Returns the floor of the $n$th root of a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a>.</p>\n<p>$f(x, n) = \\lfloor\\sqrt[n]{x}\\rfloor$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>exp</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::root#checked_root\">here</a>.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>The <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> implementation calls the implementation for <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>s.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","FloorRoot<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FloorRootAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-FloorRootAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FloorRootAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor_root_assign\" class=\"method trait-impl\"><a href=\"#method.floor_root_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">floor_root_assign</a>(&amp;mut self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Replaces an integer with the floor of its $n$th root.</p>\n<p>$x \\gets \\lfloor\\sqrt[n]{x}\\rfloor$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>exp</code> is zero, or if <code>self</code> is negative and <code>exp</code> is even.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::root#floor_root_assign\">here</a>.</p>\n</div></details></div></details>","FloorRootAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FloorSqrt-for-u16\" class=\"impl\"><a href=\"#impl-FloorSqrt-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FloorSqrt for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor_sqrt\" class=\"method trait-impl\"><a href=\"#method.floor_sqrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">floor_sqrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Returns the floor of the square root of a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a>.</p>\n<p>$f(x) = \\lfloor\\sqrt{x}\\rfloor$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::sqrt#floor_sqrt\">here</a>.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>The <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> implementation calls the implementation for <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>s.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","FloorSqrt","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FloorSqrtAssign-for-u16\" class=\"impl\"><a href=\"#impl-FloorSqrtAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FloorSqrtAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.floor_sqrt_assign\" class=\"method trait-impl\"><a href=\"#method.floor_sqrt_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">floor_sqrt_assign</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Replaces an integer with the floor of its square root.</p>\n<p>$x \\gets \\lfloor\\sqrt{x}\\rfloor$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is negative.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::sqrt#floor_sqrt_assign\">here</a>.</p>\n</div></details></div></details>","FloorSqrtAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26CloseCode%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3C%26CloseCode%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'t&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;'t CloseCode&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(code: &amp;'t CloseCode) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&'t CloseCode>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBidiClass%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CBidiClass%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BidiClass&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: BidiClass) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BidiClass>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCanonicalCombiningClass%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CCanonicalCombiningClass%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;CanonicalCombiningClass&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: CanonicalCombiningClass) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<CanonicalCombiningClass>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCertificateCompressionAlgorithm%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CCertificateCompressionAlgorithm%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;CertificateCompressionAlgorithm&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: CertificateCompressionAlgorithm) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<CertificateCompressionAlgorithm>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CChar%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ascii/ascii_char.rs.html#558\">Source</a><a href=\"#impl-From%3CChar%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/ascii/ascii_char/enum.AsciiChar.html\" title=\"enum core::ascii::ascii_char::AsciiChar\">AsciiChar</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ascii/ascii_char.rs.html#558\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(chr: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/ascii/ascii_char/enum.AsciiChar.html\" title=\"enum core::ascii::ascii_char::AsciiChar\">AsciiChar</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<AsciiChar>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCipherSuite%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CCipherSuite%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;CipherSuite&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: CipherSuite) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<CipherSuite>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCloseCode%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CCloseCode%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;CloseCode&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(code: CloseCode) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<CloseCode>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CEastAsianWidth%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CEastAsianWidth%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;EastAsianWidth&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: EastAsianWidth) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<EastAsianWidth>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CEchVersion%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CEchVersion%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;EchVersion&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: EchVersion) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<EchVersion>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CExtensionType%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CExtensionType%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;ExtensionType&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: ExtensionType) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ExtensionType>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CFixedBytes%3C2%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CFixedBytes%3C2%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;FixedBytes&lt;2&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: FixedBytes&lt;2&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a fixed byte array into a fixed-width unsigned integer\nby interpreting the bytes as big-endian.</p>\n</div></details></div></details>","From<FixedBytes<2>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CGraphemeClusterBreak%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CGraphemeClusterBreak%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;GraphemeClusterBreak&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: GraphemeClusterBreak) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<GraphemeClusterBreak>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CHangulSyllableType%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CHangulSyllableType%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;HangulSyllableType&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: HangulSyllableType) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<HangulSyllableType>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CHpkeAead%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CHpkeAead%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;HpkeAead&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: HpkeAead) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<HpkeAead>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CHpkeKdf%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CHpkeKdf%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;HpkeKdf&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: HpkeKdf) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<HpkeKdf>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CHpkeKem%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CHpkeKem%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;HpkeKem&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: HpkeKem) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<HpkeKem>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CIndicSyllabicCategory%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CIndicSyllabicCategory%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;IndicSyllabicCategory&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: IndicSyllabicCategory) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<IndicSyllabicCategory>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CJoiningType%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CJoiningType%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;JoiningType&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: JoiningType) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<JoiningType>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CLineBreak%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CLineBreak%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;LineBreak&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: LineBreak) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<LineBreak>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNamedCurve%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CNamedCurve%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;NamedCurve&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: NamedCurve) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<NamedCurve>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNamedGroup%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CNamedGroup%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;NamedGroup&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: NamedGroup) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<NamedGroup>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CPort%3CT%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CPort%3CT%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Port&lt;T&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(port: Port&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Port<T>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CProtocolVersion%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CProtocolVersion%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;ProtocolVersion&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: ProtocolVersion) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ProtocolVersion>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CScript%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CScript%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;Script&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: Script) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Script>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSentenceBreak%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CSentenceBreak%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;SentenceBreak&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: SentenceBreak) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<SentenceBreak>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSignatureScheme%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CSignatureScheme%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;SignatureScheme&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: SignatureScheme) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<SignatureScheme>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CStatusCode%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CStatusCode%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;StatusCode&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(status: StatusCode) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<StatusCode>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: U16&lt;O&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVerticalOrientation%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CVerticalOrientation%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;VerticalOrientation&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: VerticalOrientation) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<VerticalOrientation>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CWordBreak%3E-for-u16\" class=\"impl\"><a href=\"#impl-From%3CWordBreak%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;WordBreak&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(other: WordBreak) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<WordBreak>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#86\">Source</a></span><a href=\"#impl-From%3Cbool%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#86\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\" title=\"primitive bool\"><code>bool</code></a> to <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> losslessly.\nThe resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code> values.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u16::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(u16::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre></div>\n</div></details></div></details>","From<bool>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#99\">Source</a></span><a href=\"#impl-From%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#99\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\" title=\"primitive u8\"><code>u8</code></a> to <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> losslessly.</p>\n</div></details></div></details>","From<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromBytes-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#236\">Source</a><a href=\"#impl-FromBytes-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html\" title=\"trait num_traits::ops::bytes::FromBytes\">FromBytes</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Bytes\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#236\">Source</a><a href=\"#associatedtype.Bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">2</a>]</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#236\">Source</a><a href=\"#method.from_be_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html\" title=\"trait num_traits::ops::bytes::FromBytes\">FromBytes</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::FromBytes::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Create a number from its representation as a byte array in big endian. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#tymethod.from_be_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#236\">Source</a><a href=\"#method.from_le_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html\" title=\"trait num_traits::ops::bytes::FromBytes\">FromBytes</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::FromBytes::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Create a number from its representation as a byte array in little endian. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#tymethod.from_le_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#236\">Source</a><a href=\"#method.from_ne_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#method.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html\" title=\"trait num_traits::ops::bytes::FromBytes\">FromBytes</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::FromBytes::Bytes\">Bytes</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Create a number from its memory representation as a byte array in native endianness. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.FromBytes.html#method.from_ne_bytes\">Read more</a></div></details></div></details>","FromBytes","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromBytes-for-u16\" class=\"impl\"><a href=\"#impl-FromBytes-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromBytes for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ref_from_bytes\" class=\"method trait-impl\"><a href=\"#method.ref_from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ref_from_bytes</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + Immutable,</div></h4></section></summary><div class='docblock'>Interprets the given <code>source</code> as a <code>&amp;Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ref_from_prefix\" class=\"method trait-impl\"><a href=\"#method.ref_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ref_from_prefix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;Self, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + Immutable,</div></h4></section></summary><div class='docblock'>Interprets the prefix of the given <code>source</code> as a <code>&amp;Self</code> without\ncopying. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ref_from_suffix\" class=\"method trait-impl\"><a href=\"#method.ref_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ref_from_suffix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], &amp;Self), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;<div class=\"where\">where\n    Self: Immutable + KnownLayout,</div></h4></section></summary><div class='docblock'>Interprets the suffix of the given bytes as a <code>&amp;Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mut_from_bytes\" class=\"method trait-impl\"><a href=\"#method.mut_from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_from_bytes</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;<div class=\"where\">where\n    Self: IntoBytes + KnownLayout,</div></h4></section></summary><div class='docblock'>Interprets the given <code>source</code> as a <code>&amp;mut Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mut_from_prefix\" class=\"method trait-impl\"><a href=\"#method.mut_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_from_prefix</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut Self, &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;<div class=\"where\">where\n    Self: IntoBytes + KnownLayout,</div></h4></section></summary><div class='docblock'>Interprets the prefix of the given <code>source</code> as a <code>&amp;mut Self</code> without\ncopying. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mut_from_suffix\" class=\"method trait-impl\"><a href=\"#method.mut_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_from_suffix</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], &amp;mut Self), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;<div class=\"where\">where\n    Self: IntoBytes + KnownLayout,</div></h4></section></summary><div class='docblock'>Interprets the suffix of the given <code>source</code> as a <code>&amp;mut Self</code> without\ncopying. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ref_from_bytes_with_elems\" class=\"method trait-impl\"><a href=\"#method.ref_from_bytes_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ref_from_bytes_with_elems</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Interprets the given <code>source</code> as a <code>&amp;Self</code> with a DST length equal to\n<code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ref_from_prefix_with_elems\" class=\"method trait-impl\"><a href=\"#method.ref_from_prefix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ref_from_prefix_with_elems</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;Self, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Interprets the prefix of the given <code>source</code> as a DST <code>&amp;Self</code> with length\nequal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ref_from_suffix_with_elems\" class=\"method trait-impl\"><a href=\"#method.ref_from_suffix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ref_from_suffix_with_elems</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], &amp;Self), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Interprets the suffix of the given <code>source</code> as a DST <code>&amp;Self</code> with length\nequal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mut_from_bytes_with_elems\" class=\"method trait-impl\"><a href=\"#method.mut_from_bytes_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_from_bytes_with_elems</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;<div class=\"where\">where\n    Self: IntoBytes + KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Interprets the given <code>source</code> as a <code>&amp;mut Self</code> with a DST length equal\nto <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mut_from_prefix_with_elems\" class=\"method trait-impl\"><a href=\"#method.mut_from_prefix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_from_prefix_with_elems</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut Self, &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;<div class=\"where\">where\n    Self: IntoBytes + KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class='docblock'>Interprets the prefix of the given <code>source</code> as a <code>&amp;mut Self</code> with DST\nlength equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mut_from_suffix_with_elems\" class=\"method trait-impl\"><a href=\"#method.mut_from_suffix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mut_from_suffix_with_elems</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], &amp;mut Self), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>&gt;&gt;<div class=\"where\">where\n    Self: IntoBytes + KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class='docblock'>Interprets the suffix of the given <code>source</code> as a <code>&amp;mut Self</code> with DST\nlength equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_from_bytes\" class=\"method trait-impl\"><a href=\"#method.read_from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read_from_bytes</a>(source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Reads a copy of <code>Self</code> from the given <code>source</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_from_prefix\" class=\"method trait-impl\"><a href=\"#method.read_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read_from_prefix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(Self, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]), SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Reads a copy of <code>Self</code> from the prefix of the given <code>source</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_from_suffix\" class=\"method trait-impl\"><a href=\"#method.read_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read_from_suffix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self), SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Reads a copy of <code>Self</code> from the suffix of the given <code>source</code>. <a>Read more</a></div></details></div></details>","FromBytes","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromOtherTypeSlice%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-FromOtherTypeSlice%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromOtherTypeSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_other_type_slice\" class=\"method trait-impl\"><a href=\"#method.from_other_type_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_other_type_slice</a>(xs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a slice of one type of unsigned integer to a single value of a smaller\nunsigned type.</p>\n<p>$$\nf((x_k)_{k=0}^{n-1}) = \\begin{cases}\n0 &amp; \\text{if} \\quad n = 0, \\\\\ny &amp; \\text{otherwise},\n\\end{cases}\n$$\nwhere $0 \\leq y &lt; 2^W$, $x = y + k2^W$ for some integer $k$, and $W$ is the width of\nthe output type.</p>\n<p>The slice is interpreted as the base-$2^W$ digits of the value, in ascending order,\nwhere $W$ is the width of the type. If the slice is empty, the output value is 0;\notherwise, it consists of the least-significant bits of the first element of the\nslice.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#from_other_type_slice\">here</a>.</p>\n</div></details></div></details>","FromOtherTypeSlice<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromOtherTypeSlice%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-FromOtherTypeSlice%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromOtherTypeSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_other_type_slice\" class=\"method trait-impl\"><a href=\"#method.from_other_type_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_other_type_slice</a>(xs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a slice of one type of value to a single value of the same type.</p>\n<p>$$\nf((x_k)_{k=0}^{n-1}) = \\begin{cases}\n0 &amp; \\text{if} \\quad n = 0, \\\\\nx_0 &amp; \\text{otherwise},\n\\end{cases}\n$$\nwhere $W$ is the width of the type.</p>\n<p>The slice is interpreted as the base-$2^W$ digits of the value, in ascending order,\nwhere $W$ is the width of the type. If there’s more than one element in the input\nslice, the value wraps and all elements past the first are ignored. This means that\nif the slice is empty, the output value is 0; otherwise, it’s the first element of\nthe slice.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#from_other_type_slice\">here</a>.</p>\n</div></details></div></details>","FromOtherTypeSlice<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromOtherTypeSlice%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-FromOtherTypeSlice%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromOtherTypeSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_other_type_slice\" class=\"method trait-impl\"><a href=\"#method.from_other_type_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_other_type_slice</a>(xs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a slice of one type of unsigned integer to a single value of a smaller\nunsigned type.</p>\n<p>$$\nf((x_k)_{k=0}^{n-1}) = \\begin{cases}\n0 &amp; \\text{if} \\quad n = 0, \\\\\ny &amp; \\text{otherwise},\n\\end{cases}\n$$\nwhere $0 \\leq y &lt; 2^W$, $x = y + k2^W$ for some integer $k$, and $W$ is the width of\nthe output type.</p>\n<p>The slice is interpreted as the base-$2^W$ digits of the value, in ascending order,\nwhere $W$ is the width of the type. If the slice is empty, the output value is 0;\notherwise, it consists of the least-significant bits of the first element of the\nslice.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#from_other_type_slice\">here</a>.</p>\n</div></details></div></details>","FromOtherTypeSlice<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromOtherTypeSlice%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-FromOtherTypeSlice%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromOtherTypeSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_other_type_slice\" class=\"method trait-impl\"><a href=\"#method.from_other_type_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_other_type_slice</a>(xs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a slice of one type of unsigned integer to a single value of a smaller\nunsigned type.</p>\n<p>$$\nf((x_k)_{k=0}^{n-1}) = \\begin{cases}\n0 &amp; \\text{if} \\quad n = 0, \\\\\ny &amp; \\text{otherwise},\n\\end{cases}\n$$\nwhere $0 \\leq y &lt; 2^W$, $x = y + k2^W$ for some integer $k$, and $W$ is the width of\nthe output type.</p>\n<p>The slice is interpreted as the base-$2^W$ digits of the value, in ascending order,\nwhere $W$ is the width of the type. If the slice is empty, the output value is 0;\notherwise, it consists of the least-significant bits of the first element of the\nslice.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#from_other_type_slice\">here</a>.</p>\n</div></details></div></details>","FromOtherTypeSlice<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromOtherTypeSlice%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-FromOtherTypeSlice%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromOtherTypeSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_other_type_slice\" class=\"method trait-impl\"><a href=\"#method.from_other_type_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_other_type_slice</a>(xs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a slice of one type of unsigned integer to a single value of a larger\nunsigned type.</p>\n<p>Let $V$ be the the width of the input type and $W$ the width of the output type.</p>\n<p>$f((x_k)_{k=0}^{n-1}) = y$, where $y &lt; 2^W$ and</p>\n<p>$$\ny = k2^W + \\sum_{j=0}^{n-1}2^{jV}x_j\n$$</p>\n<p>for some integer $k$.</p>\n<p>If the input slice contains more values than necessary to build an output value, the\ntrailing values are ignored. If the input slice contains too few values to build an\noutput value, the most-significant bits of the output value are set to 0.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#from_other_type_slice\">here</a>.</p>\n</div></details></div></details>","FromOtherTypeSlice<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromOtherTypeSlice%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-FromOtherTypeSlice%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromOtherTypeSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_other_type_slice\" class=\"method trait-impl\"><a href=\"#method.from_other_type_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_other_type_slice</a>(xs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a slice of one type of unsigned integer to a single value of a smaller\nunsigned type.</p>\n<p>$$\nf((x_k)_{k=0}^{n-1}) = \\begin{cases}\n0 &amp; \\text{if} \\quad n = 0, \\\\\ny &amp; \\text{otherwise},\n\\end{cases}\n$$\nwhere $0 \\leq y &lt; 2^W$, $x = y + k2^W$ for some integer $k$, and $W$ is the width of\nthe output type.</p>\n<p>The slice is interpreted as the base-$2^W$ digits of the value, in ascending order,\nwhere $W$ is the width of the type. If the slice is empty, the output value is 0;\notherwise, it consists of the least-significant bits of the first element of the\nslice.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#from_other_type_slice\">here</a>.</p>\n</div></details></div></details>","FromOtherTypeSlice<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromPrimitive-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#impl-FromPrimitive-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html\" title=\"trait num_traits::cast::FromPrimitive\">FromPrimitive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_isize\" class=\"fn\">from_isize</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>isize</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i8\" class=\"fn\">from_i8</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>i8</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i16\" class=\"fn\">from_i16</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>i16</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i32\" class=\"fn\">from_i32</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>i32</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#tymethod.from_i64\" class=\"fn\">from_i64</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>i64</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i128\" class=\"fn\">from_i128</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>i128</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_i128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_usize\" class=\"fn\">from_usize</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts a <code>usize</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u8\" class=\"fn\">from_u8</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>u8</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u16\" class=\"fn\">from_u16</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>u16</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u32\" class=\"fn\">from_u32</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>u32</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#tymethod.from_u64\" class=\"fn\">from_u64</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>u64</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u128\" class=\"fn\">from_u128</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts an <code>u128</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_u128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_f32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_f32\" class=\"fn\">from_f32</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts a <code>f32</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_f64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#568\">Source</a><a href=\"#method.from_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_f64\" class=\"fn\">from_f64</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts a <code>f64</code> to return an optional value of this type. If the\nvalue cannot be represented by this type, then <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.FromPrimitive.html#method.from_f64\">Read more</a></div></details></div></details>","FromPrimitive","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromSciString-for-u16\" class=\"impl\"><a href=\"#impl-FromSciString-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromSciString for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sci_string_with_options\" class=\"method trait-impl\"><a href=\"#method.from_sci_string_with_options\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sci_string_with_options</a>(\n    s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>,\n    options: FromSciStringOptions,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a [<code>String</code>], possibly in scientfic notation, to a primitive integer.</p>\n<p>Use [<code>FromSciStringOptions</code>] to specify the base (from 2 to 36, inclusive) and the\nrounding mode, in case rounding is necessary because the string represents a\nnon-integer.</p>\n<p>If the base is greater than 10, the higher digits are represented by the letters\n<code>'a'</code> through <code>'z'</code> or <code>'A'</code> through <code>'Z'</code>; the case doesn’t matter and doesn’t need\nto be consistent.</p>\n<p>Exponents are allowed, and are indicated using the character <code>'e'</code> or <code>'E'</code>. If the\nbase is 15 or greater, an ambiguity arises where it may not be clear whether <code>'e'</code>\nis a digit or an exponent indicator. To resolve this ambiguity, always use a <code>'+'</code>\nor <code>'-'</code> sign after the exponent indicator when the base is 15 or greater.</p>\n<p>The exponent itself is always parsed using base 10.</p>\n<p>Decimal (or other-base) points are allowed. These are most useful in conjunction\nwith exponents, but they may be used on their own. If the string represents a\nnon-integer, the rounding mode specified in <code>options</code> is used to round to an\ninteger.</p>\n<p>If the string is unparseable or parses to an out-of-range integer, <code>None</code> is\nreturned. <code>None</code> is also returned if the rounding mode in options is <code>Exact</code>, but\nrounding is necessary.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>s.len()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from_sci_string\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sci_string\" class=\"method trait-impl\"><a href=\"#method.from_sci_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sci_string</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Converts a <code>&amp;str</code>, possibly in scientific notation, to a number, using the default\n[<code>FromSciStringOptions</code>].</div></details></div></details>","FromSciString","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1333\">Source</a></span><a href=\"#impl-FromStr-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1333\">Source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.ParseIntError.html\" title=\"struct core::num::error::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1333\">Source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.ParseIntError.html\" title=\"struct core::num::error::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.85.1/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStringBase-for-u16\" class=\"impl\"><a href=\"#impl-FromStringBase-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromStringBase for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_string_base\" class=\"method trait-impl\"><a href=\"#method.from_string_base\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_string_base</a>(base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>, s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>from_str_radix</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.from_str_radix\" title=\"associated function u32::from_str_radix\">this one</a>.</p>\n</div></details></div></details>","FromStringBase","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromWasmAbi-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#238\">Source</a><a href=\"#impl-FromWasmAbi-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::FromWasmAbi\">FromWasmAbi</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Abi\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#238\">Source</a><a href=\"#associatedtype.Abi\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#associatedtype.Abi\" class=\"associatedtype\">Abi</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The Wasm ABI type that this converts from when coming back out from the\nABI boundary.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_abi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#238\">Source</a><a href=\"#method.from_abi\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#tymethod.from_abi\" class=\"fn\">from_abi</a>(js: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Recover a <code>Self</code> from <code>Self::Abi</code>. <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.FromWasmAbi.html#tymethod.from_abi\">Read more</a></div></details></div></details>","FromWasmAbi","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromZeros-for-u16\" class=\"impl\"><a href=\"#impl-FromZeros-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl FromZeros for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zero</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Overwrites <code>self</code> with zeros. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_zeroed\" class=\"method trait-impl\"><a href=\"#method.new_zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">new_zeroed</a>() -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Creates an instance of <code>Self</code> from zeroed bytes. <a>Read more</a></div></details></div></details>","FromZeros","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Fundamental-for-u16\" class=\"impl\"><a href=\"#impl-Fundamental-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Fundamental for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bool\" class=\"method trait-impl\"><a href=\"#method.as_bool\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_bool</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests <code>self != 0</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_char\" class=\"method trait-impl\"><a href=\"#method.as_char\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_char</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.char.html\">char</a>&gt;</h4></section></summary><div class='docblock'>Represents <code>self</code> as a Unicode Scalar Value, if possible.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_i8\" class=\"method trait-impl\"><a href=\"#method.as_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_i8</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a></h4></section></summary><div class='docblock'>Performs <code>self as i8</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_i16\" class=\"method trait-impl\"><a href=\"#method.as_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_i16</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a></h4></section></summary><div class='docblock'>Performs <code>self as i16</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_i32\" class=\"method trait-impl\"><a href=\"#method.as_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_i32</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs <code>self as i32</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_i64\" class=\"method trait-impl\"><a href=\"#method.as_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_i64</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a></h4></section></summary><div class='docblock'>Performs <code>self as i64</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_i128\" class=\"method trait-impl\"><a href=\"#method.as_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_i128</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a></h4></section></summary><div class='docblock'>Performs <code>self as i128</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_isize\" class=\"method trait-impl\"><a href=\"#method.as_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_isize</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a></h4></section></summary><div class='docblock'>Performs <code>self as isize</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_u8\" class=\"method trait-impl\"><a href=\"#method.as_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_u8</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a></h4></section></summary><div class='docblock'>Performs <code>self as u8</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_u16\" class=\"method trait-impl\"><a href=\"#method.as_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_u16</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs <code>self as u16</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_u32\" class=\"method trait-impl\"><a href=\"#method.as_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_u32</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Performs <code>self as u32</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_u64\" class=\"method trait-impl\"><a href=\"#method.as_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_u64</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Performs <code>self as u64</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_u128\" class=\"method trait-impl\"><a href=\"#method.as_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_u128</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a></h4></section></summary><div class='docblock'>Performs <code>self as u128</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_usize\" class=\"method trait-impl\"><a href=\"#method.as_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_usize</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Performs <code>self as usize</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_f32\" class=\"method trait-impl\"><a href=\"#method.as_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_f32</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a></h4></section></summary><div class='docblock'>Performs <code>self as f32</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_f64\" class=\"method trait-impl\"><a href=\"#method.as_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_f64</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Performs <code>self as f64</code>.</div></details></div></details>","Fundamental","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Gcd-for-u16\" class=\"impl\"><a href=\"#impl-Gcd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Gcd for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.gcd\" class=\"method trait-impl\"><a href=\"#method.gcd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gcd</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Computes the GCD (greatest common divisor) of two numbers.</p>\n<p>The GCD of 0 and $n$, for any $n$, is 0. In particular, $\\gcd(0, 0) = 0$, which\nmakes sense if we interpret “greatest” to mean “greatest by the divisibility order”.</p>\n<p>$$\nf(x, y) = \\gcd(x, y).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n^2)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>max(self.significant_bits(), other.significant_bits())</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::gcd#gcd\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","Gcd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GcdAssign-for-u16\" class=\"impl\"><a href=\"#impl-GcdAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl GcdAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.gcd_assign\" class=\"method trait-impl\"><a href=\"#method.gcd_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gcd_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Replaces another with the GCD (greatest common divisor) of it and another number.</p>\n<p>The GCD of 0 and $n$, for any $n$, is 0. In particular, $\\gcd(0, 0) = 0$, which\nmakes sense if we interpret “greatest” to mean “greatest by the divisibility order”.</p>\n<p>$$\nx \\gets \\gcd(x, y).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n^2)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>max(self.significant_bits(), other.significant_bits())</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::gcd#gcd_assign\">here</a>.</p>\n</div></details></div></details>","GcdAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HammingDistance-for-u16\" class=\"impl\"><a href=\"#impl-HammingDistance-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl HammingDistance for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hamming_distance\" class=\"method trait-impl\"><a href=\"#method.hamming_distance\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hamming_distance</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the Hamming distance between two numbers, or the number of bit flips needed\nto turn one into the other.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::hamming_distance#hamming_distance\">here</a>.</p>\n</div></details></div></details>","HammingDistance","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasHalf-for-u16\" class=\"impl\"><a href=\"#impl-HasHalf-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl HasHalf for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Half\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Half\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Half</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>The primitive integer type whose width is half of <code>Self</code>’s.</p>\n</div></details></div></details>","HasHalf","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-u16\" class=\"impl\"><a href=\"#impl-Hash-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Hash for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: Hasher,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <code>Hasher</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: Hasher,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <code>Hasher</code>.</div></details></div></details>","Hash","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/hash/mod.rs.html#832-845\">Source</a></span><a href=\"#impl-Hash-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/hash/mod.rs.html#832-845\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/hash/mod.rs.html#832-845\">Source</a><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.85.1/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Integer-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/itoa/1.0.15/src/itoa/lib.rs.html#217\">Source</a><a href=\"#impl-Integer-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/itoa/1.0.15/itoa/trait.Integer.html\" title=\"trait itoa::Integer\">Integer</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX_STR_LEN\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/itoa/1.0.15/src/itoa/lib.rs.html#217\">Source</a><a href=\"#associatedconstant.MAX_STR_LEN\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://docs.rs/itoa/1.0.15/itoa/trait.Integer.html#associatedconstant.MAX_STR_LEN\" class=\"constant\">MAX_STR_LEN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a> = 5usize</h4></section></summary><div class='docblock'>The maximum length of string that formatting an integer of this type can\nproduce on the current target platform.</div></details></div></details>","Integer","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Integer-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#1053\">Source</a><a href=\"#impl-Integer-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html\" title=\"trait num_integer::Integer\">Integer</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#1053\">Source</a><a href=\"#method.div_floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.div_floor\" class=\"fn\">div_floor</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Unsigned integer division. Returns the same result as <code>div</code> (<code>/</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#1053\">Source</a><a href=\"#method.mod_floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.mod_floor\" class=\"fn\">mod_floor</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Unsigned integer modulo operation. Returns the same result as <code>rem</code> (<code>%</code>).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gcd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#1053\">Source</a><a href=\"#method.gcd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.gcd\" class=\"fn\">gcd</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Calculates the Greatest Common Divisor (GCD) of the number and <code>other</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lcm\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#1053\">Source</a><a href=\"#method.lcm\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.lcm\" class=\"fn\">lcm</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Calculates the Lowest Common Multiple (LCM) of the number and <code>other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gcd_lcm\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#1053\">Source</a><a href=\"#method.gcd_lcm\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.gcd_lcm\" class=\"fn\">gcd_lcm</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the Greatest Common Divisor (GCD) and\nLowest Common Multiple (LCM) of the number and <code>other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_multiple_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#1053\">Source</a><a href=\"#method.is_multiple_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.is_multiple_of\" class=\"fn\">is_multiple_of</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the number is a multiple of <code>other</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_even\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#1053\">Source</a><a href=\"#method.is_even\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.is_even\" class=\"fn\">is_even</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the number is divisible by <code>2</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_odd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#1053\">Source</a><a href=\"#method.is_odd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.is_odd\" class=\"fn\">is_odd</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if the number is not divisible by <code>2</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#1053\">Source</a><a href=\"#method.div_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#tymethod.div_rem\" class=\"fn\">div_rem</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Simultaneous truncated integer division and modulus.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#1053\">Source</a><a href=\"#method.div_ceil\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.div_ceil\" class=\"fn\">div_ceil</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Ceiled integer division. <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.div_ceil\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extended_gcd_lcm\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#1053\">Source</a><a href=\"#method.extended_gcd_lcm\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.extended_gcd_lcm\" class=\"fn\">extended_gcd_lcm</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"struct\" href=\"https://docs.rs/num-integer/0.1/num_integer/struct.ExtendedGcd.html\" title=\"struct num_integer::ExtendedGcd\">ExtendedGcd</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Greatest common divisor, least common multiple, and Bézout coefficients.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extended_gcd\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#159-161\">Source</a><a href=\"#method.extended_gcd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.extended_gcd\" class=\"fn\">extended_gcd</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-integer/0.1/num_integer/struct.ExtendedGcd.html\" title=\"struct num_integer::ExtendedGcd\">ExtendedGcd</a>&lt;Self&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Greatest common divisor and Bézout coefficients. <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.extended_gcd\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.divides\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#206\">Source</a><a href=\"#method.divides\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.divides\" class=\"fn\">divides</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated: Please use is_multiple_of instead</span></div></span><div class='docblock'>Deprecated, use <code>is_multiple_of</code> instead.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_mod_floor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#279\">Source</a><a href=\"#method.div_mod_floor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.div_mod_floor\" class=\"fn\">div_mod_floor</a>(&amp;self, other: &amp;Self) -&gt; (Self, Self)</h4></section></summary><div class='docblock'>Simultaneous floored integer division and modulus.\nReturns <code>(quotient, remainder)</code>. <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.div_mod_floor\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#303-305\">Source</a><a href=\"#method.next_multiple_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.next_multiple_of\" class=\"fn\">next_multiple_of</a>(&amp;self, other: &amp;Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Rounds up to nearest multiple of argument. <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.next_multiple_of\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.prev_multiple_of\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#336-338\">Source</a><a href=\"#method.prev_multiple_of\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.prev_multiple_of\" class=\"fn\">prev_multiple_of</a>(&amp;self, other: &amp;Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Rounds down to nearest multiple of argument. <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.prev_multiple_of\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.dec\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#353-355\">Source</a><a href=\"#method.dec\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.dec\" class=\"fn\">dec</a>(&amp;mut self)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Decrements self by one. <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.dec\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inc\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/lib.rs.html#370-372\">Source</a><a href=\"#method.inc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.inc\" class=\"fn\">inc</a>(&amp;mut self)<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class='docblock'>Increments self by one. <a href=\"https://docs.rs/num-integer/0.1/num_integer/trait.Integer.html#method.inc\">Read more</a></div></details></div></details>","Integer","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Integer-for-u16\" class=\"impl\"><a href=\"#impl-Integer-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Integer for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MIN\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 0u16</h4></section></summary><div class='docblock'>The smallest value that can be represented by this integer type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MAX\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 65_535u16</h4></section></summary><div class='docblock'>The largest value that can be represented by this integer type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a> = 16u32</h4></section></summary><div class='docblock'>The size of this integer type in bits.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix\" class=\"method trait-impl\"><a href=\"#method.from_str_radix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.ParseIntError.html\" title=\"struct core::num::error::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.from_str_radix\" title=\"associated function u128::from_str_radix\"><code>u128::from_str_radix</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method trait-impl\"><a href=\"#method.count_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.count_ones\" title=\"method u128::count_ones\"><code>u128::count_ones</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros\" class=\"method trait-impl\"><a href=\"#method.count_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.count_zeros\" title=\"method u128::count_zeros\"><code>u128::count_zeros</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method trait-impl\"><a href=\"#method.leading_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.leading_zeros\" title=\"method u128::leading_zeros\"><code>u128::leading_zeros</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method trait-impl\"><a href=\"#method.trailing_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.trailing_zeros\" title=\"method u128::trailing_zeros\"><code>u128::trailing_zeros</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones\" class=\"method trait-impl\"><a href=\"#method.leading_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.leading_ones\" title=\"method u128::leading_ones\"><code>u128::leading_ones</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones\" class=\"method trait-impl\"><a href=\"#method.trailing_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.trailing_ones\" title=\"method u128::trailing_ones\"><code>u128::trailing_ones</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method trait-impl\"><a href=\"#method.rotate_left\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.rotate_left\" title=\"method u128::rotate_left\"><code>u128::rotate_left</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method trait-impl\"><a href=\"#method.rotate_right\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.rotate_right\" title=\"method u128::rotate_right\"><code>u128::rotate_right</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method trait-impl\"><a href=\"#method.swap_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.swap_bytes\" title=\"method u128::swap_bytes\"><code>u128::swap_bytes</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method trait-impl\"><a href=\"#method.reverse_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.reverse_bits\" title=\"method u128::reverse_bits\"><code>u128::reverse_bits</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method trait-impl\"><a href=\"#method.from_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.from_be\" title=\"associated function u128::from_be\"><code>u128::from_be</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method trait-impl\"><a href=\"#method.from_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.from_le\" title=\"associated function u128::from_le\"><code>u128::from_le</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method trait-impl\"><a href=\"#method.to_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.to_be\" title=\"method u128::to_be\"><code>u128::to_be</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method trait-impl\"><a href=\"#method.to_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.to_le\" title=\"method u128::to_le\"><code>u128::to_le</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method trait-impl\"><a href=\"#method.checked_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.checked_add\" title=\"method u128::checked_add\"><code>u128::checked_add</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method trait-impl\"><a href=\"#method.checked_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.checked_sub\" title=\"method u128::checked_sub\"><code>u128::checked_sub</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method trait-impl\"><a href=\"#method.checked_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.checked_mul\" title=\"method u128::checked_mul\"><code>u128::checked_mul</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div\" class=\"method trait-impl\"><a href=\"#method.checked_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.checked_div\" title=\"method u128::checked_div\"><code>u128::checked_div</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid\" class=\"method trait-impl\"><a href=\"#method.checked_div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.checked_div_euclid\" title=\"method u128::checked_div_euclid\"><code>u128::checked_div_euclid</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem\" class=\"method trait-impl\"><a href=\"#method.checked_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.checked_rem\" title=\"method u128::checked_rem\"><code>u128::checked_rem</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid\" class=\"method trait-impl\"><a href=\"#method.checked_rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.checked_rem_euclid\" title=\"method u128::checked_rem_euclid\"><code>u128::checked_rem_euclid</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method trait-impl\"><a href=\"#method.checked_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.checked_neg\" title=\"method u128::checked_neg\"><code>u128::checked_neg</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl\" class=\"method trait-impl\"><a href=\"#method.checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.checked_shl\" title=\"method u128::checked_shl\"><code>u128::checked_shl</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr\" class=\"method trait-impl\"><a href=\"#method.checked_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.checked_shr\" title=\"method u128::checked_shr\"><code>u128::checked_shr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method trait-impl\"><a href=\"#method.checked_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.checked_pow\" title=\"method u128::checked_pow\"><code>u128::checked_pow</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method trait-impl\"><a href=\"#method.saturating_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.saturating_add\" title=\"method u128::saturating_add\"><code>u128::saturating_add</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method trait-impl\"><a href=\"#method.saturating_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.saturating_sub\" title=\"method u128::saturating_sub\"><code>u128::saturating_sub</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method trait-impl\"><a href=\"#method.saturating_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.saturating_mul\" title=\"method u128::saturating_mul\"><code>u128::saturating_mul</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method trait-impl\"><a href=\"#method.saturating_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.saturating_pow\" title=\"method u128::saturating_pow\"><code>u128::saturating_pow</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add\" class=\"method trait-impl\"><a href=\"#method.wrapping_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.wrapping_add\" title=\"method u128::wrapping_add\"><code>u128::wrapping_add</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub\" class=\"method trait-impl\"><a href=\"#method.wrapping_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.wrapping_sub\" title=\"method u128::wrapping_sub\"><code>u128::wrapping_sub</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul\" class=\"method trait-impl\"><a href=\"#method.wrapping_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.wrapping_mul\" title=\"method u128::wrapping_mul\"><code>u128::wrapping_mul</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div\" class=\"method trait-impl\"><a href=\"#method.wrapping_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.wrapping_div\" title=\"method u128::wrapping_div\"><code>u128::wrapping_div</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid\" class=\"method trait-impl\"><a href=\"#method.wrapping_div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.wrapping_div_euclid\" title=\"method u128::wrapping_div_euclid\"><code>u128::wrapping_div_euclid</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem\" class=\"method trait-impl\"><a href=\"#method.wrapping_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.wrapping_rem\" title=\"method u128::wrapping_rem\"><code>u128::wrapping_rem</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid\" class=\"method trait-impl\"><a href=\"#method.wrapping_rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.wrapping_rem_euclid\" title=\"method u128::wrapping_rem_euclid\"><code>u128::wrapping_rem_euclid</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method trait-impl\"><a href=\"#method.wrapping_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.wrapping_neg\" title=\"method u128::wrapping_neg\"><code>u128::wrapping_neg</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl\" class=\"method trait-impl\"><a href=\"#method.wrapping_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.wrapping_shl\" title=\"method u128::wrapping_shl\"><code>u128::wrapping_shl</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr\" class=\"method trait-impl\"><a href=\"#method.wrapping_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.wrapping_shr\" title=\"method u128::wrapping_shr\"><code>u128::wrapping_shr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow\" class=\"method trait-impl\"><a href=\"#method.wrapping_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.wrapping_pow\" title=\"method u128::wrapping_pow\"><code>u128::wrapping_pow</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add\" class=\"method trait-impl\"><a href=\"#method.overflowing_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.overflowing_add\" title=\"method u128::overflowing_add\"><code>u128::overflowing_add</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub\" class=\"method trait-impl\"><a href=\"#method.overflowing_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.overflowing_sub\" title=\"method u128::overflowing_sub\"><code>u128::overflowing_sub</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul\" class=\"method trait-impl\"><a href=\"#method.overflowing_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.overflowing_mul\" title=\"method u128::overflowing_mul\"><code>u128::overflowing_mul</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div\" class=\"method trait-impl\"><a href=\"#method.overflowing_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.overflowing_div\" title=\"method u128::overflowing_div\"><code>u128::overflowing_div</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid\" class=\"method trait-impl\"><a href=\"#method.overflowing_div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.overflowing_div_euclid\" title=\"method u128::overflowing_div_euclid\"><code>u128::overflowing_div_euclid</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem\" class=\"method trait-impl\"><a href=\"#method.overflowing_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.overflowing_rem\" title=\"method u128::overflowing_rem\"><code>u128::overflowing_rem</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid\" class=\"method trait-impl\"><a href=\"#method.overflowing_rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.overflowing_rem_euclid\" title=\"method u128::overflowing_rem_euclid\"><code>u128::overflowing_rem_euclid</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method trait-impl\"><a href=\"#method.overflowing_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.overflowing_neg\" title=\"method u128::overflowing_neg\"><code>u128::overflowing_neg</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr\" class=\"method trait-impl\"><a href=\"#method.overflowing_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.overflowing_shr\" title=\"method u128::overflowing_shr\"><code>u128::overflowing_shr</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow\" class=\"method trait-impl\"><a href=\"#method.overflowing_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.overflowing_pow\" title=\"method u128::overflowing_pow\"><code>u128::overflowing_pow</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.pow\" title=\"method u128::pow\"><code>u128::pow</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid\" class=\"method trait-impl\"><a href=\"#method.div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.div_euclid\" title=\"method u128::div_euclid\"><code>u128::div_euclid</code></a>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid\" class=\"method trait-impl\"><a href=\"#method.rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>See <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html#method.rem_euclid\" title=\"method u128::rem_euclid\"><code>u128::rem_euclid</code></a>.</div></details></div></details>","Integer","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntegerMantissaAndExponent%3Cu16,+u64%3E-for-u16\" class=\"impl\"><a href=\"#impl-IntegerMantissaAndExponent%3Cu16,+u64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl IntegerMantissaAndExponent&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.integer_mantissa_and_exponent\" class=\"method trait-impl\"><a href=\"#method.integer_mantissa_and_exponent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">integer_mantissa_and_exponent</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Returns the integer mantissa and exponent.</p>\n<p>When $x$ is nonzero, we can write $x = 2^{e_i}m_i$, where $e_i$ is an integer and\n$m_i$ is an odd integer.\n$$\nf(x) = (\\frac{|x|}{2^{e_i}}, e_i),\n$$\nwhere $e_i$ is the unique integer such that $x/2^{e_i}$ is an odd integer.</p>\n<p>The inverse operation is\n<a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.from_integer_mantissa_and_exponent\" title=\"associated function u16::from_integer_mantissa_and_exponent\"><code>from_integer_mantissa_and_exponent</code></a>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mantissa_and_exponent#integer_mantissa_and_exponent\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.integer_mantissa\" class=\"method trait-impl\"><a href=\"#method.integer_mantissa\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">integer_mantissa</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Returns the integer mantissa.</p>\n<p>When $x$ is nonzero, we can write $x = 2^{e_i}m_i$, where $e_i$ is an integer and\n$m_i$ is an odd integer.\n$$\nf(x) = \\frac{|x|}{2^{e_i}},\n$$\nwhere $e_i$ is the unique integer such that $x/2^{e_i}$ is an odd integer.</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is zero.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::mantissa_and_exponent#integer_mantissa\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.integer_exponent\" class=\"method trait-impl\"><a href=\"#method.integer_exponent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">integer_exponent</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the integer exponent.</p>\n<p>When $x$ is nonzero, we can write $x = 2^{e_i}m_i$, where $e_i$ is an integer and\n$m_i$ is an odd integer.\n$$\nf(x) = e_i,\n$$\nwhere $e_i$ is the unique integer such that $x/2^{e_i}$ is an odd integer.</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is zero.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::mantissa_and_exponent#integer_exponent\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_integer_mantissa_and_exponent\" class=\"method trait-impl\"><a href=\"#method.from_integer_mantissa_and_exponent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_integer_mantissa_and_exponent</a>(\n    integer_mantissa: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    integer_exponent: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs an unsigned primitive integer from its integer mantissa and exponent.</p>\n<p>When $x$ is nonzero, we can write $x = 2^{e_i}m_i$, where $e_i$ is an integer and\n$m_i$ is an odd integer.</p>\n<p>$$\nf(x) = 2^{e_i}m_i,\n$$\nor <code>None</code> if the result cannot be exactly represented as an integer of the desired\ntype (this happens if the exponent is too large).</p>\n<p>The input does not have to be reduced; that is to say, the mantissa does not have to\nbe odd.</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::mantissa_and_exponent#from_integer_mantissa_and_exponent\">here</a>.</p>\n</div></details></div></details>","IntegerMantissaAndExponent<u16, u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Integral-for-u16\" class=\"impl\"><a href=\"#impl-Integral-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Integral for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.ZERO\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.ZERO\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">ZERO</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 0u16</h4></section></summary><div class='docblock'>The type’s zero value.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.ONE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.ONE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">ONE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 1u16</h4></section></summary><div class='docblock'>The type’s step value.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MIN\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 0u16</h4></section></summary><div class='docblock'>The type’s minimum value. This is zero for unsigned integers.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MAX\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 65_535u16</h4></section></summary><div class='docblock'>The type’s maximum value.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.BITS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a> = 16u32</h4></section></summary><div class='docblock'>The size of this type in bits.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method trait-impl\"><a href=\"#method.min_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns the smallest value that can be represented by this integer type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method trait-impl\"><a href=\"#method.max_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns the largest value that can be represented by this integer type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix\" class=\"method trait-impl\"><a href=\"#method.from_str_radix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.ParseIntError.html\" title=\"struct core::num::error::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Converts a string slice in a given base to an integer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method trait-impl\"><a href=\"#method.count_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the number of ones in the binary representation of <code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros\" class=\"method trait-impl\"><a href=\"#method.count_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the number of zeros in the binary representation of <code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method trait-impl\"><a href=\"#method.leading_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the number of leading zeros in the binary representation of\n<code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method trait-impl\"><a href=\"#method.trailing_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the number of trailing zeros in the binary representation of\n<code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones\" class=\"method trait-impl\"><a href=\"#method.leading_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the number of leading ones in the binary representation of\n<code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones\" class=\"method trait-impl\"><a href=\"#method.trailing_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the number of trailing ones in the binary representation of\n<code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method trait-impl\"><a href=\"#method.rotate_left\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Shifts the bits to the left by a specified amount, <code>n</code>, wrapping the\ntruncated bits to the end of the resulting integer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method trait-impl\"><a href=\"#method.rotate_right\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Shifts the bits to the right by a specified amount, <code>n</code>, wrapping the\ntruncated bits to the beginning of the resulting integer. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method trait-impl\"><a href=\"#method.swap_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Reverses the byte order of the integer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method trait-impl\"><a href=\"#method.reverse_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Reverses the bit pattern of the integer.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method trait-impl\"><a href=\"#method.from_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_be</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts an integer from big endian to the target’s endianness. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method trait-impl\"><a href=\"#method.from_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_le</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts an integer frm little endian to the target’s endianness. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method trait-impl\"><a href=\"#method.to_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts <code>self</code> to big endian from the target’s endianness. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method trait-impl\"><a href=\"#method.to_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Converts <code>self</code> to little endian from the target’s endianness. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method trait-impl\"><a href=\"#method.checked_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code> if\noverflow occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method trait-impl\"><a href=\"#method.checked_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked integer subtraction. Computes <code>self - rhs</code>, returning <code>None</code> if\noverflow occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method trait-impl\"><a href=\"#method.checked_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked integer multiplication. Computes <code>self * rhs</code>, returning <code>None</code>\nif overflow occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div\" class=\"method trait-impl\"><a href=\"#method.checked_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid\" class=\"method trait-impl\"><a href=\"#method.checked_div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, returning\n<code>None</code> if <code>rhs == 0</code> or the division results in overflow.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem\" class=\"method trait-impl\"><a href=\"#method.checked_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid\" class=\"method trait-impl\"><a href=\"#method.checked_rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, returning\n<code>None</code> if <code>rhs == 0</code> or the division results in overflow.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method trait-impl\"><a href=\"#method.checked_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked negation. Computes <code>-self</code>, returning <code>None</code> if <code>self == MIN</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl\" class=\"method trait-impl\"><a href=\"#method.checked_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> if <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr\" class=\"method trait-impl\"><a href=\"#method.checked_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> if <code>rhs</code>\nis larger than or equal to the number of bits in <code>self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method trait-impl\"><a href=\"#method.checked_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method trait-impl\"><a href=\"#method.saturating_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Saturating integer addition. Computes <code>self + rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method trait-impl\"><a href=\"#method.saturating_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method trait-impl\"><a href=\"#method.saturating_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Saturating integer multiplication. Computes <code>self * rhs</code>, saturating at\nthe numeric bounds instead of overflowing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method trait-impl\"><a href=\"#method.saturating_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>, saturating\nat the numeric bounds instead of overflowing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add\" class=\"method trait-impl\"><a href=\"#method.wrapping_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping around at\nthe boundary of the type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub\" class=\"method trait-impl\"><a href=\"#method.wrapping_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping (modular) subtraction. Computes <code>self - rhs</code>, wrapping around\nat the boundary of the type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul\" class=\"method trait-impl\"><a href=\"#method.wrapping_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping\naround at the boundary of the type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div\" class=\"method trait-impl\"><a href=\"#method.wrapping_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping around at\nthe boundary of the type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid\" class=\"method trait-impl\"><a href=\"#method.wrapping_div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>, wrapping\naround at the boundary of the type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem\" class=\"method trait-impl\"><a href=\"#method.wrapping_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping (modular) remainder. Computes <code>self % rhs</code>, wrapping around at\nthe boundary of the type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid\" class=\"method trait-impl\"><a href=\"#method.wrapping_rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, wrapping\naround at the boundary of the type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method trait-impl\"><a href=\"#method.wrapping_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the\nboundary of the type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl\" class=\"method trait-impl\"><a href=\"#method.wrapping_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to\nexceed the bit-width of the type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr\" class=\"method trait-impl\"><a href=\"#method.wrapping_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to\nexceed the bit-width of the type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow\" class=\"method trait-impl\"><a href=\"#method.wrapping_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>, wrapping\naround at the boundary of the type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add\" class=\"method trait-impl\"><a href=\"#method.overflowing_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Calculates <code>self + rhs</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub\" class=\"method trait-impl\"><a href=\"#method.overflowing_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Calculates <code>self - rhs</code> <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul\" class=\"method trait-impl\"><a href=\"#method.overflowing_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Calculates the multiplication of <code>self</code> and <code>rhs</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div\" class=\"method trait-impl\"><a href=\"#method.overflowing_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid\" class=\"method trait-impl\"><a href=\"#method.overflowing_div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem\" class=\"method trait-impl\"><a href=\"#method.overflowing_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid\" class=\"method trait-impl\"><a href=\"#method.overflowing_rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Overflowing Euclidean remainder. Calculates <code>self.rem_euclid(rhs)</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method trait-impl\"><a href=\"#method.overflowing_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Negates self, overflowing if this is equal to the minimum value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl\" class=\"method trait-impl\"><a href=\"#method.overflowing_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Shifts self left by <code>rhs</code> bits. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr\" class=\"method trait-impl\"><a href=\"#method.overflowing_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Shifts self right by <code>rhs</code> bits. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow\" class=\"method trait-impl\"><a href=\"#method.overflowing_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Raises self to the power of <code>exp</code>, using exponentiation by squaring. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid\" class=\"method trait-impl\"><a href=\"#method.div_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Calculates the quotient of Euclidean division of self by rhs. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid\" class=\"method trait-impl\"><a href=\"#method.rem_euclid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>. <a>Read more</a></div></details></div></details>","Integral","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoBytes-for-u16\" class=\"impl\"><a href=\"#impl-IntoBytes-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl IntoBytes for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a><div class=\"where\">where\n    Self: Immutable,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_bytes\" class=\"method trait-impl\"><a href=\"#method.as_mut_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">as_mut_bytes</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [u8]\">ⓘ</a><div class=\"where\">where\n    Self: FromBytes,</div></h4></section></summary><div class='docblock'>Gets the bytes of this value mutably. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_to</a>(&amp;self, dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, SizeError&lt;&amp;Self, &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]&gt;&gt;<div class=\"where\">where\n    Self: Immutable,</div></h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to <code>dst</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_prefix\" class=\"method trait-impl\"><a href=\"#method.write_to_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_to_prefix</a>(\n    &amp;self,\n    dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, SizeError&lt;&amp;Self, &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]&gt;&gt;<div class=\"where\">where\n    Self: Immutable,</div></h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the prefix of <code>dst</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_suffix\" class=\"method trait-impl\"><a href=\"#method.write_to_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_to_suffix</a>(\n    &amp;self,\n    dst: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, SizeError&lt;&amp;Self, &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]&gt;&gt;<div class=\"where\">where\n    Self: Immutable,</div></h4></section></summary><div class='docblock'>Writes a copy of <code>self</code> to the suffix of <code>dst</code>. <a>Read more</a></div></details></div></details>","IntoBytes","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoDeserializer%3C'de,+E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#335\">Source</a><a href=\"#impl-IntoDeserializer%3C'de,+E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, E&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html\" title=\"trait serde::de::IntoDeserializer\">IntoDeserializer</a>&lt;'de, E&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Error.html\" title=\"trait serde::de::Error\">Error</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Deserializer\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#335\">Source</a><a href=\"#associatedtype.Deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#associatedtype.Deserializer\" class=\"associatedtype\">Deserializer</a> = <a class=\"struct\" href=\"https://docs.rs/serde/1.0.219/serde/de/value/struct.U16Deserializer.html\" title=\"struct serde::de::value::U16Deserializer\">U16Deserializer</a>&lt;E&gt;</h4></section></summary><div class='docblock'>The type of the deserializer being converted into.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_deserializer\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/de/value.rs.html#335\">Source</a><a href=\"#method.into_deserializer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.IntoDeserializer.html#tymethod.into_deserializer\" class=\"fn\">into_deserializer</a>(self) -&gt; <a class=\"struct\" href=\"https://docs.rs/serde/1.0.219/serde/de/value/struct.U16Deserializer.html\" title=\"struct serde::de::value::U16Deserializer\">U16Deserializer</a>&lt;E&gt;</h4></section></summary><div class='docblock'>Convert this value into a deserializer.</div></details></div></details>","IntoDeserializer<'de, E>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoNotification-for-u16\" class=\"impl\"><a href=\"#impl-IntoNotification-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl IntoNotification for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Tag\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Tag\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Tag</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>The tag data associated with a notification. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Notify\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Notify\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Notify</a> = Notify</h4></section></summary><div class='docblock'>The notification type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_notification\" class=\"method trait-impl\"><a href=\"#method.into_notification\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_notification</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as IntoNotification&gt;::Notify</h4></section></summary><div class='docblock'>Convert this value into a notification. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.additional\" class=\"method trait-impl\"><a href=\"#method.additional\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">additional</a>(self) -&gt; Additional&lt;Self::Notify&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Convert this value into an additional notification. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.relaxed\" class=\"method trait-impl\"><a href=\"#method.relaxed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">relaxed</a>(self) -&gt; Relaxed&lt;Self::Notify&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Don’t emit a fence for this notification. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tag\" class=\"method trait-impl\"><a href=\"#method.tag\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">tag</a>&lt;T&gt;(self, tag: T) -&gt; Tag&lt;Self::Notify, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + IntoNotification&lt;Tag = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>&gt;,</div></h4></section></summary><div class='docblock'>Use a tag with this notification. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tag_with\" class=\"method trait-impl\"><a href=\"#method.tag_with\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">tag_with</a>&lt;T, F&gt;(self, tag: F) -&gt; TagWith&lt;Self::Notify, F&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + IntoNotification&lt;Tag = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; T,</div></h4></section></summary><div class='docblock'>Use a function to generate a tag with this notification. <a>Read more</a></div></details></div></details>","IntoNotification","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoWasmAbi-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#238\">Source</a><a href=\"#impl-IntoWasmAbi-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::IntoWasmAbi\">IntoWasmAbi</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Abi\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#238\">Source</a><a href=\"#associatedtype.Abi\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#associatedtype.Abi\" class=\"associatedtype\">Abi</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The Wasm ABI type that this converts into when crossing the ABI\nboundary.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_abi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#238\">Source</a><a href=\"#method.into_abi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.IntoWasmAbi.html#tymethod.into_abi\" class=\"fn\">into_abi</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Convert <code>self</code> into <code>Self::Abi</code> so that it can be sent across the wasm\nABI boundary.</div></details></div></details>","IntoWasmAbi","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IsInteger-for-u16\" class=\"impl\"><a href=\"#impl-IsInteger-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl IsInteger for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_integer\" class=\"method trait-impl\"><a href=\"#method.is_integer\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_integer</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a value is an integer.</p>\n<p>For primitive integer types this always returns <code>true</code>.</p>\n<p>$f(x) = \\textrm{true}$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::is_integer#is_integer\">here</a>.</p>\n</div></details></div></details>","IsInteger","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IsPowerOf2-for-u16\" class=\"impl\"><a href=\"#impl-IsPowerOf2-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl IsPowerOf2 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_2\" class=\"method trait-impl\"><a href=\"#method.is_power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_power_of_2</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>is_power_of_two</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.is_power_of_two\" title=\"method u32::is_power_of_two\">this one</a>.</p>\n</div></details></div></details>","IsPowerOf2","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IsPrime-for-u16\" class=\"impl\"><a href=\"#impl-IsPrime-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl IsPrime for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_prime\" class=\"method trait-impl\"><a href=\"#method.is_prime\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_prime</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Tests whether a <code>u16</code> is prime.</p>\n<p>This implementation does a few divisibility checks, then performs strong probable prime\ntests with bases 31 and 73, which is enough to prove primality for any integer less than\n$2^{16}$.</p>\n<p>If you want to generate many small primes, try using\n[<code>u16::primes</code>][crate::num::factorization::traits::Primes::primes] instead.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>self.significant_bits()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>malachite_base::num::factorization::traits::IsPrime;\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.is_prime(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">6u16</span>.is_prime(), <span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">65521u16</span>.is_prime(), <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details></div></details>","IsPrime","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JacobiSymbol-for-u16\" class=\"impl\"><a href=\"#impl-JacobiSymbol-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl JacobiSymbol for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3><div class=\"docblock\"><p>Computes the Jacobi symbol of two numbers.</p>\n</div></section></summary><div class=\"docblock\"><p>$$\nf(x, y) = \\left ( \\frac{x}{y} \\right ).\n$$</p>\n<h4 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h4>\n<p>$T(n) = O(n^2)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>max(self.significant_bits(), other.significant_bits())</code>.</p>\n<h4 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h4>\n<p>Panics if <code>n</code> is even or negative.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<p>See <a href=\"super::kronecker_symbol#jacobi_symbol\">here</a>.</p>\n</div><div class=\"impl-items\"><section id=\"method.jacobi_symbol\" class=\"method trait-impl\"><a href=\"#method.jacobi_symbol\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">jacobi_symbol</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a></h4></section></div></details>","JacobiSymbol","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JoinHalves-for-u16\" class=\"impl\"><a href=\"#impl-JoinHalves-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl JoinHalves for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.join_halves\" class=\"method trait-impl\"><a href=\"#method.join_halves\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">join_halves</a>(\n    upper: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as HasHalf&gt;::Half,\n    lower: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as HasHalf&gt;::Half,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Joins two unsigned integers to form an unsigned integer with twice the width.</p>\n<p>Let $W$ be the width of <code>Self</code> (the output type).</p>\n<p>$f(x, y) = 2^{W/2} x + y$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::half#join_halves\">here</a>.</p>\n</div></details></div></details>","JoinHalves","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-JsonSchema-for-u16\" class=\"impl\"><a href=\"#impl-JsonSchema-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl JsonSchema for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_referenceable\" class=\"method trait-impl\"><a href=\"#method.is_referenceable\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_referenceable</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Whether JSON Schemas generated for this type should be re-used where possible using the <code>$ref</code> keyword. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_name\" class=\"method trait-impl\"><a href=\"#method.schema_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">schema_name</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class='docblock'>The name of the generated JSON Schema. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema_id\" class=\"method trait-impl\"><a href=\"#method.schema_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">schema_id</a>() -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Returns a string that uniquely identifies the schema produced by this type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.json_schema\" class=\"method trait-impl\"><a href=\"#method.json_schema\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">json_schema</a>(_: &amp;mut SchemaGenerator) -&gt; Schema</h4></section></summary><div class='docblock'>Generates a JSON Schema for this type. <a>Read more</a></div></details></div></details>","JsonSchema","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-KnownLayout-for-u16\" class=\"impl\"><a href=\"#impl-KnownLayout-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl KnownLayout for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.PointerMetadata\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PointerMetadata\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PointerMetadata</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a></h4></section></summary><div class='docblock'>The type of metadata stored in a pointer to <code>Self</code>. <a>Read more</a></div></details></div></details>","KnownLayout","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-KroneckerSymbol-for-u16\" class=\"impl\"><a href=\"#impl-KroneckerSymbol-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl KroneckerSymbol for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.kronecker_symbol\" class=\"method trait-impl\"><a href=\"#method.kronecker_symbol\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">kronecker_symbol</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Computes the Kronecker symbol of two numbers.</p>\n<p>$$\nf(x, y) = \\left ( \\frac{x}{y} \\right ).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n^2)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>max(self.significant_bits(), other.significant_bits())</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::kronecker_symbol#kronecker_symbol\">here</a>.</p>\n</div></details></div></details>","KroneckerSymbol","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LaneSize-for-u16\" class=\"impl\"><a href=\"#impl-LaneSize-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl LaneSize for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.KECCAK_F_ROUND_COUNT\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.KECCAK_F_ROUND_COUNT\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">KECCAK_F_ROUND_COUNT</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a> = 20usize</h4></section></summary><div class='docblock'>Number of rounds of the Keccak-f permutation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate_rc\" class=\"method trait-impl\"><a href=\"#method.truncate_rc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">truncate_rc</a>(rc: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Truncate function.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method trait-impl\"><a href=\"#method.rotate_left\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Rotate left function.</div></details></div></details>","LaneSize","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Lcm-for-u16\" class=\"impl\"><a href=\"#impl-Lcm-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Lcm for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lcm\" class=\"method trait-impl\"><a href=\"#method.lcm\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lcm</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Computes the LCM (least common multiple) of two numbers.</p>\n<p>$$\nf(x, y) = \\operatorname{lcm}(x, y).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n^2)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>max(self.significant_bits(), other.significant_bits())</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the result is too large to be represented.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::lcm#lcm\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","Lcm","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LcmAssign-for-u16\" class=\"impl\"><a href=\"#impl-LcmAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl LcmAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lcm_assign\" class=\"method trait-impl\"><a href=\"#method.lcm_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lcm_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Replaces a number with the LCM (least common multiple) of it and another number.</p>\n<p>$$\nx \\gets \\operatorname{lcm}(x, y).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n^2)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>max(self.significant_bits(), other.significant_bits())</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the result is too large to be represented.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::lcm#lcm_assign\">here</a>.</p>\n</div></details></div></details>","LcmAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LeadingZeros-for-u16\" class=\"impl\"><a href=\"#impl-LeadingZeros-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl LeadingZeros for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method trait-impl\"><a href=\"#method.leading_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>leading_zeros</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.leading_zeros\" title=\"method u32::leading_zeros\">this one</a>.</p>\n</div></details></div></details>","LeadingZeros","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LegendreSymbol-for-u16\" class=\"impl\"><a href=\"#impl-LegendreSymbol-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl LegendreSymbol for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.legendre_symbol\" class=\"method trait-impl\"><a href=\"#method.legendre_symbol\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">legendre_symbol</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a></h4></section></summary><div class=\"docblock\"><p>Computes the Legendre symbol of two numbers.</p>\n<p>This implementation is identical to that of [<code>JacobiSymbol</code>], since there is no\ncomputational benefit to requiring that the denominator be prime.</p>\n<p>$$\nf(x, y) = \\left ( \\frac{x}{y} \\right ).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n^2)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>max(self.significant_bits(), other.significant_bits())</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>n</code> is even.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::kronecker_symbol#legendre_symbol\">here</a>.</p>\n</div></details></div></details>","LegendreSymbol","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowMask-for-u16\" class=\"impl\"><a href=\"#impl-LowMask-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl LowMask for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.low_mask\" class=\"method trait-impl\"><a href=\"#method.low_mask\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">low_mask</a>(bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Returns a number whose least significant $b$ bits are <code>true</code> and whose other bits\nare <code>false</code>.</p>\n<p>$f(b) = 2^b - 1$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is greater than the width of of the type.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::low_mask#low_mask\">here</a>.</p>\n</div></details></div></details>","LowMask","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#527-530\">Source</a></span><a href=\"#impl-LowerExp-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.LowerExp.html\" title=\"trait core::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#527-530\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.LowerExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.LowerExp.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerExp","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#169\">Source</a></span><a href=\"#impl-LowerHex-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#169\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.LowerHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerHex","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Max-for-u16\" class=\"impl\"><a href=\"#impl-Max-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Max for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3><div class=\"docblock\"><p>The highest value representable by this type.</p>\n</div></section></summary><div class=\"docblock\"><p>If <code>Self</code> is unsigned, <code>MAX</code> is $2^W-1$. If <code>Self</code> is signed, <code>MAX</code> is $2^{W-1}-1$.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<p>See <a href=\"self\">here</a>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MAX\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 65_535u16</h4></section></summary><div class='docblock'>The maximum value of <code>Self</code>.</div></details></div></details>","Max","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MaxEncodedLenAssoc-for-u16\" class=\"impl\"><a href=\"#impl-MaxEncodedLenAssoc-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl MaxEncodedLenAssoc for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.LEN\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.LEN\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">LEN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a> = 3usize</h4></section></summary><div class='docblock'>The maximum length.</div></details></div></details>","MaxEncodedLenAssoc","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Min-for-u16\" class=\"impl\"><a href=\"#impl-Min-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Min for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3><div class=\"docblock\"><p>The lowest value representable by this type.</p>\n</div></section></summary><div class=\"docblock\"><p>If <code>Self</code> is unsigned, <code>MIN</code> is 0. If <code>Self</code> is signed, <code>MIN</code> is $-2^{W-1}$.</p>\n<h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<p>See <a href=\"self\">here</a>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MIN\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 0u16</h4></section></summary><div class='docblock'>The minimum value of <code>Self</code>.</div></details></div></details>","Min","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mod-for-u16\" class=\"impl\"><a href=\"#impl-Mod-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Mod for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_op\" class=\"method trait-impl\"><a href=\"#method.mod_op\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_op</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Divides a number by another number, returning just the remainder.</p>\n<p>If the quotient were computed, the quotient and remainder would satisfy $x = qy + r$\nand $0 \\leq r &lt; y$.</p>\n<p>$$\nf(x, y) = x - y\\left \\lfloor \\frac{x}{y} \\right \\rfloor.\n$$</p>\n<p>This function is called <code>mod_op</code> rather than <code>mod</code> because <code>mod</code> is a Rust keyword.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_op#mod_op\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","Mod","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModAdd-for-u16\" class=\"impl\"><a href=\"#impl-ModAdd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModAdd for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_add\" class=\"method trait-impl\"><a href=\"#method.mod_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_add</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Adds two numbers modulo a third number $m$. The inputs must be already reduced\nmodulo $m$.</p>\n<p>$f(x, y, m) = z$, where $x, y, z &lt; m$ and $x + y \\equiv z \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> or <code>other</code> are greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_add#mod_add\">here</a>.</p>\n<p>This is equivalent to <code>nmod_add</code> from <code>nmod.h</code>, FLINT 2.7.1.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModAdd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModAddAssign-for-u16\" class=\"impl\"><a href=\"#impl-ModAddAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModAddAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_add_assign\" class=\"method trait-impl\"><a href=\"#method.mod_add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Adds two numbers modulo a third number $m$, in place. The inputs must be already\nreduced modulo $m$.</p>\n<p>$x \\gets z$, where $x, y, z &lt; m$ and $x + y \\equiv z \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> or <code>other</code> are greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_add#mod_add_assign\">here</a>.</p>\n<p>This is equivalent to <code>nmod_add</code> from <code>nmod.h</code>, FLINT 2.7.1, where the result is\nassigned to <code>a</code>.</p>\n</div></details></div></details>","ModAddAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModAssign-for-u16\" class=\"impl\"><a href=\"#impl-ModAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_assign\" class=\"method trait-impl\"><a href=\"#method.mod_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Divides a number by another number, replacing the first number by the remainder.</p>\n<p>If the quotient were computed, he quotient and remainder would satisfy $x = qy + r$\nand $0 \\leq r &lt; y$.</p>\n<p>$$\nx \\gets x - y\\left \\lfloor \\frac{x}{y} \\right \\rfloor.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_op#mod_assign\">here</a>.</p>\n</div></details></div></details>","ModAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModInverse-for-u16\" class=\"impl\"><a href=\"#impl-ModInverse-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModInverse for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_inverse\" class=\"method trait-impl\"><a href=\"#method.mod_inverse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_inverse</a>(self, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the multiplicative inverse of a number modulo another number $m$. The input\nmust be already reduced modulo $m$.</p>\n<p>Returns <code>None</code> if $x$ and $m$ are not coprime.</p>\n<p>$f(x, m) = y$, where $x, y &lt; m$, $\\gcd(x, y) = 1$, and $xy \\equiv 1 \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n^2)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>max(self.significant_bits(), m.significant_bits())</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_inverse#mod_inverse\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModInverse","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModIsReduced-for-u16\" class=\"impl\"><a href=\"#impl-ModIsReduced-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModIsReduced for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_is_reduced\" class=\"method trait-impl\"><a href=\"#method.mod_is_reduced\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_is_reduced</a>(&amp;self, m: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether a number is reduced modulo another number $m$; in other words,\nwhether it is less than $m$. $m$ cannot be zero.</p>\n<p>$f(x, m) = (x &lt; m)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if $m$ is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_is_reduced#mod_is_reduced\">here</a>.</p>\n</div></details></div></details>","ModIsReduced","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModMul-for-u16\" class=\"impl\"><a href=\"#impl-ModMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_mul\" class=\"method trait-impl\"><a href=\"#method.mod_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_mul</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Multiplies two numbers modulo a third number $m$. The inputs must be already reduced\nmodulo $m$.</p>\n<p>$f(x, y, m) = z$, where $x, y, z &lt; m$ and $xy \\equiv z \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> or <code>other</code> are greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_mul#mod_mul\">here</a>.</p>\n<p>This is equivalent to <code>nmod_mul</code> from <code>nmod.h</code>, FLINT 2.7.1.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModMulAssign-for-u16\" class=\"impl\"><a href=\"#impl-ModMulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModMulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_mul_assign\" class=\"method trait-impl\"><a href=\"#method.mod_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Multiplies two numbers modulo a third number $m$, in place. The inputs must be\nalready reduced modulo $m$.</p>\n<p>$x \\gets z$, where $x, y, z &lt; m$ and $xy \\equiv z \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_mul#mod_mul_assign\">here</a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> or <code>other</code> are greater than or equal to <code>m</code>.</p>\n<p>This is equivalent to <code>nmod_mul</code> from <code>nmod.h</code>, FLINT 2.7.1, where the result is\nassigned to <code>a</code>.</p>\n</div></details></div></details>","ModMulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModMulPrecomputed-for-u16\" class=\"impl\"><a href=\"#impl-ModMulPrecomputed-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModMulPrecomputed for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.precompute_mod_mul_data\" class=\"method trait-impl\"><a href=\"#method.precompute_mod_mul_data\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">precompute_mod_mul_data</a>(_: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Precomputes data for modular multiplication. See <code>mod_mul_precomputed</code> and\n<a href=\"super::traits::ModMulPrecomputedAssign\"><code>mod_mul_precomputed_assign</code></a>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<p>This is equivalent to <code>n_preinvert_limb</code> from <code>ulong_extras.h</code>, FLINT 2.7.1.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_mul_precomputed\" class=\"method trait-impl\"><a href=\"#method.mod_mul_precomputed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_mul_precomputed</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Multiplies two numbers modulo a third number $m$. The inputs must be already reduced\nmodulo $m$.</p>\n<p>Some precomputed data is provided; this speeds up computations involving several\nmodular multiplications with the same modulus. The precomputed data should be\nobtained using\n<a href=\"ModMulPrecomputed::precompute_mod_mul_data\"><code>precompute_mod_mul_data</code></a>.</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> or <code>other</code> are greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_mul#mod_mul_precomputed\">here</a>.</p>\n<p>This is equivalent to <code>n_mulmod2_preinv</code> from <code>ulong_extras.h</code>, FLINT 2.7.1.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><section id=\"associatedtype.Data\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Data\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Data</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></div></details>","ModMulPrecomputed","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModMulPrecomputedAssign-for-u16\" class=\"impl\"><a href=\"#impl-ModMulPrecomputedAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModMulPrecomputedAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_mul_precomputed_assign\" class=\"method trait-impl\"><a href=\"#method.mod_mul_precomputed_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_mul_precomputed_assign</a>(\n    &amp;mut self,\n    other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    data: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as ModMulPrecomputed&gt;::Data,\n)</h4></section></summary><div class=\"docblock\"><p>Multiplies two numbers modulo a third number $m$, in place. The inputs must be\nalready reduced modulo $m$.</p>\n<p>Some precomputed data is provided; this speeds up computations involving several\nmodular multiplications with the same modulus. The precomputed data should be\nobtained using\n<a href=\"ModMulPrecomputed::precompute_mod_mul_data\"><code>precompute_mod_mul_data</code></a>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> or <code>other</code> are greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_mul#mod_mul_precomputed_assign\">here</a>.</p>\n<p>This is equivalent to <code>n_mulmod2_preinv</code> from <code>ulong_extras.h</code>, FLINT 2.7.1, where\nthe return value is assigned to <code>a</code>.</p>\n</div></details></div></details>","ModMulPrecomputedAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModNeg-for-u16\" class=\"impl\"><a href=\"#impl-ModNeg-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModNeg for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_neg\" class=\"method trait-impl\"><a href=\"#method.mod_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_neg</a>(self, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Negates a number modulo another number $m$, in place. The input must be already\nreduced modulo $m$.</p>\n<p>$f(x, m) = y$, where $x, y &lt; m$ and $-x \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_neg#mod_neg\">here</a>.</p>\n<p>This is equivalent to <code>nmod_neg</code> from <code>nmod.h</code>, FLINT 2.7.1.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModNeg","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModNegAssign-for-u16\" class=\"impl\"><a href=\"#impl-ModNegAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModNegAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_neg_assign\" class=\"method trait-impl\"><a href=\"#method.mod_neg_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_neg_assign</a>(&amp;mut self, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Negates a number modulo another number $m$. The input must be already reduced modulo\n$m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $-x \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_neg#mod_neg_assign\">here</a>.</p>\n<p>This is equivalent to <code>nmod_neg</code> from <code>nmod.h</code>, FLINT 2.7.1, where the output is\nassigned to <code>a</code>.</p>\n</div></details></div></details>","ModNegAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPow%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPow%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPow&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_pow\" class=\"method trait-impl\"><a href=\"#method.mod_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Raises a number to a power modulo another number $m$. The base must be already\nreduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $x^n \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>exp.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_pow#mod_pow\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPow<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_pow_assign\" class=\"method trait-impl\"><a href=\"#method.mod_pow_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_pow_assign</a>(&amp;mut self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Raises a number to a power modulo another number $m$, in place. The base must be\nalready reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $x^n \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>exp.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_pow#mod_pow_assign\">here</a>.</p>\n</div></details></div></details>","ModPowAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowPrecomputed%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowPrecomputed%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowPrecomputed&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.precompute_mod_pow_data\" class=\"method trait-impl\"><a href=\"#method.precompute_mod_pow_data\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">precompute_mod_pow_data</a>(_: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Precomputes data for modular exponentiation.</p>\n<p>See <code>mod_pow_precomputed</code> and\n<a href=\"super::traits::ModPowPrecomputedAssign\"><code>mod_pow_precomputed_assign</code></a>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_pow_precomputed\" class=\"method trait-impl\"><a href=\"#method.mod_pow_precomputed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_pow_precomputed</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, data: &amp;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Raises a number to a power modulo another number $m$. The base must be already\nreduced modulo $m$.</p>\n<p>Some precomputed data is provided; this speeds up computations involving several\nmodular exponentiations with the same modulus. The precomputed data should be\nobtained using\n<a href=\"ModPowPrecomputed::precompute_mod_pow_data\"><code>precompute_mod_pow_data</code></a>.</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>exp.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_pow#mod_pow_precomputed\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><section id=\"associatedtype.Data\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Data\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Data</a> = (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></div></details>","ModPowPrecomputed<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowPrecomputedAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowPrecomputedAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowPrecomputedAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_pow_precomputed_assign\" class=\"method trait-impl\"><a href=\"#method.mod_pow_precomputed_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_pow_precomputed_assign</a>(\n    &amp;mut self,\n    exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n    m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    data: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as ModPowPrecomputed&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;&gt;::Data,\n)</h4></section></summary><div class=\"docblock\"><p>Raises a number to a power modulo another number $m$, in place. The base must be\nalready reduced modulo $m$.</p>\n<p>Some precomputed data is provided; this speeds up computations involving several\nmodular exponentiations with the same modulus. The precomputed data should be\nobtained using\n<a href=\"ModPowPrecomputed::precompute_mod_pow_data\"><code>precompute_mod_pow_data</code></a>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>exp.significant_bits()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_pow#mod_pow_precomputed_assign\">here</a>.</p>\n</div></details></div></details>","ModPowPrecomputedAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2</a>(self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Divides a number by $2^k$, returning just the remainder.</p>\n<p>If the quotient were computed, the quotient and remainder would satisfy $x = q2^k +\nr$ and $0 \\leq r &lt; 2^k$.</p>\n<p>$$\nf(x, k) = x - 2^k\\left \\lfloor \\frac{x}{2^k} \\right \\rfloor.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2#mod_power_of_2\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Add-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Add-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Add for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_add\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_add</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Adds two numbers modulo a third number $2^k$. The inputs must be already reduced\nmodulo $2^k$.</p>\n<p>$f(x, y, k) = z$, where $x, y, z &lt; 2^k$ and $x + y \\equiv z \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> or <code>other</code> are greater\nthan or equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_add#mod_power_of_2_add\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Add","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2AddAssign-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2AddAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2AddAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_add_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Adds two numbers modulo a third number $2^k$, in place. The inputs must be already\nreduced modulo $2^k$.</p>\n<p>$x \\gets z$, where $x, y, z &lt; 2^k$ and $x + y \\equiv z \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> or <code>other</code> are greater\nthan or equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_add#mod_power_of_2_add_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2AddAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Assign-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Assign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Assign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_assign</a>(&amp;mut self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Divides a number by $2^k$, replacing the first number by the remainder.</p>\n<p>If the quotient were computed, the quotient and remainder would satisfy $x = q2^k +\nr$ and $0 \\leq r &lt; 2^k$.</p>\n<p>$$\nx \\gets x - 2^k\\left \\lfloor \\frac{x}{2^k} \\right \\rfloor.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2#mod_power_of_2_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2Assign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Inverse-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Inverse-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Inverse for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_inverse\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_inverse\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_inverse</a>(self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Computes the multiplicative inverse of a number modulo $2^k$. The input must be\nalready reduced modulo $2^k$.</p>\n<p>Returns <code>None</code> if $x$ is even.</p>\n<p>$f(x, k) = y$, where $x, y &lt; 2^k$, $x$ is odd, and $xy \\equiv 1 \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>pow</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code>, if <code>self</code> is zero, or if <code>self</code> is\ngreater than or equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_inverse#mod_power_of_2_inverse\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Inverse","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2IsReduced-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2IsReduced-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2IsReduced for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_is_reduced\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_is_reduced\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_is_reduced</a>(&amp;self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns whether a number is reduced modulo another number $2^k$; in other words,\nwhether it has no more than $k$ significant bits.</p>\n<p>$f(x, k) = (x &lt; 2^k)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_is_reduced#mod_power_of_2_is_reduced\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2IsReduced","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Mul-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Mul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Mul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_mul\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_mul</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Multiplies two numbers modulo a third number $2^k$. The inputs must be already\nreduced modulo $2^k$.</p>\n<p>$f(x, y, k) = z$, where $x, y, z &lt; 2^k$ and $xy \\equiv z \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> or <code>other</code> are greater\nthan or equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_mul#mod_power_of_2_mul\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Mul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2MulAssign-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2MulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2MulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_mul_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Multiplies two numbers modulo a third number $2^k$, in place. The inputs must be\nalready reduced modulo $2^k$.</p>\n<p>$x \\gets z$, where $x, y, z &lt; 2^k$ and $xy \\equiv z \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> or <code>other</code> are greater\nthan or equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_mul#mod_power_of_2_mul_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2MulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Neg-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Neg-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Neg for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_neg\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_neg</a>(self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Negates a number modulo another number $2^k$. The input must be already reduced\nmodulo $2^k$.</p>\n<p>$f(x, k) = y$, where $x, y &lt; 2^k$ and $-x \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than or equal\nto $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_neg#mod_power_of_2_neg\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Neg","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2NegAssign-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2NegAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2NegAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_neg_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_neg_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_neg_assign</a>(&amp;mut self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Negates a number modulo another number $2^k$, in place. The input must be already\nreduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $-x \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than or equal\nto $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_neg#mod_power_of_2_neg_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2NegAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Pow%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Pow%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Pow&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_pow\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Raises a number to a power modulo another number $2^k$. The base must be already\nreduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $x^n \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>exp.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than or equal\nto $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_pow#mod_power_of_2_pow\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Pow<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2PowAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2PowAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2PowAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_pow_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_pow_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_pow_assign</a>(&amp;mut self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Raises a number to a power modulo another number $2^k$, in place. The base must be\nalready reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $x^n \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>exp.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than or equal\nto $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_pow#mod_power_of_2_pow_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2PowAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shl%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shl%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$. The\nnumber must be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shl<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shl%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shl%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$. The\nnumber must be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shl<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shl%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shl%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$. The\nnumber must be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shl<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shl%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shl%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$. The\nnumber must be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shl<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shl%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shl%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$. The\nnumber must be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shl<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shl%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shl%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$. The\nnumber must be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shl<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shl%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shl%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$. The\nnumber must be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $2^nx \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shl<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shl%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shl%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$. The\nnumber must be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $2^nx \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shl<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shl%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shl%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$. The\nnumber must be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $2^nx \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shl<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shl%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shl%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$. The\nnumber must be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $2^nx \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shl<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shl%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shl%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$. The\nnumber must be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $2^nx \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shl<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shl%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shl%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$. The\nnumber must be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $2^nx \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shl<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShlAssign%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShlAssign%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShlAssign<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShlAssign%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShlAssign%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShlAssign<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShlAssign%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShlAssign%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShlAssign<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShlAssign%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShlAssign%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShlAssign<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShlAssign%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShlAssign%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShlAssign<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShlAssign%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShlAssign%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShlAssign<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShlAssign%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShlAssign%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $2^nx \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShlAssign<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShlAssign%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShlAssign%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $2^nx \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShlAssign<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShlAssign%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShlAssign%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $2^nx \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShlAssign<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShlAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShlAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $2^nx \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShlAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShlAssign%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShlAssign%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $2^nx \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShlAssign<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShlAssign%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShlAssign%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $2^nx \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shl#mod_power_of_2_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShlAssign<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shr%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shr%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shr\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo $2^k$. The number\nmust be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y\n\\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shr#mod_power_of_2_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shr<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shr%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shr%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shr\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo $2^k$. The number\nmust be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y\n\\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shr#mod_power_of_2_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shr<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shr%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shr%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shr\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo $2^k$. The number\nmust be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y\n\\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shr#mod_power_of_2_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shr<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shr%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shr%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shr\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo $2^k$. The number\nmust be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y\n\\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shr#mod_power_of_2_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shr<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shr%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shr%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shr\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo $2^k$. The number\nmust be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y\n\\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shr#mod_power_of_2_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shr<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Shr%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Shr%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Shr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shr\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo $2^k$. The number\nmust be already reduced modulo $2^k$.</p>\n<p>$f(x, n, k) = y$, where $x, y &lt; 2^k$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y\n\\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shr#mod_power_of_2_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Shr<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShrAssign%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShrAssign%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShrAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shr_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shr#mod_power_of_2_shr_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShrAssign<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShrAssign%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShrAssign%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShrAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shr_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shr#mod_power_of_2_shr_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShrAssign<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShrAssign%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShrAssign%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShrAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shr_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shr#mod_power_of_2_shr_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShrAssign<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShrAssign%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShrAssign%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShrAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shr_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shr#mod_power_of_2_shr_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShrAssign<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShrAssign%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShrAssign%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShrAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shr_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shr#mod_power_of_2_shr_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShrAssign<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2ShrAssign%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2ShrAssign%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2ShrAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_shr_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo $2^k$, in place.\nThe number must be already reduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y \\mod\n2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than\nor equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_shr#mod_power_of_2_shr_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2ShrAssign<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Square-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Square-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Square for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_square\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_square\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_square</a>(self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Squares a number modulo another number $2^k$. The input must be already reduced\nmodulo $2^k$.</p>\n<p>$f(x, k) = y$, where $x, y &lt; 2^k$ and $x^2 \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than or equal\nto $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_square#mod_power_of_2_square\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Square","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2SquareAssign-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2SquareAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2SquareAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_square_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_square_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_square_assign</a>(&amp;mut self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Squares a number modulo another number $2^k$, in place. The input must be already\nreduced modulo $2^k$.</p>\n<p>$x \\gets y$, where $x, y &lt; 2^k$ and $x^2 \\equiv y \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> is greater than or equal\nto $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_square#mod_power_of_2_square_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2SquareAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2Sub-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2Sub-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2Sub for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_sub\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Subtracts two numbers modulo a third number $2^k$. The inputs must be already\nreduced modulo $2^k$.</p>\n<p>$f(x, y, k) = z$, where $x, y, z &lt; 2^k$ and $x - y \\equiv z \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> or <code>other</code> are greater\nthan or equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_sub#mod_power_of_2_sub\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModPowerOf2Sub","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModPowerOf2SubAssign-for-u16\" class=\"impl\"><a href=\"#impl-ModPowerOf2SubAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModPowerOf2SubAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_power_of_2_sub_assign\" class=\"method trait-impl\"><a href=\"#method.mod_power_of_2_sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_power_of_2_sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Subtracts two numbers modulo a third number $2^k$, in place. The inputs must be\nalready reduced modulo $2^k$.</p>\n<p>$x \\gets z$, where $x, y, z &lt; 2^k$ and $x - y \\equiv z \\mod 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>pow</code> is greater than <code>Self::WIDTH</code> or if <code>self</code> or <code>other</code> are greater\nthan or equal to $2^k$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2_sub#mod_power_of_2_sub_assign\">here</a>.</p>\n</div></details></div></details>","ModPowerOf2SubAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShl%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShl%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl\" class=\"method trait-impl\"><a href=\"#method.mod_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$.\nThe number must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\nm$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShl<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShl%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShl%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl\" class=\"method trait-impl\"><a href=\"#method.mod_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$.\nThe number must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\nm$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShl<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShl%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShl%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl\" class=\"method trait-impl\"><a href=\"#method.mod_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$.\nThe number must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\nm$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShl<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShl%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShl%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl\" class=\"method trait-impl\"><a href=\"#method.mod_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$.\nThe number must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\nm$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShl<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShl%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShl%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl\" class=\"method trait-impl\"><a href=\"#method.mod_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$.\nThe number must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\nm$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShl<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShl%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShl%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl\" class=\"method trait-impl\"><a href=\"#method.mod_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$.\nThe number must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod\nm$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShl<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShl%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShl%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl\" class=\"method trait-impl\"><a href=\"#method.mod_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$.\nThe number must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $2^nx \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShl<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShl%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShl%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl\" class=\"method trait-impl\"><a href=\"#method.mod_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$.\nThe number must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $2^nx \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShl<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShl%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShl%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl\" class=\"method trait-impl\"><a href=\"#method.mod_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$.\nThe number must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $2^nx \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShl<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShl%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShl%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl\" class=\"method trait-impl\"><a href=\"#method.mod_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$.\nThe number must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $2^nx \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShl<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShl%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShl%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl\" class=\"method trait-impl\"><a href=\"#method.mod_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$.\nThe number must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $2^nx \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShl<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShl%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShl%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShl&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl\" class=\"method trait-impl\"><a href=\"#method.mod_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$.\nThe number must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $2^nx \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShl<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShlAssign%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShlAssign%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModShlAssign<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShlAssign%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShlAssign%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModShlAssign<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShlAssign%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShlAssign%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModShlAssign<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShlAssign%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShlAssign%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModShlAssign<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShlAssign%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShlAssign%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModShlAssign<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShlAssign%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShlAssign%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $\\lfloor 2^nx \\rfloor \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModShlAssign<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShlAssign%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShlAssign%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $2^nx \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModShlAssign<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShlAssign%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShlAssign%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $2^nx \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModShlAssign<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShlAssign%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShlAssign%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $2^nx \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModShlAssign<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShlAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShlAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $2^nx \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModShlAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShlAssign%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShlAssign%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $2^nx \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModShlAssign<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShlAssign%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShlAssign%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShlAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shl_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $2^nx \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shl#mod_shl_assign\">here</a>.</p>\n</div></details></div></details>","ModShlAssign<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShr%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShr%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shr\" class=\"method trait-impl\"><a href=\"#method.mod_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo a number $m$. The\nnumber must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y\n\\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shr#mod_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShr<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShr%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShr%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shr\" class=\"method trait-impl\"><a href=\"#method.mod_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo a number $m$. The\nnumber must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y\n\\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shr#mod_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShr<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShr%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShr%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shr\" class=\"method trait-impl\"><a href=\"#method.mod_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo a number $m$. The\nnumber must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y\n\\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shr#mod_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShr<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShr%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShr%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shr\" class=\"method trait-impl\"><a href=\"#method.mod_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo a number $m$. The\nnumber must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y\n\\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shr#mod_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShr<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShr%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShr%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shr\" class=\"method trait-impl\"><a href=\"#method.mod_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo a number $m$. The\nnumber must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y\n\\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shr#mod_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShr<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShr%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShr%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShr&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shr\" class=\"method trait-impl\"><a href=\"#method.mod_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo a number $m$. The\nnumber must be already reduced modulo $m$.</p>\n<p>$f(x, n, m) = y$, where $x, y &lt; m$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y\n\\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shr#mod_shr\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModShr<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShrAssign%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShrAssign%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShrAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shr_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shr#mod_shr\">here</a>.</p>\n</div></details></div></details>","ModShrAssign<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShrAssign%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShrAssign%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShrAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shr_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shr#mod_shr\">here</a>.</p>\n</div></details></div></details>","ModShrAssign<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShrAssign%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShrAssign%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShrAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shr_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shr#mod_shr\">here</a>.</p>\n</div></details></div></details>","ModShrAssign<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShrAssign%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShrAssign%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShrAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shr_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shr#mod_shr\">here</a>.</p>\n</div></details></div></details>","ModShrAssign<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShrAssign%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShrAssign%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShrAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shr_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shr#mod_shr\">here</a>.</p>\n</div></details></div></details>","ModShrAssign<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModShrAssign%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModShrAssign%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModShrAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_shr_assign\" class=\"method trait-impl\"><a href=\"#method.mod_shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Right-shifts a number (divides it by a power of 2) modulo a number $m$, in\nplace. The number must be already reduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $\\lfloor 2^{-n}x \\rfloor \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>other.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_shr#mod_shr\">here</a>.</p>\n</div></details></div></details>","ModShrAssign<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModSquare-for-u16\" class=\"impl\"><a href=\"#impl-ModSquare-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModSquare for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_square\" class=\"method trait-impl\"><a href=\"#method.mod_square\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_square</a>(self, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Squares a number modulo another number $m$. The input must be already reduced modulo\n$m$.</p>\n<p>$f(x, m) = y$, where $x, y &lt; m$ and $x^2 \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_square#mod_square\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModSquare","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModSquareAssign-for-u16\" class=\"impl\"><a href=\"#impl-ModSquareAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModSquareAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_square_assign\" class=\"method trait-impl\"><a href=\"#method.mod_square_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_square_assign</a>(&amp;mut self, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Squares a number modulo another number $m$, in place. The input must be already\nreduced modulo $m$.</p>\n<p>$x \\gets y$, where $x, y &lt; m$ and $x^2 \\equiv y \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_square#mod_square_assign\">here</a>.</p>\n</div></details></div></details>","ModSquareAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModSquarePrecomputed%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModSquarePrecomputed%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModSquarePrecomputed&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_square_precomputed\" class=\"method trait-impl\"><a href=\"#method.mod_square_precomputed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_square_precomputed</a>(\n    self,\n    m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    data: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as ModPowPrecomputed&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;&gt;::Data,\n) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as ModPowPrecomputed&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;&gt;::Output</h4></section></summary><div class=\"docblock\"><p>Squares a number modulo another number $m$. The input must be already reduced modulo\n$m$.</p>\n<p>Some precomputed data is provided; this speeds up computations involving several\nmodular squarings with the same modulus. The precomputed data should be obtained\nusing <a href=\"super::traits::ModPowPrecomputed\"><code>precompute_mod_pow_data</code></a>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_square#mod_square_precomputed\">here</a>.</p>\n</div></details></div></details>","ModSquarePrecomputed<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModSquarePrecomputedAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ModSquarePrecomputedAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModSquarePrecomputedAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_square_precomputed_assign\" class=\"method trait-impl\"><a href=\"#method.mod_square_precomputed_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_square_precomputed_assign</a>(\n    &amp;mut self,\n    m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    data: &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as ModPowPrecomputed&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;&gt;::Data,\n)</h4></section></summary><div class=\"docblock\"><p>Squares a number modulo another number $m$, in place. The input must be already\nreduced modulo $m$.</p>\n<p>Some precomputed data is provided; this speeds up computations involving several\nmodular squarings with the same modulus. The precomputed data should be obtained\nusing <a href=\"super::traits::ModPowPrecomputed\"><code>precompute_mod_pow_data</code></a>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_square#mod_square_precomputed_assign\">here</a>.</p>\n</div></details></div></details>","ModSquarePrecomputedAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModSub-for-u16\" class=\"impl\"><a href=\"#impl-ModSub-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModSub for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_sub\" class=\"method trait-impl\"><a href=\"#method.mod_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Subtracts two numbers modulo a third number $m$. The inputs must be already reduced\nmodulo $m$.</p>\n<p>$f(x, y, m) = z$, where $x, y, z &lt; m$ and $x - y \\equiv z \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> or <code>other</code> are greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_sub#mod_sub\">here</a>.</p>\n<p>This is equivalent to <code>nmod_sub</code> from <code>nmod.h</code>, FLINT 2.7.1.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ModSub","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ModSubAssign-for-u16\" class=\"impl\"><a href=\"#impl-ModSubAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ModSubAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mod_sub_assign\" class=\"method trait-impl\"><a href=\"#method.mod_sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mod_sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Subtracts two numbers modulo a third number $m$, in place. The inputs must be\nalready reduced modulo $m$.</p>\n<p>$x \\gets z$, where $x, y, z &lt; m$ and $x - y \\equiv z \\mod m$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> or <code>other</code> are greater than or equal to <code>m</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_sub#mod_sub_assign\">here</a>.</p>\n<p>This is equivalent to <code>nmod_sub</code> from <code>nmod.h</code>, FLINT 2.7.1, where the result is\nassigned to <code>a</code>.</p>\n</div></details></div></details>","ModSubAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Mul%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_repr/struct.OwnedRepr.html\" title=\"struct ndarray::data_repr::OwnedRepr\">OwnedRepr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'a ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26BigInt%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/multiplication.rs.html#68\">Source</a><a href=\"#impl-Mul%3C%26BigInt%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/multiplication.rs.html#68\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/multiplication.rs.html#68\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&BigInt>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26BigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/multiplication.rs.html#513\">Source</a><a href=\"#impl-Mul%3C%26BigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/multiplication.rs.html#513\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/multiplication.rs.html#513\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26Complex%3Cu16%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#impl-Mul%3C%26Complex%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&'a Complex<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#362\">Source</a></span><a href=\"#impl-Mul%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#362\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#362\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Mul%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataOwned.html\" title=\"trait ndarray::data_traits::DataOwned\">DataOwned</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; + <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataMut.html\" title=\"trait ndarray::data_traits::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CBigInt%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/multiplication.rs.html#68\">Source</a><a href=\"#impl-Mul%3CBigInt%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/multiplication.rs.html#68\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/multiplication.rs.html#68\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<BigInt>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CBigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/multiplication.rs.html#513\">Source</a><a href=\"#impl-Mul%3CBigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/multiplication.rs.html#513\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/multiplication.rs.html#513\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CComplex%3Cu16%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#impl-Mul%3CComplex%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<Complex<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-Mul%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = U16&lt;O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: U16&lt;O&gt;) -&gt; U16&lt;O&gt;</h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#362\">Source</a></span><a href=\"#impl-Mul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#362\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#362\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAdd-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/mul_add.rs.html#71\">Source</a><a href=\"#impl-MulAdd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAdd.html\" title=\"trait num_traits::ops::mul_add::MulAdd\">MulAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/mul_add.rs.html#71\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAdd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the fused multiply-add.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/mul_add.rs.html#71\">Source</a><a href=\"#method.mul_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAdd.html#tymethod.mul_add\" class=\"fn\">mul_add</a>(self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAdd.html\" title=\"trait num_traits::ops::mul_add::MulAdd\">MulAdd</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAdd.html#associatedtype.Output\" title=\"type num_traits::ops::mul_add::MulAdd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the fused multiply-add operation <code>(self * a) + b</code></div></details></div></details>","MulAdd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAddAssign-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/mul_add.rs.html#101\">Source</a><a href=\"#impl-MulAddAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAddAssign.html\" title=\"trait num_traits::ops::mul_add::MulAddAssign\">MulAddAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/mul_add.rs.html#101\">Source</a><a href=\"#method.mul_add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/mul_add/trait.MulAddAssign.html#tymethod.mul_add_assign\" class=\"fn\">mul_add_assign</a>(&amp;mut self, a: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, b: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the fused multiply-add assignment operation <code>*self = (*self * a) + b</code></div></details></div></details>","MulAddAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#904\">Source</a></span><a href=\"#impl-MulAssign%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#904\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-MulAssign%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: U16&lt;O&gt;)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#904\">Source</a></span><a href=\"#impl-MulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#904\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Multifactorial-for-u16\" class=\"impl\"><a href=\"#impl-Multifactorial-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Multifactorial for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.multifactorial\" class=\"method trait-impl\"><a href=\"#method.multifactorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">multifactorial</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, m: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Computes a multifactorial of a number.</p>\n<p>If the input is too large, the function panics. For a function that returns <code>None</code>\ninstead, try\n<a href=\"CheckedMultifactorial::checked_multifactorial\"><code>checked_multifactorial</code></a>.</p>\n<p>$$\nf(n, m) = n!^{(m)} = n \\times (n - m) \\times (n - 2m) \\times \\cdots \\times i.\n$$\nIf $n$ is divisible by $m$, then $i$ is $m$; otherwise, $i$ is the remainder when\n$n$ is divided by $m$.</p>\n<p>$n!^{(m)} = O(\\sqrt{n}(n/e)^{n/m})$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the output is too large to be represented.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::factorial#multifactorial\">here</a>.</p>\n</div></details></div></details>","Multifactorial","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Named-for-u16\" class=\"impl\"><a href=\"#impl-Named-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Named for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.NAME\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.NAME\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">NAME</a>: &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a> = &quot;u16&quot;</h4></section></summary><div class=\"docblock\"><p>The name of this type, as given by the <a href=\"https://doc.rust-lang.org/1.85.1/core/macro.stringify.html\" title=\"macro core::stringify\"><code>stringify</code></a> macro.</p>\n<p>See the documentation for [<code>impl_named</code>] for more details.</p>\n</div></details></div></details>","Named","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NegMod-for-u16\" class=\"impl\"><a href=\"#impl-NegMod-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl NegMod for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg_mod\" class=\"method trait-impl\"><a href=\"#method.neg_mod\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">neg_mod</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Divides the negative of a number by another number, returning just the remainder.</p>\n<p>If the quotient were computed, the quotient and remainder would satisfy $x = qy - r$\nand $0 \\leq r &lt; y$.</p>\n<p>$$\nf(x, y) = y\\left \\lceil \\frac{x}{y} \\right \\rceil - x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_op#neg_mod\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","NegMod","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NegModAssign-for-u16\" class=\"impl\"><a href=\"#impl-NegModAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl NegModAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg_mod_assign\" class=\"method trait-impl\"><a href=\"#method.neg_mod_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">neg_mod_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Divides the negative of a number by another number, returning just the remainder.</p>\n<p>If the quotient were computed, the quotient and remainder would satisfy $x = qy - r$\nand $0 \\leq r &lt; y$.</p>\n<p>$$\nx \\gets y\\left \\lceil \\frac{x}{y} \\right \\rceil - x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>other</code> is 0.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_op#neg_mod_assign\">here</a>.</p>\n</div></details></div></details>","NegModAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NegModPowerOf2-for-u16\" class=\"impl\"><a href=\"#impl-NegModPowerOf2-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl NegModPowerOf2 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg_mod_power_of_2\" class=\"method trait-impl\"><a href=\"#method.neg_mod_power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">neg_mod_power_of_2</a>(self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Divides the negative of a number by a $2^k$, returning just the remainder.</p>\n<p>If the quotient were computed, the quotient and remainder would satisfy $x = q2^k -\nr$ and $0 \\leq r &lt; 2^k$.</p>\n<p>$$\nf(x, k) = 2^k\\left \\lceil \\frac{x}{2^k} \\right \\rceil - x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is nonzero and <code>pow</code> is greater than <code>Self::WIDTH</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2#neg_mod_power_of_2\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","NegModPowerOf2","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NegModPowerOf2Assign-for-u16\" class=\"impl\"><a href=\"#impl-NegModPowerOf2Assign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl NegModPowerOf2Assign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg_mod_power_of_2_assign\" class=\"method trait-impl\"><a href=\"#method.neg_mod_power_of_2_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">neg_mod_power_of_2_assign</a>(&amp;mut self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Divides the negative of a number by $2^k$, returning just the remainder.</p>\n<p>If the quotient were computed, the quotient and remainder would satisfy $x = q2^k -\nr$ and $0 \\leq r &lt; 2^k$.</p>\n<p>$$\nx \\gets 2^k\\left \\lceil \\frac{x}{2^k} \\right \\rceil - x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is nonzero and <code>pow</code> is greater than <code>Self::WIDTH</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2#neg_mod_power_of_2_assign\">here</a>.</p>\n</div></details></div></details>","NegModPowerOf2Assign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NextPowerOf2-for-u16\" class=\"impl\"><a href=\"#impl-NextPowerOf2-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl NextPowerOf2 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_power_of_2\" class=\"method trait-impl\"><a href=\"#method.next_power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">next_power_of_2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>next_power_of_two</code> functions in the standard library,\nfor example <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.next_power_of_two\" title=\"method u32::next_power_of_two\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","NextPowerOf2","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NextPowerOf2Assign-for-u16\" class=\"impl\"><a href=\"#impl-NextPowerOf2Assign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl NextPowerOf2Assign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_power_of_2_assign\" class=\"method trait-impl\"><a href=\"#method.next_power_of_2_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">next_power_of_2_assign</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Replaces a number with the smallest power of 2 greater than or equal to it.</p>\n<p>$x \\gets 2^{\\lceil \\log_2 x \\rceil}$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the next power of 2 is greater than the type’s maximum value.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::next_power_of_2#next_power_of_2_assign\">here</a>.</p>\n</div></details></div></details>","NextPowerOf2Assign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#68\">Source</a></span><a href=\"#impl-Not-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#68\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#68\">Source</a><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details>","Not","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NotAssign-for-u16\" class=\"impl\"><a href=\"#impl-NotAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl NotAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.not_assign\" class=\"method trait-impl\"><a href=\"#method.not_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">not_assign</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Replaces a number with its bitwise negation.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::not#not_assign\">here</a>.</p>\n</div></details></div></details>","NotAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Num-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/lib.rs.html#174\">Source</a><a href=\"#impl-Num-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html\" title=\"trait num_traits::Num\">Num</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.FromStrRadixErr\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/lib.rs.html#174\">Source</a><a href=\"#associatedtype.FromStrRadixErr\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html#associatedtype.FromStrRadixErr\" class=\"associatedtype\">FromStrRadixErr</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.ParseIntError.html\" title=\"struct core::num::error::ParseIntError\">ParseIntError</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/lib.rs.html#174\">Source</a><a href=\"#method.from_str_radix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html#tymethod.from_str_radix\" class=\"fn\">from_str_radix</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.ParseIntError.html\" title=\"struct core::num::error::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Convert from a string and radix (typically <code>2..=36</code>). <a href=\"https://docs.rs/num-traits/0.2/num_traits/trait.Num.html#tymethod.from_str_radix\">Read more</a></div></details></div></details>","Num","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NumCast-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#684\">Source</a><a href=\"#impl-NumCast-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html\" title=\"trait num_traits::cast::NumCast\">NumCast</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#684\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html#tymethod.from\" class=\"fn\">from</a>&lt;N&gt;(n: N) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    N: <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html\" title=\"trait num_traits::cast::ToPrimitive\">ToPrimitive</a>,</div></h4></section></summary><div class='docblock'>Creates a number from another value that can be converted into\na primitive via the <code>ToPrimitive</code> trait. If the source value cannot be\nrepresented by the target type, then <code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.NumCast.html#tymethod.from\">Read more</a></div></details></div></details>","NumCast","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Numeric-for-u16\" class=\"impl\"><a href=\"#impl-Numeric-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Numeric for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Bytes\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Bytes</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">2</a>]</h4></section></summary><div class='docblock'>The <code>[u8; N]</code> byte array that stores values of <code>Self</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes\" class=\"method trait-impl\"><a href=\"#method.to_be_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_be_bytes</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as Numeric&gt;::Bytes</h4></section></summary><div class='docblock'>Return the memory representation of this number as a byte array in\nbig-endian (network) byte order.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes\" class=\"method trait-impl\"><a href=\"#method.to_le_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_le_bytes</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as Numeric&gt;::Bytes</h4></section></summary><div class='docblock'>Return the memory representation of this number as a byte array in\nlittle-endian byte order.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes\" class=\"method trait-impl\"><a href=\"#method.to_ne_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_ne_bytes</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as Numeric&gt;::Bytes</h4></section></summary><div class='docblock'>Return the memory representation of this number as a byte array in\nnative byte order.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes\" class=\"method trait-impl\"><a href=\"#method.from_be_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_be_bytes</a>(bytes: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as Numeric&gt;::Bytes) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Create a numeric value from its representation as a byte array in big\nendian.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes\" class=\"method trait-impl\"><a href=\"#method.from_le_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_le_bytes</a>(bytes: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as Numeric&gt;::Bytes) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Create a numeric value from its representation as a byte array in little\nendian.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes\" class=\"method trait-impl\"><a href=\"#method.from_ne_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_ne_bytes</a>(bytes: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as Numeric&gt;::Bytes) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Create a numeric value from its memory representation as a byte array in\nnative endianness.</div></details></div></details>","Numeric","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#169\">Source</a></span><a href=\"#impl-Octal-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Octal.html\" title=\"trait core::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#169\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Octal.html#tymethod.fmt\">Read more</a></div></details></div></details>","Octal","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-One-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#164\">Source</a><a href=\"#impl-One-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html\" title=\"trait num_traits::identities::One\">One</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#164\">Source</a><a href=\"#method.one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#tymethod.one\" class=\"fn\">one</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns the multiplicative identity element of <code>Self</code>, <code>1</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#tymethod.one\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#164\">Source</a><a href=\"#method.is_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#method.is_one\" class=\"fn\">is_one</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is equal to the multiplicative identity. <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#method.is_one\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#118\">Source</a><a href=\"#method.set_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.One.html#method.set_one\" class=\"fn\">set_one</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>.</div></details></div></details>","One","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-One-for-u16\" class=\"impl\"><a href=\"#impl-One-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl One for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3><div class=\"docblock\"><p>The constant 1.</p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<p>See <a href=\"self\">here</a>.</p>\n</div><div class=\"impl-items\"><section id=\"associatedconstant.ONE\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.ONE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">ONE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 1u16</h4></section></div></details>","One","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OptionFromWasmAbi-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#238\">Source</a><a href=\"#impl-OptionFromWasmAbi-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.OptionFromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::OptionFromWasmAbi\">OptionFromWasmAbi</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_none\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#238\">Source</a><a href=\"#method.is_none\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.OptionFromWasmAbi.html#tymethod.is_none\" class=\"fn\">is_none</a>(js: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests whether the argument is a “none” instance. If so it will be\ndeserialized as <code>None</code>, and otherwise it will be passed to\n<code>FromWasmAbi</code>.</div></details></div></details>","OptionFromWasmAbi","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OptionIntoWasmAbi-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#238\">Source</a><a href=\"#impl-OptionIntoWasmAbi-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.OptionIntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::OptionIntoWasmAbi\">OptionIntoWasmAbi</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.none\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/impls.rs.html#238\">Source</a><a href=\"#method.none\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.OptionIntoWasmAbi.html#tymethod.none\" class=\"fn\">none</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns an ABI instance indicating “none”, which JS will interpret as\nthe <code>None</code> branch of this option. <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.OptionIntoWasmAbi.html#tymethod.none\">Read more</a></div></details></div></details>","OptionIntoWasmAbi","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1780\">Source</a></span><a href=\"#impl-Ord-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1780\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#980-982\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1001-1003\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1027-1029\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OrdAbs-for-u16\" class=\"impl\"><a href=\"#impl-OrdAbs-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OrdAbs for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp_abs\" class=\"method trait-impl\"><a href=\"#method.cmp_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cmp_abs</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Compares the absolute values of two numbers, taking both by reference.</p>\n<p>For unsigned values, this is the same as ordinary comparison.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::cmp_abs#cmp_abs\">here</a>.</p>\n</div></details></div></details>","OrdAbs","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingAdd-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/overflowing.rs.html#24\">Source</a><a href=\"#impl-OverflowingAdd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/overflowing/trait.OverflowingAdd.html\" title=\"trait num_traits::ops::overflowing::OverflowingAdd\">OverflowingAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/overflowing.rs.html#24\">Source</a><a href=\"#method.overflowing_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/overflowing/trait.OverflowingAdd.html#tymethod.overflowing_add\" class=\"fn\">overflowing_add</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Returns a tuple of the sum along with a boolean indicating whether an arithmetic overflow would occur.\nIf an overflow would have occurred then the wrapped value is returned.</div></details></div></details>","OverflowingAdd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingAdd-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingAdd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingAdd for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add\" class=\"method trait-impl\"><a href=\"#method.overflowing_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_add</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>overflowing_add</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.overflowing_add\" title=\"method u32::overflowing_add\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","OverflowingAdd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingAddAssign-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingAddAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingAddAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_assign\" class=\"method trait-impl\"><a href=\"#method.overflowing_add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Adds a number to another number, in place.</p>\n<p>Returns a boolean indicating whether an arithmetic overflow occurred. If an overflow\noccurred, then the wrapped value is assigned.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::overflowing_add#overflowing_add_assign\">here</a>.</p>\n</div></details></div></details>","OverflowingAddAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingAddMul-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingAddMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingAddMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_mul\" class=\"method trait-impl\"><a href=\"#method.overflowing_add_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_add_mul</a>(self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Adds a number and the product of two other numbers.</p>\n<p>Returns a tuple containing the result and a boolean indicating whether an arithmetic\noverflow occured. If an overflow occurred, then the wrapped value is returned.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::overflowing_add_mul#overflowing_add_mul\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","OverflowingAddMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingAddMulAssign-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingAddMulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingAddMulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_mul_assign\" class=\"method trait-impl\"><a href=\"#method.overflowing_add_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_add_mul_assign</a>(&amp;mut self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Adds a number and the product of two other numbers, in place.</p>\n<p>Returns a boolean indicating whether an arithmetic overflow occurred. If an overflow\noccurred, then the wrapped value is assigned.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::overflowing_add_mul#overflowing_add_mul_assign\">here</a>.</p>\n</div></details></div></details>","OverflowingAddMulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingDiv-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingDiv-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingDiv for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div\" class=\"method trait-impl\"><a href=\"#method.overflowing_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_div</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>overflowing_div</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.overflowing_div\" title=\"method u32::overflowing_div\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","OverflowingDiv","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingDivAssign-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingDivAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingDivAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_assign\" class=\"method trait-impl\"><a href=\"#method.overflowing_div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Divides a number by another number, in place.</p>\n<p>Returns a boolean indicating whether an arithmetic overflow occurred. If an overflow\noccurred, then the wrapped value is assigned. Overflow only occurs when <code>Self</code> is\nsigned, <code>self</code> is <code>Self::MIN</code>, and <code>other</code> is -1. The “actual” result, <code>-Self::MIN</code>,\ncan’t be represented and is wrapped back to <code>Self::MIN</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::overflowing_div#overflowing_div_assign\">here</a>.</p>\n</div></details></div></details>","OverflowingDivAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3C%26Integer%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3C%26Integer%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; OverflowingFrom&lt;&amp;'a Integer&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: &amp;Integer) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts an [<code>Integer</code>] to an unsigned primitive integer, wrapping modulo $2^W$,\nwhere $W$ is the width of the primitive integer.</p>\n<p>The returned boolean value indicates whether wrapping occurred.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primitive_int_from_integer#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<&'a Integer>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3C%26Natural%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3C%26Natural%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; OverflowingFrom&lt;&amp;'a Natural&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: &amp;Natural) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a [<code>Natural</code>] to a value of an unsigned primitive integer type that’s\nsmaller than a <a href=\"crate#limbs\"><code>Limb</code></a>, wrapping modulo $2^W$, where $W$ is the width\nof a limb.</p>\n<p>The returned boolean value indicates whether wrapping occurred.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primitive_int_from_natural#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<&'a Natural>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped. The second component of the result indicates whether overflow\noccurred.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = (m, k \\neq 0)$, where $m &lt; 2^W$ and\n$n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = (m, k \\neq 0)$, where $-2^{W-1} \\leq m\n&lt; 2^{W-1}$ and $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped. The second component of the result indicates whether overflow\noccurred.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = (m, k \\neq 0)$, where $m &lt; 2^W$ and\n$n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = (m, k \\neq 0)$, where $-2^{W-1} \\leq m\n&lt; 2^{W-1}$ and $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped. The second component of the result indicates whether overflow\noccurred.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = (m, k \\neq 0)$, where $m &lt; 2^W$ and\n$n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = (m, k \\neq 0)$, where $-2^{W-1} \\leq m\n&lt; 2^{W-1}$ and $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped. The second component of the result indicates whether overflow\noccurred.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = (m, k \\neq 0)$, where $m &lt; 2^W$ and\n$n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = (m, k \\neq 0)$, where $-2^{W-1} \\leq m\n&lt; 2^{W-1}$ and $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped. The second component of the result indicates whether overflow\noccurred.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = (m, k \\neq 0)$, where $m &lt; 2^W$ and\n$n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = (m, k \\neq 0)$, where $-2^{W-1} \\leq m\n&lt; 2^{W-1}$ and $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped. The second component of the result indicates whether overflow\noccurred.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = (m, k \\neq 0)$, where $m &lt; 2^W$ and\n$n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = (m, k \\neq 0)$, where $-2^{W-1} \\leq m\n&lt; 2^{W-1}$ and $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped. The second component of the result indicates whether overflow\noccurred.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = (m, k \\neq 0)$, where $m &lt; 2^W$ and\n$n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = (m, k \\neq 0)$, where $-2^{W-1} \\leq m\n&lt; 2^{W-1}$ and $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value to its own type. Since this conversion is always valid and always\nleaves the value unchanged, the second component of the result is always false (no\noverflow).</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped. The second component of the result indicates whether overflow\noccurred.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = (m, k \\neq 0)$, where $m &lt; 2^W$ and\n$n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = (m, k \\neq 0)$, where $-2^{W-1} \\leq m\n&lt; 2^{W-1}$ and $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped. The second component of the result indicates whether overflow\noccurred.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = (m, k \\neq 0)$, where $m &lt; 2^W$ and\n$n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = (m, k \\neq 0)$, where $-2^{W-1} \\leq m\n&lt; 2^{W-1}$ and $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value to the value’s type. Since this conversion is always valid and\nalways leaves the value unchanged, the second component of the result is always\nfalse (no overflow).</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingFrom%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingFrom%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_from\" class=\"method trait-impl\"><a href=\"#method.overflowing_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped. The second component of the result indicates whether overflow\noccurred.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = (m, k \\neq 0)$, where $m &lt; 2^W$ and\n$n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = (m, k \\neq 0)$, where $-2^{W-1} \\leq m\n&lt; 2^{W-1}$ and $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#overflowing_from\">here</a>.</p>\n</div></details></div></details>","OverflowingFrom<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingMul-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/overflowing.rs.html#66\">Source</a><a href=\"#impl-OverflowingMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/overflowing/trait.OverflowingMul.html\" title=\"trait num_traits::ops::overflowing::OverflowingMul\">OverflowingMul</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/overflowing.rs.html#66\">Source</a><a href=\"#method.overflowing_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/overflowing/trait.OverflowingMul.html#tymethod.overflowing_mul\" class=\"fn\">overflowing_mul</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Returns a tuple of the product along with a boolean indicating whether an arithmetic overflow would occur.\nIf an overflow would have occurred then the wrapped value is returned.</div></details></div></details>","OverflowingMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingMul-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul\" class=\"method trait-impl\"><a href=\"#method.overflowing_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_mul</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>overflowing_mul</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.overflowing_mul\" title=\"method u32::overflowing_mul\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","OverflowingMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingMulAssign-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingMulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingMulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul_assign\" class=\"method trait-impl\"><a href=\"#method.overflowing_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Multiplies a number by another number, in place.</p>\n<p>Returns a boolean indicating whether an arithmetic overflow occurred. If an overflow\noccurred, then the wrapped value is assigned.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::overflowing_mul#overflowing_mul_assign\">here</a>.</p>\n</div></details></div></details>","OverflowingMulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingNeg-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingNeg-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingNeg for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method trait-impl\"><a href=\"#method.overflowing_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>overflowing_neg</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.overflowing_neg\" title=\"method u32::overflowing_neg\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","OverflowingNeg","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingNegAssign-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingNegAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingNegAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg_assign\" class=\"method trait-impl\"><a href=\"#method.overflowing_neg_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_neg_assign</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Negates a number in place.</p>\n<p>Returns a boolean indicating whether an arithmetic overflow occurred. If an overflow\noccurred, then the wrapped value is assigned.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::overflowing_neg#overflowing_neg_assign\">here</a>.</p>\n</div></details></div></details>","OverflowingNegAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingPow%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingPow%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingPow&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow\" class=\"method trait-impl\"><a href=\"#method.overflowing_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>overflowing_pow</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.overflowing_pow\" title=\"method u32::overflowing_pow\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","OverflowingPow<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingPowAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingPowAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingPowAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow_assign\" class=\"method trait-impl\"><a href=\"#method.overflowing_pow_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_pow_assign</a>(&amp;mut self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Raises a number to a power, in place.</p>\n<p>Returns a boolean indicating whether an arithmetic overflow occurred. If an overflow\noccurred, then the wrapped value is assigned.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>exp.significant_bits()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::overflowing_pow#overflowing_pow_assign\">here</a>.</p>\n</div></details></div></details>","OverflowingPowAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingSquare-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingSquare-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingSquare for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_square\" class=\"method trait-impl\"><a href=\"#method.overflowing_square\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_square</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Squares a number.</p>\n<p>Returns a tuple containing the result and a boolean indicating whether an arithmetic\noccurred. If an overflow occurred, then the wrapped value is returned.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::overflowing_square#overflowing_square\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","OverflowingSquare","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingSquareAssign-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingSquareAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingSquareAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_square_assign\" class=\"method trait-impl\"><a href=\"#method.overflowing_square_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_square_assign</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Squares a number in place.</p>\n<p>Returns a boolean indicating whether an arithmetic overflow occurred. If an overflow\noccurred, then the wrapped value is assigned.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::overflowing_square#overflowing_square_assign\">here</a>.</p>\n</div></details></div></details>","OverflowingSquareAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingSub-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/overflowing.rs.html#45\">Source</a><a href=\"#impl-OverflowingSub-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/overflowing/trait.OverflowingSub.html\" title=\"trait num_traits::ops::overflowing::OverflowingSub\">OverflowingSub</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/overflowing.rs.html#45\">Source</a><a href=\"#method.overflowing_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/overflowing/trait.OverflowingSub.html#tymethod.overflowing_sub\" class=\"fn\">overflowing_sub</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Returns a tuple of the difference along with a boolean indicating whether an arithmetic overflow would occur.\nIf an overflow would have occurred then the wrapped value is returned.</div></details></div></details>","OverflowingSub","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingSub-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingSub-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingSub for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub\" class=\"method trait-impl\"><a href=\"#method.overflowing_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>overflowing_sub</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.overflowing_sub\" title=\"method u32::overflowing_sub\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","OverflowingSub","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingSubAssign-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingSubAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingSubAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_assign\" class=\"method trait-impl\"><a href=\"#method.overflowing_sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Subtracts a number by another number, in place.</p>\n<p>Returns a boolean indicating whether an arithmetic overflow occurred. If an overflow\noccurred, then the wrapped value is assigned.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::overflowing_sub#overflowing_sub_assign\">here</a>.</p>\n</div></details></div></details>","OverflowingSubAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingSubMul-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingSubMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingSubMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_mul\" class=\"method trait-impl\"><a href=\"#method.overflowing_sub_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_sub_mul</a>(self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Subtracts a number by the product of two other numbers.</p>\n<p>Returns a tuple containing the result and a boolean indicating whether an arithmetic\noverflow would occur. If an overflow would have occurred, then the wrapped value is\nreturned.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::overflowing_sub_mul#overflowing_sub_mul\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","OverflowingSubMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-OverflowingSubMulAssign-for-u16\" class=\"impl\"><a href=\"#impl-OverflowingSubMulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl OverflowingSubMulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_mul_assign\" class=\"method trait-impl\"><a href=\"#method.overflowing_sub_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">overflowing_sub_mul_assign</a>(&amp;mut self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Subtracts a number by the product of two other numbers, in place.</p>\n<p>Returns a boolean indicating whether an arithmetic overflow would occur. If an\noverflow would have occurred, then the wrapped value is assigned.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::overflowing_sub_mul#overflowing_sub_mul_assign\">here</a>.</p>\n</div></details></div></details>","OverflowingSubMulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Parity-for-u16\" class=\"impl\"><a href=\"#impl-Parity-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Parity for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.even\" class=\"method trait-impl\"><a href=\"#method.even\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">even</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Tests whether a number is even.</p>\n<p>$f(x) = (2|x)$.</p>\n<p>$f(x) = (\\exists k \\in \\N \\ x = 2k)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::parity#even\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.odd\" class=\"method trait-impl\"><a href=\"#method.odd\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">odd</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Tests whether a number is odd.</p>\n<p>$f(x) = (2\\nmid x)$.</p>\n<p>$f(x) = (\\exists k \\in \\N \\ x = 2k+1)$.</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::parity#odd\">here</a>.</p>\n</div></details></div></details>","Parity","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParseHex-for-u16\" class=\"impl\"><a href=\"#impl-ParseHex-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ParseHex for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_hex\" class=\"method trait-impl\"><a href=\"#method.parse_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">parse_hex</a>(input: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, ParseError&gt;</h4></section></summary><div class='docblock'>Parse the value from hex.</div></details></div></details>","ParseHex","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CInteger%3E-for-u16\" class=\"impl\"><a href=\"#impl-PartialEq%3CInteger%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Integer&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Integer) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether an unsigned primitive integer is equal to an [<code>Integer</code>].</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::partial_eq_primitive_int#partial_eq\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Integer>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CNatural%3E-for-u16\" class=\"impl\"><a href=\"#impl-PartialEq%3CNatural%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Natural&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Natural) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether a value of an unsigned primitive integer type that’s smaller than\na <a href=\"crate#limbs\"><code>Limb</code></a> is equal to a [<code>Natural</code>].</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::partial_eq_primitive_int#partial_eq\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Natural>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CPort%3CT%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-PartialEq%3CPort%3CT%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Port&lt;T&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Port&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Port<T>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CStatusCode%3E-for-u16\" class=\"impl\"><a href=\"#impl-PartialEq%3CStatusCode%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;StatusCode&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;StatusCode) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<StatusCode>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CValue%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_json/1.0.140/src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#impl-PartialEq%3CValue%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;<a class=\"enum\" href=\"https://docs.rs/serde_json/1.0.140/serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_json/1.0.140/src/serde_json/value/partial_eq.rs.html#97-103\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"https://docs.rs/serde_json/1.0.140/serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<Value>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1655-1657\">Source</a></span><a href=\"#impl-PartialEq-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1655-1657\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1655-1657\">Source</a><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CInteger%3E-for-u16\" class=\"impl\"><a href=\"#impl-PartialOrd%3CInteger%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Integer&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Integer) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Compares an unsigned primitive integer to an [<code>Integer</code>].</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::partial_cmp_primitive_int#partial_cmp\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1335\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1353\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Integer>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CNatural%3E-for-u16\" class=\"impl\"><a href=\"#impl-PartialOrd%3CNatural%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Natural&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Natural) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Compares a value of an unsigned primitive integer type that’s smaller than a\n<a href=\"crate#limbs\"><code>Limb</code></a> to a [<code>Natural</code>].</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::partial_cmp_primitive_int#partial_cmp\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1335\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1353\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Natural>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1780\">Source</a></span><a href=\"#impl-PartialOrd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1780\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1780\">Source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1780\">Source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1780\">Source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1780\">Source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details></div></details>","PartialOrd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrdAbs%3CInteger%3E-for-u16\" class=\"impl\"><a href=\"#impl-PartialOrdAbs%3CInteger%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PartialOrdAbs&lt;Integer&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp_abs\" class=\"method trait-impl\"><a href=\"#method.partial_cmp_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_cmp_abs</a>(&amp;self, other: &amp;Integer) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Compares the absolute values of an unsigned primitive integer and an [<code>Integer</code>].</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<p>See <a href=\"super::partial_cmp_abs_primitive_int#partial_cmp_abs\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt_abs\" class=\"method trait-impl\"><a href=\"#method.lt_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lt_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines whether the absolute value of one number is less than the absolute value of\nanother. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le_abs\" class=\"method trait-impl\"><a href=\"#method.le_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">le_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines whether the absolute value of one number is less than or equal to the absolute\nvalue of another. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt_abs\" class=\"method trait-impl\"><a href=\"#method.gt_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gt_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines whether the absolute value of one number is greater than the absolute value of\nanother. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge_abs\" class=\"method trait-impl\"><a href=\"#method.ge_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ge_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines whether the absolute value of one number is greater than or equal to the absolute\nvalue of another. <a>Read more</a></div></details></div></details>","PartialOrdAbs<Integer>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrdAbs%3CNatural%3E-for-u16\" class=\"impl\"><a href=\"#impl-PartialOrdAbs%3CNatural%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PartialOrdAbs&lt;Natural&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp_abs\" class=\"method trait-impl\"><a href=\"#method.partial_cmp_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_cmp_abs</a>(&amp;self, other: &amp;Natural) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Compares a value of unsigned primitive integer type to a [<code>Natural</code>].</p>\n<p>Since both values are non-negative, this is the same as ordinary\n<a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" title=\"method core::cmp::PartialOrd::partial_cmp\"><code>partial_cmp</code></a>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<p>See <a href=\"super::partial_cmp_abs_primitive_int#partial_cmp_abs\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt_abs\" class=\"method trait-impl\"><a href=\"#method.lt_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lt_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines whether the absolute value of one number is less than the absolute value of\nanother. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le_abs\" class=\"method trait-impl\"><a href=\"#method.le_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">le_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines whether the absolute value of one number is less than or equal to the absolute\nvalue of another. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt_abs\" class=\"method trait-impl\"><a href=\"#method.gt_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gt_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines whether the absolute value of one number is greater than the absolute value of\nanother. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge_abs\" class=\"method trait-impl\"><a href=\"#method.ge_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ge_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines whether the absolute value of one number is greater than or equal to the absolute\nvalue of another. <a>Read more</a></div></details></div></details>","PartialOrdAbs<Natural>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrdAbs-for-u16\" class=\"impl\"><a href=\"#impl-PartialOrdAbs-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PartialOrdAbs for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp_abs\" class=\"method trait-impl\"><a href=\"#method.partial_cmp_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_cmp_abs</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Compares the absolute values of two numbers, taking both by reference.</p>\n<p>The [<code>PartialOrdAbs</code>] interface allows for pairs of incomparable elements, but for\nprimitive integers these never occur.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::cmp_abs#partial_cmp_abs\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt_abs\" class=\"method trait-impl\"><a href=\"#method.lt_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lt_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines whether the absolute value of one number is less than the absolute value of\nanother. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le_abs\" class=\"method trait-impl\"><a href=\"#method.le_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">le_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines whether the absolute value of one number is less than or equal to the absolute\nvalue of another. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt_abs\" class=\"method trait-impl\"><a href=\"#method.gt_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gt_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines whether the absolute value of one number is greater than the absolute value of\nanother. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge_abs\" class=\"method trait-impl\"><a href=\"#method.ge_abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ge_abs</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Determines whether the absolute value of one number is greater than or equal to the absolute\nvalue of another. <a>Read more</a></div></details></div></details>","PartialOrdAbs","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26u16%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#78\">Source</a><a href=\"#impl-Pow%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#78\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#78\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26u32%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#79\">Source</a><a href=\"#impl-Pow%3C%26u32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#79\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#79\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26u8%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#77\">Source</a><a href=\"#impl-Pow%3C%26u8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#77\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#77\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3C%26usize%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#80\">Source</a><a href=\"#impl-Pow%3C%26usize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#80\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#80\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<&'a usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3CPInt%3CU%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/typenum/1.18.0/src/typenum/type_operators.rs.html#233\">Source</a><a href=\"#impl-Pow%3CPInt%3CU%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U&gt; <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/int/struct.PInt.html\" title=\"struct typenum::int::PInt\">PInt</a>&lt;U&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/marker_traits/trait.Unsigned.html\" title=\"trait typenum::marker_traits::Unsigned\">Unsigned</a> + <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/marker_traits/trait.NonZero.html\" title=\"trait typenum::marker_traits::NonZero\">NonZero</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/typenum/1.18.0/src/typenum/type_operators.rs.html#233\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The result of the exponentiation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/typenum/1.18.0/src/typenum/type_operators.rs.html#233\">Source</a><a href=\"#method.powi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#tymethod.powi\" class=\"fn\">powi</a>(self, _: <a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/int/struct.PInt.html\" title=\"struct typenum::int::PInt\">PInt</a>&lt;U&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/int/struct.PInt.html\" title=\"struct typenum::int::PInt\">PInt</a>&lt;U&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#associatedtype.Output\" title=\"type typenum::type_operators::Pow::Output\">Output</a></h4></section></summary><div class='docblock'>This function isn’t used in this crate, but may be useful for others.\nIt is implemented for primitives. <a href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#tymethod.powi\">Read more</a></div></details></div></details>","Pow<PInt<U>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3CUInt%3CU,+B%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/typenum/1.18.0/src/typenum/type_operators.rs.html#233\">Source</a><a href=\"#impl-Pow%3CUInt%3CU,+B%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U, B&gt; <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/uint/struct.UInt.html\" title=\"struct typenum::uint::UInt\">UInt</a>&lt;U, B&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    U: <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/marker_traits/trait.Unsigned.html\" title=\"trait typenum::marker_traits::Unsigned\">Unsigned</a>,\n    B: <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/marker_traits/trait.Bit.html\" title=\"trait typenum::marker_traits::Bit\">Bit</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/typenum/1.18.0/src/typenum/type_operators.rs.html#233\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The result of the exponentiation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/typenum/1.18.0/src/typenum/type_operators.rs.html#233\">Source</a><a href=\"#method.powi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#tymethod.powi\" class=\"fn\">powi</a>(self, _: <a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/uint/struct.UInt.html\" title=\"struct typenum::uint::UInt\">UInt</a>&lt;U, B&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/uint/struct.UInt.html\" title=\"struct typenum::uint::UInt\">UInt</a>&lt;U, B&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#associatedtype.Output\" title=\"type typenum::type_operators::Pow::Output\">Output</a></h4></section></summary><div class='docblock'>This function isn’t used in this crate, but may be useful for others.\nIt is implemented for primitives. <a href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#tymethod.powi\">Read more</a></div></details></div></details>","Pow<UInt<U, B>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3CUTerm%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/typenum/1.18.0/src/typenum/type_operators.rs.html#233\">Source</a><a href=\"#impl-Pow%3CUTerm%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/uint/struct.UTerm.html\" title=\"struct typenum::uint::UTerm\">UTerm</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/typenum/1.18.0/src/typenum/type_operators.rs.html#233\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The result of the exponentiation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/typenum/1.18.0/src/typenum/type_operators.rs.html#233\">Source</a><a href=\"#method.powi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#tymethod.powi\" class=\"fn\">powi</a>(self, _: <a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/uint/struct.UTerm.html\" title=\"struct typenum::uint::UTerm\">UTerm</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/uint/struct.UTerm.html\" title=\"struct typenum::uint::UTerm\">UTerm</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#associatedtype.Output\" title=\"type typenum::type_operators::Pow::Output\">Output</a></h4></section></summary><div class='docblock'>This function isn’t used in this crate, but may be useful for others.\nIt is implemented for primitives. <a href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#tymethod.powi\">Read more</a></div></details></div></details>","Pow<UTerm>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3CZ0%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/typenum/1.18.0/src/typenum/type_operators.rs.html#233\">Source</a><a href=\"#impl-Pow%3CZ0%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/int/struct.Z0.html\" title=\"struct typenum::int::Z0\">Z0</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/typenum/1.18.0/src/typenum/type_operators.rs.html#233\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The result of the exponentiation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.powi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/typenum/1.18.0/src/typenum/type_operators.rs.html#233\">Source</a><a href=\"#method.powi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#tymethod.powi\" class=\"fn\">powi</a>(self, _: <a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/int/struct.Z0.html\" title=\"struct typenum::int::Z0\">Z0</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html\" title=\"trait typenum::type_operators::Pow\">Pow</a>&lt;<a class=\"struct\" href=\"https://docs.rs/typenum/1.18.0/typenum/int/struct.Z0.html\" title=\"struct typenum::int::Z0\">Z0</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#associatedtype.Output\" title=\"type typenum::type_operators::Pow::Output\">Output</a></h4></section></summary><div class='docblock'>This function isn’t used in this crate, but may be useful for others.\nIt is implemented for primitives. <a href=\"https://docs.rs/typenum/1.18.0/typenum/type_operators/trait.Pow.html#tymethod.powi\">Read more</a></div></details></div></details>","Pow<Z0>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cu16%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#78\">Source</a><a href=\"#impl-Pow%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#78\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#78\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cu32%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#79\">Source</a><a href=\"#impl-Pow%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#79\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#79\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-Pow%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Pow&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>pow</code> functions in the standard library, for example\n<a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.pow\" title=\"method u32::pow\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","Pow<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cu8%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#77\">Source</a><a href=\"#impl-Pow%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#77\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#77\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pow%3Cusize%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#80\">Source</a><a href=\"#impl-Pow%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html\" title=\"trait num_traits::pow::Pow\">Pow</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#80\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The result after applying the operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/pow.rs.html#80\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\" class=\"fn\">pow</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns <code>self</code> to the power <code>rhs</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/pow/trait.Pow.html#tymethod.pow\">Read more</a></div></details></div></details>","Pow<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow_assign\" class=\"method trait-impl\"><a href=\"#method.pow_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">pow_assign</a>(&amp;mut self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Raises a number to a power, in place.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>exp.significant_bits()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::pow#pow_assign\">here</a>.</p>\n</div></details></div></details>","PowAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.power_of_2\" class=\"method trait-impl\"><a href=\"#method.power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">power_of_2</a>(pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Raises 2 to an integer power.</p>\n<p>$f(k) = 2^k$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the result is not representable.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2#power_of_2\">here</a>.</p>\n</div></details></div></details>","PowerOf2<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2DigitIterable%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2DigitIterable%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2DigitIterable&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.power_of_2_digits\" class=\"method trait-impl\"><a href=\"#method.power_of_2_digits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">power_of_2_digits</a>(\n    self,\n    log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n) -&gt; PrimitivePowerOf2DigitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a double-ended iterator over the base-$2^k$ digits of a primitive\nunsigned integer.</p>\n<p>The forward order is ascending, so that less-significant digits appear\nfirst. There are no trailing zeros going forward, or leading zeros going\nbackward.</p>\n<p>If it’s necessary to get a [<code>Vec</code>] of all the digits, consider using\n<a href=\"super::super::traits::PowerOf2Digits::to_power_of_2_digits_asc\"><code>to_power_of_2_digits_asc</code></a>\nor\n<a href=\"super::super::traits::PowerOf2Digits::to_power_of_2_digits_desc\"><code>to_power_of_2_digits_desc</code></a>\ninstead.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is larger than the width of output type width.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digit_iterable#power_of_2_digits\">here</a>.</p>\n</div></details><section id=\"associatedtype.PowerOf2DigitIterator\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PowerOf2DigitIterator\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PowerOf2DigitIterator</a> = PrimitivePowerOf2DigitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;</h4></section></div></details>","PowerOf2DigitIterable<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2DigitIterable%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2DigitIterable%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2DigitIterable&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.power_of_2_digits\" class=\"method trait-impl\"><a href=\"#method.power_of_2_digits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">power_of_2_digits</a>(\n    self,\n    log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n) -&gt; PrimitivePowerOf2DigitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a double-ended iterator over the base-$2^k$ digits of a primitive\nunsigned integer.</p>\n<p>The forward order is ascending, so that less-significant digits appear\nfirst. There are no trailing zeros going forward, or leading zeros going\nbackward.</p>\n<p>If it’s necessary to get a [<code>Vec</code>] of all the digits, consider using\n<a href=\"super::super::traits::PowerOf2Digits::to_power_of_2_digits_asc\"><code>to_power_of_2_digits_asc</code></a>\nor\n<a href=\"super::super::traits::PowerOf2Digits::to_power_of_2_digits_desc\"><code>to_power_of_2_digits_desc</code></a>\ninstead.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is larger than the width of output type width.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digit_iterable#power_of_2_digits\">here</a>.</p>\n</div></details><section id=\"associatedtype.PowerOf2DigitIterator\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PowerOf2DigitIterator\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PowerOf2DigitIterator</a> = PrimitivePowerOf2DigitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></div></details>","PowerOf2DigitIterable<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2DigitIterable%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2DigitIterable%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2DigitIterable&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.power_of_2_digits\" class=\"method trait-impl\"><a href=\"#method.power_of_2_digits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">power_of_2_digits</a>(\n    self,\n    log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n) -&gt; PrimitivePowerOf2DigitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a double-ended iterator over the base-$2^k$ digits of a primitive\nunsigned integer.</p>\n<p>The forward order is ascending, so that less-significant digits appear\nfirst. There are no trailing zeros going forward, or leading zeros going\nbackward.</p>\n<p>If it’s necessary to get a [<code>Vec</code>] of all the digits, consider using\n<a href=\"super::super::traits::PowerOf2Digits::to_power_of_2_digits_asc\"><code>to_power_of_2_digits_asc</code></a>\nor\n<a href=\"super::super::traits::PowerOf2Digits::to_power_of_2_digits_desc\"><code>to_power_of_2_digits_desc</code></a>\ninstead.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is larger than the width of output type width.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digit_iterable#power_of_2_digits\">here</a>.</p>\n</div></details><section id=\"associatedtype.PowerOf2DigitIterator\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PowerOf2DigitIterator\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PowerOf2DigitIterator</a> = PrimitivePowerOf2DigitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;</h4></section></div></details>","PowerOf2DigitIterable<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2DigitIterable%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2DigitIterable%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2DigitIterable&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.power_of_2_digits\" class=\"method trait-impl\"><a href=\"#method.power_of_2_digits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">power_of_2_digits</a>(\n    self,\n    log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n) -&gt; PrimitivePowerOf2DigitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a double-ended iterator over the base-$2^k$ digits of a primitive\nunsigned integer.</p>\n<p>The forward order is ascending, so that less-significant digits appear\nfirst. There are no trailing zeros going forward, or leading zeros going\nbackward.</p>\n<p>If it’s necessary to get a [<code>Vec</code>] of all the digits, consider using\n<a href=\"super::super::traits::PowerOf2Digits::to_power_of_2_digits_asc\"><code>to_power_of_2_digits_asc</code></a>\nor\n<a href=\"super::super::traits::PowerOf2Digits::to_power_of_2_digits_desc\"><code>to_power_of_2_digits_desc</code></a>\ninstead.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is larger than the width of output type width.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digit_iterable#power_of_2_digits\">here</a>.</p>\n</div></details><section id=\"associatedtype.PowerOf2DigitIterator\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PowerOf2DigitIterator\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PowerOf2DigitIterator</a> = PrimitivePowerOf2DigitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;</h4></section></div></details>","PowerOf2DigitIterable<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2DigitIterable%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2DigitIterable%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2DigitIterable&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.power_of_2_digits\" class=\"method trait-impl\"><a href=\"#method.power_of_2_digits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">power_of_2_digits</a>(\n    self,\n    log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n) -&gt; PrimitivePowerOf2DigitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a double-ended iterator over the base-$2^k$ digits of a primitive\nunsigned integer.</p>\n<p>The forward order is ascending, so that less-significant digits appear\nfirst. There are no trailing zeros going forward, or leading zeros going\nbackward.</p>\n<p>If it’s necessary to get a [<code>Vec</code>] of all the digits, consider using\n<a href=\"super::super::traits::PowerOf2Digits::to_power_of_2_digits_asc\"><code>to_power_of_2_digits_asc</code></a>\nor\n<a href=\"super::super::traits::PowerOf2Digits::to_power_of_2_digits_desc\"><code>to_power_of_2_digits_desc</code></a>\ninstead.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is larger than the width of output type width.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digit_iterable#power_of_2_digits\">here</a>.</p>\n</div></details><section id=\"associatedtype.PowerOf2DigitIterator\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PowerOf2DigitIterator\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PowerOf2DigitIterator</a> = PrimitivePowerOf2DigitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;</h4></section></div></details>","PowerOf2DigitIterable<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2DigitIterable%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2DigitIterable%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2DigitIterable&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.power_of_2_digits\" class=\"method trait-impl\"><a href=\"#method.power_of_2_digits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">power_of_2_digits</a>(\n    self,\n    log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n) -&gt; PrimitivePowerOf2DigitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a double-ended iterator over the base-$2^k$ digits of a primitive\nunsigned integer.</p>\n<p>The forward order is ascending, so that less-significant digits appear\nfirst. There are no trailing zeros going forward, or leading zeros going\nbackward.</p>\n<p>If it’s necessary to get a [<code>Vec</code>] of all the digits, consider using\n<a href=\"super::super::traits::PowerOf2Digits::to_power_of_2_digits_asc\"><code>to_power_of_2_digits_asc</code></a>\nor\n<a href=\"super::super::traits::PowerOf2Digits::to_power_of_2_digits_desc\"><code>to_power_of_2_digits_desc</code></a>\ninstead.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is larger than the width of output type width.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digit_iterable#power_of_2_digits\">here</a>.</p>\n</div></details><section id=\"associatedtype.PowerOf2DigitIterator\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.PowerOf2DigitIterator\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">PowerOf2DigitIterator</a> = PrimitivePowerOf2DigitIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></div></details>","PowerOf2DigitIterable<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2Digits%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2Digits%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2Digits&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_power_of_2_digits_asc\" class=\"method trait-impl\"><a href=\"#method.to_power_of_2_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_power_of_2_digits_asc</a>(&amp;self, log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the base-$2^k$ digits of a number in ascending\norder (least- to most-significant).</p>\n<p>The base-2 logarithm of the base is specified. <code>log_base</code> must be no larger\nthan the width of the digit type. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty;\notherwise, it ends with a nonzero digit.</p>\n<p>$f(x, k) = (d_i)_ {i=0}^{n-1}$, where $0 \\leq d_i &lt; 2^k$ for all $i$, $n=0$\nor $d_{n-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{n-1}2^{ki}d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the output type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#to_power_of_2_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_power_of_2_digits_desc\" class=\"method trait-impl\"><a href=\"#method.to_power_of_2_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_power_of_2_digits_desc</a>(&amp;self, log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the base-$2^k$ digits of a number in descending\norder (most- to least-significant).</p>\n<p>The base-2 logarithm of the base is specified. <code>log_base</code> must be no larger\nthan the width of the digit type. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty;\notherwise, it begins with a nonzero digit.</p>\n<p>$f(x, k) = (d_i)_ {i=0}^{n-1}$, where $0 \\leq d_i &lt; 2^k$ for all $i$, $n=0$\nor $d_0 \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{n-1}2^{k (n-i-1)}d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the output type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#to_power_of_2_digits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_power_of_2_digits_asc\" class=\"method trait-impl\"><a href=\"#method.from_power_of_2_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_power_of_2_digits_asc</a>&lt;I&gt;(log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of base-$2^k$ digits into a value.</p>\n<p>The base-2 logarithm of the base is specified. The input digits are in\nascending order (least- to most-significant). <code>log_base</code> must be no larger\nthan the width of the digit type. The function returns <code>None</code> if the input\nrepresents a number that can’t fit in the output type.</p>\n<p>$$\nf((d_i)_ {i=0}^{n-1}, k) = \\sum_{i=0}^{n-1}2^{ki}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the digit type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#from_power_of_2_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_power_of_2_digits_desc\" class=\"method trait-impl\"><a href=\"#method.from_power_of_2_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_power_of_2_digits_desc</a>&lt;I&gt;(log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of base-$2^k$ digits into a value.</p>\n<p>The base-2 logarithm of the base is specified. The input digits are in\ndescending order (most- to least-significant). <code>log_base</code> must be no larger\nthan the width of the digit type. The function returns <code>None</code> if the input\nrepresents a number that can’t fit in the output type.</p>\n<p>$$\nf((d_i)_ {i=0}^{n-1}, k) = \\sum_{i=0}^{n-1}2^{k (n-i-1)}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the digit type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#from_power_of_2_digits_desc\">here</a>.</p>\n</div></details></div></details>","PowerOf2Digits<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2Digits%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2Digits%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2Digits&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_power_of_2_digits_asc\" class=\"method trait-impl\"><a href=\"#method.to_power_of_2_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_power_of_2_digits_asc</a>(&amp;self, log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the base-$2^k$ digits of a number in ascending\norder (least- to most-significant).</p>\n<p>The base-2 logarithm of the base is specified. <code>log_base</code> must be no larger\nthan the width of the digit type. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty;\notherwise, it ends with a nonzero digit.</p>\n<p>$f(x, k) = (d_i)_ {i=0}^{n-1}$, where $0 \\leq d_i &lt; 2^k$ for all $i$, $n=0$\nor $d_{n-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{n-1}2^{ki}d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the output type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#to_power_of_2_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_power_of_2_digits_desc\" class=\"method trait-impl\"><a href=\"#method.to_power_of_2_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_power_of_2_digits_desc</a>(&amp;self, log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the base-$2^k$ digits of a number in descending\norder (most- to least-significant).</p>\n<p>The base-2 logarithm of the base is specified. <code>log_base</code> must be no larger\nthan the width of the digit type. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty;\notherwise, it begins with a nonzero digit.</p>\n<p>$f(x, k) = (d_i)_ {i=0}^{n-1}$, where $0 \\leq d_i &lt; 2^k$ for all $i$, $n=0$\nor $d_0 \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{n-1}2^{k (n-i-1)}d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the output type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#to_power_of_2_digits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_power_of_2_digits_asc\" class=\"method trait-impl\"><a href=\"#method.from_power_of_2_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_power_of_2_digits_asc</a>&lt;I&gt;(log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of base-$2^k$ digits into a value.</p>\n<p>The base-2 logarithm of the base is specified. The input digits are in\nascending order (least- to most-significant). <code>log_base</code> must be no larger\nthan the width of the digit type. The function returns <code>None</code> if the input\nrepresents a number that can’t fit in the output type.</p>\n<p>$$\nf((d_i)_ {i=0}^{n-1}, k) = \\sum_{i=0}^{n-1}2^{ki}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the digit type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#from_power_of_2_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_power_of_2_digits_desc\" class=\"method trait-impl\"><a href=\"#method.from_power_of_2_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_power_of_2_digits_desc</a>&lt;I&gt;(log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of base-$2^k$ digits into a value.</p>\n<p>The base-2 logarithm of the base is specified. The input digits are in\ndescending order (most- to least-significant). <code>log_base</code> must be no larger\nthan the width of the digit type. The function returns <code>None</code> if the input\nrepresents a number that can’t fit in the output type.</p>\n<p>$$\nf((d_i)_ {i=0}^{n-1}, k) = \\sum_{i=0}^{n-1}2^{k (n-i-1)}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the digit type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#from_power_of_2_digits_desc\">here</a>.</p>\n</div></details></div></details>","PowerOf2Digits<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2Digits%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2Digits%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2Digits&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_power_of_2_digits_asc\" class=\"method trait-impl\"><a href=\"#method.to_power_of_2_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_power_of_2_digits_asc</a>(&amp;self, log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the base-$2^k$ digits of a number in ascending\norder (least- to most-significant).</p>\n<p>The base-2 logarithm of the base is specified. <code>log_base</code> must be no larger\nthan the width of the digit type. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty;\notherwise, it ends with a nonzero digit.</p>\n<p>$f(x, k) = (d_i)_ {i=0}^{n-1}$, where $0 \\leq d_i &lt; 2^k$ for all $i$, $n=0$\nor $d_{n-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{n-1}2^{ki}d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the output type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#to_power_of_2_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_power_of_2_digits_desc\" class=\"method trait-impl\"><a href=\"#method.to_power_of_2_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_power_of_2_digits_desc</a>(&amp;self, log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the base-$2^k$ digits of a number in descending\norder (most- to least-significant).</p>\n<p>The base-2 logarithm of the base is specified. <code>log_base</code> must be no larger\nthan the width of the digit type. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty;\notherwise, it begins with a nonzero digit.</p>\n<p>$f(x, k) = (d_i)_ {i=0}^{n-1}$, where $0 \\leq d_i &lt; 2^k$ for all $i$, $n=0$\nor $d_0 \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{n-1}2^{k (n-i-1)}d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the output type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#to_power_of_2_digits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_power_of_2_digits_asc\" class=\"method trait-impl\"><a href=\"#method.from_power_of_2_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_power_of_2_digits_asc</a>&lt;I&gt;(log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of base-$2^k$ digits into a value.</p>\n<p>The base-2 logarithm of the base is specified. The input digits are in\nascending order (least- to most-significant). <code>log_base</code> must be no larger\nthan the width of the digit type. The function returns <code>None</code> if the input\nrepresents a number that can’t fit in the output type.</p>\n<p>$$\nf((d_i)_ {i=0}^{n-1}, k) = \\sum_{i=0}^{n-1}2^{ki}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the digit type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#from_power_of_2_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_power_of_2_digits_desc\" class=\"method trait-impl\"><a href=\"#method.from_power_of_2_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_power_of_2_digits_desc</a>&lt;I&gt;(log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of base-$2^k$ digits into a value.</p>\n<p>The base-2 logarithm of the base is specified. The input digits are in\ndescending order (most- to least-significant). <code>log_base</code> must be no larger\nthan the width of the digit type. The function returns <code>None</code> if the input\nrepresents a number that can’t fit in the output type.</p>\n<p>$$\nf((d_i)_ {i=0}^{n-1}, k) = \\sum_{i=0}^{n-1}2^{k (n-i-1)}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the digit type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#from_power_of_2_digits_desc\">here</a>.</p>\n</div></details></div></details>","PowerOf2Digits<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2Digits%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2Digits%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2Digits&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_power_of_2_digits_asc\" class=\"method trait-impl\"><a href=\"#method.to_power_of_2_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_power_of_2_digits_asc</a>(&amp;self, log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the base-$2^k$ digits of a number in ascending\norder (least- to most-significant).</p>\n<p>The base-2 logarithm of the base is specified. <code>log_base</code> must be no larger\nthan the width of the digit type. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty;\notherwise, it ends with a nonzero digit.</p>\n<p>$f(x, k) = (d_i)_ {i=0}^{n-1}$, where $0 \\leq d_i &lt; 2^k$ for all $i$, $n=0$\nor $d_{n-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{n-1}2^{ki}d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the output type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#to_power_of_2_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_power_of_2_digits_desc\" class=\"method trait-impl\"><a href=\"#method.to_power_of_2_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_power_of_2_digits_desc</a>(&amp;self, log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the base-$2^k$ digits of a number in descending\norder (most- to least-significant).</p>\n<p>The base-2 logarithm of the base is specified. <code>log_base</code> must be no larger\nthan the width of the digit type. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty;\notherwise, it begins with a nonzero digit.</p>\n<p>$f(x, k) = (d_i)_ {i=0}^{n-1}$, where $0 \\leq d_i &lt; 2^k$ for all $i$, $n=0$\nor $d_0 \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{n-1}2^{k (n-i-1)}d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the output type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#to_power_of_2_digits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_power_of_2_digits_asc\" class=\"method trait-impl\"><a href=\"#method.from_power_of_2_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_power_of_2_digits_asc</a>&lt;I&gt;(log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of base-$2^k$ digits into a value.</p>\n<p>The base-2 logarithm of the base is specified. The input digits are in\nascending order (least- to most-significant). <code>log_base</code> must be no larger\nthan the width of the digit type. The function returns <code>None</code> if the input\nrepresents a number that can’t fit in the output type.</p>\n<p>$$\nf((d_i)_ {i=0}^{n-1}, k) = \\sum_{i=0}^{n-1}2^{ki}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the digit type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#from_power_of_2_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_power_of_2_digits_desc\" class=\"method trait-impl\"><a href=\"#method.from_power_of_2_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_power_of_2_digits_desc</a>&lt;I&gt;(log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of base-$2^k$ digits into a value.</p>\n<p>The base-2 logarithm of the base is specified. The input digits are in\ndescending order (most- to least-significant). <code>log_base</code> must be no larger\nthan the width of the digit type. The function returns <code>None</code> if the input\nrepresents a number that can’t fit in the output type.</p>\n<p>$$\nf((d_i)_ {i=0}^{n-1}, k) = \\sum_{i=0}^{n-1}2^{k (n-i-1)}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the digit type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#from_power_of_2_digits_desc\">here</a>.</p>\n</div></details></div></details>","PowerOf2Digits<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2Digits%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2Digits%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2Digits&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_power_of_2_digits_asc\" class=\"method trait-impl\"><a href=\"#method.to_power_of_2_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_power_of_2_digits_asc</a>(&amp;self, log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the base-$2^k$ digits of a number in ascending\norder (least- to most-significant).</p>\n<p>The base-2 logarithm of the base is specified. <code>log_base</code> must be no larger\nthan the width of the digit type. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty;\notherwise, it ends with a nonzero digit.</p>\n<p>$f(x, k) = (d_i)_ {i=0}^{n-1}$, where $0 \\leq d_i &lt; 2^k$ for all $i$, $n=0$\nor $d_{n-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{n-1}2^{ki}d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the output type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#to_power_of_2_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_power_of_2_digits_desc\" class=\"method trait-impl\"><a href=\"#method.to_power_of_2_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_power_of_2_digits_desc</a>(&amp;self, log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the base-$2^k$ digits of a number in descending\norder (most- to least-significant).</p>\n<p>The base-2 logarithm of the base is specified. <code>log_base</code> must be no larger\nthan the width of the digit type. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty;\notherwise, it begins with a nonzero digit.</p>\n<p>$f(x, k) = (d_i)_ {i=0}^{n-1}$, where $0 \\leq d_i &lt; 2^k$ for all $i$, $n=0$\nor $d_0 \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{n-1}2^{k (n-i-1)}d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the output type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#to_power_of_2_digits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_power_of_2_digits_asc\" class=\"method trait-impl\"><a href=\"#method.from_power_of_2_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_power_of_2_digits_asc</a>&lt;I&gt;(log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of base-$2^k$ digits into a value.</p>\n<p>The base-2 logarithm of the base is specified. The input digits are in\nascending order (least- to most-significant). <code>log_base</code> must be no larger\nthan the width of the digit type. The function returns <code>None</code> if the input\nrepresents a number that can’t fit in the output type.</p>\n<p>$$\nf((d_i)_ {i=0}^{n-1}, k) = \\sum_{i=0}^{n-1}2^{ki}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the digit type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#from_power_of_2_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_power_of_2_digits_desc\" class=\"method trait-impl\"><a href=\"#method.from_power_of_2_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_power_of_2_digits_desc</a>&lt;I&gt;(log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of base-$2^k$ digits into a value.</p>\n<p>The base-2 logarithm of the base is specified. The input digits are in\ndescending order (most- to least-significant). <code>log_base</code> must be no larger\nthan the width of the digit type. The function returns <code>None</code> if the input\nrepresents a number that can’t fit in the output type.</p>\n<p>$$\nf((d_i)_ {i=0}^{n-1}, k) = \\sum_{i=0}^{n-1}2^{k (n-i-1)}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the digit type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#from_power_of_2_digits_desc\">here</a>.</p>\n</div></details></div></details>","PowerOf2Digits<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PowerOf2Digits%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-PowerOf2Digits%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PowerOf2Digits&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_power_of_2_digits_asc\" class=\"method trait-impl\"><a href=\"#method.to_power_of_2_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_power_of_2_digits_asc</a>(&amp;self, log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the base-$2^k$ digits of a number in ascending\norder (least- to most-significant).</p>\n<p>The base-2 logarithm of the base is specified. <code>log_base</code> must be no larger\nthan the width of the digit type. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty;\notherwise, it ends with a nonzero digit.</p>\n<p>$f(x, k) = (d_i)_ {i=0}^{n-1}$, where $0 \\leq d_i &lt; 2^k$ for all $i$, $n=0$\nor $d_{n-1} \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{n-1}2^{ki}d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the output type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#to_power_of_2_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_power_of_2_digits_desc\" class=\"method trait-impl\"><a href=\"#method.to_power_of_2_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_power_of_2_digits_desc</a>(&amp;self, log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> containing the base-$2^k$ digits of a number in descending\norder (most- to least-significant).</p>\n<p>The base-2 logarithm of the base is specified. <code>log_base</code> must be no larger\nthan the width of the digit type. If <code>self</code> is 0, the <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> is empty;\notherwise, it begins with a nonzero digit.</p>\n<p>$f(x, k) = (d_i)_ {i=0}^{n-1}$, where $0 \\leq d_i &lt; 2^k$ for all $i$, $n=0$\nor $d_0 \\neq 0$, and</p>\n<p>$$\n\\sum_{i=0}^{n-1}2^{k (n-i-1)}d_i = x.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is\n<code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the output type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#to_power_of_2_digits_desc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_power_of_2_digits_asc\" class=\"method trait-impl\"><a href=\"#method.from_power_of_2_digits_asc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_power_of_2_digits_asc</a>&lt;I&gt;(log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of base-$2^k$ digits into a value.</p>\n<p>The base-2 logarithm of the base is specified. The input digits are in\nascending order (least- to most-significant). <code>log_base</code> must be no larger\nthan the width of the digit type. The function returns <code>None</code> if the input\nrepresents a number that can’t fit in the output type.</p>\n<p>$$\nf((d_i)_ {i=0}^{n-1}, k) = \\sum_{i=0}^{n-1}2^{ki}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-2\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the digit type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#from_power_of_2_digits_asc\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_power_of_2_digits_desc\" class=\"method trait-impl\"><a href=\"#method.from_power_of_2_digits_desc\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_power_of_2_digits_desc</a>&lt;I&gt;(log_base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, digits: I) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Converts an iterator of base-$2^k$ digits into a value.</p>\n<p>The base-2 logarithm of the base is specified. The input digits are in\ndescending order (most- to least-significant). <code>log_base</code> must be no larger\nthan the width of the digit type. The function returns <code>None</code> if the input\nrepresents a number that can’t fit in the output type.</p>\n<p>$$\nf((d_i)_ {i=0}^{n-1}, k) = \\sum_{i=0}^{n-1}2^{k (n-i-1)}d_i.\n$$</p>\n<h5 id=\"worst-case-complexity-3\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-3\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>digits.count()</code>.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if <code>log_base</code> is greater than the width of the digit type, or if\n<code>log_base</code> is zero.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>See <a href=\"super::power_of_2_digits#from_power_of_2_digits_desc\">here</a>.</p>\n</div></details></div></details>","PowerOf2Digits<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PrimInt-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#impl-PrimInt-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html\" title=\"trait num_traits::int::PrimInt\">PrimInt</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.count_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the number of ones in the binary representation of <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.count_ones\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.count_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.count_zeros\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the number of zeros in the binary representation of <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.count_zeros\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.leading_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#method.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the number of leading ones in the binary representation\nof <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#method.leading_ones\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.leading_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the number of leading zeros in the binary representation\nof <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.leading_zeros\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.trailing_ones\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#method.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the number of trailing ones in the binary representation\nof <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#method.trailing_ones\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.trailing_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>Returns the number of trailing zeros in the binary representation\nof <code>self</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.trailing_zeros\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.rotate_left\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Shifts the bits to the left by a specified amount, <code>n</code>, wrapping\nthe truncated bits to the end of the resulting integer. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.rotate_left\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.rotate_right\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Shifts the bits to the right by a specified amount, <code>n</code>, wrapping\nthe truncated bits to the beginning of the resulting integer. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.rotate_right\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signed_shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.signed_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.signed_shl\" class=\"fn\">signed_shl</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Shifts the bits to the left by a specified amount, <code>n</code>, filling\nzeros in the least significant bits. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.signed_shl\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signed_shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.signed_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.signed_shr\" class=\"fn\">signed_shr</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Shifts the bits to the right by a specified amount, <code>n</code>, copying\nthe “sign bit” in the most significant bits even for unsigned types. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.signed_shr\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.unsigned_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.unsigned_shl\" class=\"fn\">unsigned_shl</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Shifts the bits to the left by a specified amount, <code>n</code>, filling\nzeros in the least significant bits. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.unsigned_shl\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.unsigned_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.unsigned_shr\" class=\"fn\">unsigned_shr</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Shifts the bits to the right by a specified amount, <code>n</code>, filling\nzeros in the most significant bits. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.unsigned_shr\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.swap_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Reverses the byte order of the integer. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.swap_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.reverse_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#method.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Reverses the order of bits in the integer. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#method.reverse_bits\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.from_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Convert an integer from big endian to the target’s endianness. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.from_be\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.from_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Convert an integer from little endian to the target’s endianness. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.from_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.to_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Convert <code>self</code> to big endian from the target’s endianness. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.to_be\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.to_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Convert <code>self</code> to little endian from the target’s endianness. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.to_le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/int.rs.html#497\">Source</a><a href=\"#method.pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.pow\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Raises self to the power of <code>exp</code>, using exponentiation by squaring. <a href=\"https://docs.rs/num-traits/0.2/num_traits/int/trait.PrimInt.html#tymethod.pow\">Read more</a></div></details></div></details>","PrimInt","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Primes-for-u16\" class=\"impl\"><a href=\"#impl-Primes-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Primes for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.primes_less_than\" class=\"method trait-impl\"><a href=\"#method.primes_less_than\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">primes_less_than</a>(n: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; PrimesLessThanIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator that generates all primes less than a given value.</p>\n<p>The iterator produced by <code>primes_less_than(n)</code> generates the same primes as the\niterator produced by <code>primes().take_while(|&amp;p| p &lt; n)</code>, but the latter would be\nslower because it doesn’t know in advance how large its prime sieve should be, and\nmight have to create larger and larger prime sieves.</p>\n<h5 id=\"worst-case-complexity-amortized\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-amortized\">§</a>Worst-case complexity (amortized)</h5>\n<p>$T(i) = O(\\log \\log i)$</p>\n<p>$M(i) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $i$ is the iteration index.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primes#primes_less_than\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.primes_less_than_or_equal_to\" class=\"method trait-impl\"><a href=\"#method.primes_less_than_or_equal_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">primes_less_than_or_equal_to</a>(_: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; PrimesLessThanIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns an iterator that generates all primes less than or equal to a given value.</p>\n<p>The iterator produced by <code>primes_less_than_or_equal_to(n)</code> generates the same primes\nas the iterator produced by <code>primes().take_while(|&amp;p| p &lt;= n)</code>, but the latter would\nbe slower because it doesn’t know in advance how large its prime sieve should be,\nand might have to create larger and larger prime sieves.</p>\n<h5 id=\"worst-case-complexity-amortized-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-amortized-1\">§</a>Worst-case complexity (amortized)</h5>\n<p>$T(i) = O(\\log \\log i)$</p>\n<p>$M(i) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $i$ is the iteration index.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::primes#primes_less_than_or_equal_to\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.primes\" class=\"method trait-impl\"><a href=\"#method.primes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">primes</a>() -&gt; PrimesIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns all primes that fit into the specified type.</p>\n<p>The iterator produced by <code>primes(n)</code> generates the same primes as the iterator\nproduced by <code>primes_less_than_or_equal_to(T::MAX)</code>. If you really need to generate\n<em>every</em> prime, and <code>T</code> is <code>u32</code> or smaller, then you should use the latter, as it\nwill allocate all the needed memory at once. If <code>T</code> is <code>u64</code> or larger, or if you\nprobably don’t need every prime, then <code>primes()</code> will be faster as it won’t allocate\ntoo much memory right away.</p>\n<h5 id=\"worst-case-complexity-amortized-2\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-amortized-2\">§</a>Worst-case complexity (amortized)</h5>\n<p>$T(i) = O(\\log \\log i)$</p>\n<p>$M(i) = O(1)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $i$ is the iteration index.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<p>See <a href=\"super::primes#primes\">here</a>.</p>\n</div></details><section id=\"associatedtype.I\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.I\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">I</a> = PrimesIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section><section id=\"associatedtype.LI\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.LI\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">LI</a> = PrimesLessThanIterator&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></div></details>","Primes","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PrimitiveInt-for-u16\" class=\"impl\"><a href=\"#impl-PrimitiveInt-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PrimitiveInt for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3><div class=\"docblock\"><h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<p>See <a href=\"self\">here</a>.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.WIDTH\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.WIDTH\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">WIDTH</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a> = 16u64</h4></section></summary><div class='docblock'>The number of bits of <code>Self</code>.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.LOG_WIDTH\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.LOG_WIDTH\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">LOG_WIDTH</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a> = _</h4></section></summary><div class='docblock'>The base-2 logarithm of the number of bits of <code>Self</code>. <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.WIDTH_MASK\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.WIDTH_MASK\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">WIDTH_MASK</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a> = _</h4></section></summary><div class='docblock'>A mask that consists of <code>LOG_WIDTH</code> bits. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_highest_bit\" class=\"method trait-impl\"><a href=\"#method.get_highest_bit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">get_highest_bit</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Gets the most-significant bit of <code>Self</code>. For signed integers, this is the sign bit. <a>Read more</a></div></details></div></details>","PrimitiveInt","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Primorial-for-u16\" class=\"impl\"><a href=\"#impl-Primorial-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Primorial for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.primorial\" class=\"method trait-impl\"><a href=\"#method.primorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">primorial</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Computes the primorial of a number: the product of all primes less than or equal to\nit.</p>\n<p>The <a href=\"Primorial::product_of_first_n_primes\"><code>product_of_first_n_primes</code></a> function is\nsimilar; it computes the primorial of the $n$th prime.</p>\n<p>If the input is too large, the function panics. For a function that returns <code>None</code>\ninstead, try <a href=\"CheckedPrimorial::checked_primorial\"><code>checked_primorial</code></a>.</p>\n<p>$$\nf(n) = n\\# = \\prod_{p \\leq n \\atop p \\ \\text {prime}} p.\n$$</p>\n<p>$n\\# = O(e^{(1+o(1))n})$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the output is too large to be represented.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primorial#primorial\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.product_of_first_n_primes\" class=\"method trait-impl\"><a href=\"#method.product_of_first_n_primes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">product_of_first_n_primes</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Computes the product of the first $n$ primes.</p>\n<p>The <a href=\"Primorial::primorial\"><code>primorial</code></a> function is similar; it computes the product\nof all primes less than or equal to $n$.</p>\n<p>If the input is too large, the function panics. For a function that returns <code>None</code>\ninstead, try\n<a href=\"CheckedPrimorial::checked_product_of_first_n_primes\"><code>checked_product_of_first_n_primes</code></a>.</p>\n<p>$$\nf(n) = p_n\\# = \\prod_{k=1}^n p_n,\n$$\nwhere $p_n$ is the $n$th prime number.</p>\n<p>$p_n\\# = O\\left ( \\left ( \\frac{1}{e}k\\log k\\left ( \\frac{\\log k}{e^2}k \\right\n)^{1/\\log k} \\right )^k \\omega(1)\\right )$.</p>\n<p>This asymptotic approximation is due to <a href=\"https://math.stackexchange.com/a/1594930\">Bart\nMichels</a>.</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the output is too large to be represented.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::primorial#product_of_first_n_primes\">here</a>.</p>\n</div></details></div></details>","Primorial","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/traits/accum.rs.html#149\">Source</a></span><a href=\"#impl-Product%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/traits/accum.rs.html#149\">Source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by multiplying\nthe items.</div></details></div></details>","Product<&'a u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/traits/accum.rs.html#149\">Source</a></span><a href=\"#impl-Product-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/traits/accum.rs.html#149\">Source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by multiplying\nthe items.</div></details></div></details>","Product","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Random-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/random.rs.html#53\">Source</a><a href=\"#impl-Random-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/random/trait.Random.html\" title=\"trait core::random::Random\">Random</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.random\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/random.rs.html#53\">Source</a><a href=\"#method.random\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/random/trait.Random.html#tymethod.random\" class=\"fn\">random</a>(source: &amp;mut (impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/random/trait.RandomSource.html\" title=\"trait core::random::RandomSource\">RandomSource</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>)) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>random</code>)</span></div></span></summary><div class=\"docblock\"><p>Generates a random value.</p>\n<p><strong>Warning:</strong> Be careful when manipulating the resulting value! This\nmethod samples according to a uniform distribution, so a value of 1 is\njust as likely as <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#associatedconstant.MAX\" title=\"associated constant u16::MAX\"><code>MAX</code></a>. By using modulo operations, some\nvalues can become more likely than others. Use audited crates when in\ndoubt.</p>\n</div></details></div></details>","Random","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Rem%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_repr/struct.OwnedRepr.html\" title=\"struct ndarray::data_repr::OwnedRepr\">OwnedRepr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::arith::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&'a ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26BigInt%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#262\">Source</a><a href=\"#impl-Rem%3C%26BigInt%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#262\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#262\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&BigInt>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26BigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#541\">Source</a><a href=\"#impl-Rem%3C%26BigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#541\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#541\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26Complex%3Cu16%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#impl-Rem%3C%26Complex%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&'a Complex<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#603-606\">Source</a></span><a href=\"#impl-Rem%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#603-606\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::arith::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#603-606\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::arith::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Rem%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataOwned.html\" title=\"trait ndarray::data_traits::DataOwned\">DataOwned</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; + <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataMut.html\" title=\"trait ndarray::data_traits::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CBigInt%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#262\">Source</a><a href=\"#impl-Rem%3CBigInt%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#262\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/division.rs.html#262\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<BigInt>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CBigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#541\">Source</a><a href=\"#impl-Rem%3CBigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#541\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#541\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CComplex%3Cu16%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#impl-Rem%3CComplex%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::arith::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<Complex<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0\">1.51.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/nonzero.rs.html#2054-2063\">Source</a></span><a href=\"#impl-Rem%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/nonzero/struct.NonZero.html\" title=\"struct core::num::nonzero::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/nonzero.rs.html#2054-2063\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/nonzero/struct.NonZero.html\" title=\"struct core::num::nonzero::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/nonzero.rs.html#2054-2063\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details></div></details>","Rem<NonZero<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-Rem%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = U16&lt;O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: U16&lt;O&gt;) -&gt; U16&lt;O&gt;</h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#603-606\">Source</a></span><a href=\"#impl-Rem-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h4>\n<p>This operation will panic if <code>other == 0</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#603-606\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#603-606\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26BigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#593\">Source</a><a href=\"#impl-RemAssign%3C%26BigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#593\">Source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<&BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#1022\">Source</a></span><a href=\"#impl-RemAssign%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#1022\">Source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3CBigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#593\">Source</a><a href=\"#impl-RemAssign%3CBigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/division.rs.html#593\">Source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/nonzero.rs.html#2054-2063\">Source</a></span><a href=\"#impl-RemAssign%3CNonZero%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/nonzero/struct.NonZero.html\" title=\"struct core::num::nonzero::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/nonzero.rs.html#2054-2063\">Source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/nonzero/struct.NonZero.html\" title=\"struct core::num::nonzero::NonZero\">NonZero</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>, and cannot panic.</p>\n</div></details></div></details>","RemAssign<NonZero<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-RemAssign%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: U16&lt;O&gt;)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#1022\">Source</a></span><a href=\"#impl-RemAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#1022\">Source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemPowerOf2-for-u16\" class=\"impl\"><a href=\"#impl-RemPowerOf2-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RemPowerOf2 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_power_of_2\" class=\"method trait-impl\"><a href=\"#method.rem_power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rem_power_of_2</a>(self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Divides a number by $2^k$, returning just the remainder. For unsigned integers,\n<code>rem_power_of_2</code> is equivalent to <a href=\"super::traits::ModPowerOf2\"><code>mod_power_of_2</code></a>.</p>\n<p>If the quotient were computed, the quotient and remainder would satisfy $x = q2^k +\nr$ and $0 \\leq r &lt; 2^k$.</p>\n<p>$$\nf(x, k) = x - 2^k\\left \\lfloor \\frac{x}{2^k} \\right \\rfloor.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2#rem_power_of_2\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","RemPowerOf2","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemPowerOf2Assign-for-u16\" class=\"impl\"><a href=\"#impl-RemPowerOf2Assign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RemPowerOf2Assign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_power_of_2_assign\" class=\"method trait-impl\"><a href=\"#method.rem_power_of_2_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rem_power_of_2_assign</a>(&amp;mut self, pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Divides a number by $2^k$, replacing the first number by the remainder. For unsigned\nintegers, <code>rem_power_of_2_assign</code> is equivalent to\n<a href=\"super::traits::ModPowerOf2Assign\"><code>mod_power_of_2_assign</code></a>.</p>\n<p>If the quotient were computed, the quotient and remainder would satisfy $x = q2^k +\nr$ and $0 \\leq r &lt; 2^k$.</p>\n<p>$$\nx \\gets x - 2^k\\left \\lfloor \\frac{x}{2^k} \\right \\rfloor.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mod_power_of_2#rem_power_of_2_assign\">here</a>.</p>\n</div></details></div></details>","RemPowerOf2Assign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RootAssignRem%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-RootAssignRem%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RootAssignRem&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.root_assign_rem\" class=\"method trait-impl\"><a href=\"#method.root_assign_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">root_assign_rem</a>(&amp;mut self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Replaces an integer with the floor of its $n$th root, and returns the remainder (the\ndifference between the original integer and the $n$th power of the floor).</p>\n<p>$f(x, n) = x - \\lfloor\\sqrt[n]{x}\\rfloor^n$,</p>\n<p>$x \\gets \\lfloor\\sqrt[n]{x}\\rfloor$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>exp</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::root#root_assign_rem\">here</a>.</p>\n</div></details><section id=\"associatedtype.RemOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RemOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">RemOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","RootAssignRem<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RootRem%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-RootRem%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RootRem&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.root_rem\" class=\"method trait-impl\"><a href=\"#method.root_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">root_rem</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Returns the floor of the $n$th root of a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a>, and the remainder (the difference between\nthe <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> and the $n$th power of the floor).</p>\n<p>$f(x, n) = (\\lfloor\\sqrt[n]{x}\\rfloor, x - \\lfloor\\sqrt[n]{x}\\rfloor^2)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>exp</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::root#root_rem\">here</a>.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>The <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> implementation calls the implementation for <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>s.</p>\n</div></details><section id=\"associatedtype.RootOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RootOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">RootOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><section id=\"associatedtype.RemOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RemOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">RemOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","RootRem<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Roots-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/roots.rs.html#383\">Source</a><a href=\"#impl-Roots-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html\" title=\"trait num_integer::roots::Roots\">Roots</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.nth_root\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/roots.rs.html#383\">Source</a><a href=\"#method.nth_root\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html#tymethod.nth_root\" class=\"fn\">nth_root</a>(&amp;self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns the truncated principal <code>n</code>th root of an integer\n– <code>if x &gt;= 0 { ⌊ⁿ√x⌋ } else { ⌈ⁿ√x⌉ }</code> <a href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html#tymethod.nth_root\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sqrt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/roots.rs.html#383\">Source</a><a href=\"#method.sqrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html#method.sqrt\" class=\"fn\">sqrt</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns the truncated principal square root of an integer – <code>⌊√x⌋</code> <a href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html#method.sqrt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cbrt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-integer/0.1/src/num_integer/roots.rs.html#383\">Source</a><a href=\"#method.cbrt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html#method.cbrt\" class=\"fn\">cbrt</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns the truncated principal cube root of an integer –\n<code>if x &gt;= 0 { ⌊∛x⌋ } else { ⌈∛x⌉ }</code> <a href=\"https://docs.rs/num-integer/0.1/num_integer/roots/trait.Roots.html#method.cbrt\">Read more</a></div></details></div></details>","Roots","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RotateLeft-for-u16\" class=\"impl\"><a href=\"#impl-RotateLeft-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RotateLeft for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method trait-impl\"><a href=\"#method.rotate_left\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>rotate_left</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.rotate_left\" title=\"method u32::rotate_left\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","RotateLeft","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RotateLeftAssign-for-u16\" class=\"impl\"><a href=\"#impl-RotateLeftAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RotateLeftAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left_assign\" class=\"method trait-impl\"><a href=\"#method.rotate_left_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rotate_left_assign</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Rotates a number left, in place.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::rotate#rotate_left_assign\">here</a>.</p>\n</div></details></div></details>","RotateLeftAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RotateRight-for-u16\" class=\"impl\"><a href=\"#impl-RotateRight-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RotateRight for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method trait-impl\"><a href=\"#method.rotate_right\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>rotate_right</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.rotate_right\" title=\"method u32::rotate_right\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","RotateRight","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RotateRightAssign-for-u16\" class=\"impl\"><a href=\"#impl-RotateRightAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RotateRightAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right_assign\" class=\"method trait-impl\"><a href=\"#method.rotate_right_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rotate_right_assign</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Rotates a number right, in place.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::rotate#rotate_right_assign\">here</a>.</p>\n</div></details></div></details>","RotateRightAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoundToMultiple-for-u16\" class=\"impl\"><a href=\"#impl-RoundToMultiple-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RoundToMultiple for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.round_to_multiple\" class=\"method trait-impl\"><a href=\"#method.round_to_multiple\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">round_to_multiple</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Rounds a number to a multiple of another number, according to a specified rounding\nmode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating whether the returned value is\nless than, equal to, or greater than the original value.</p>\n<p>The only rounding modes that are guaranteed to return without a panic are <code>Down</code> and\n<code>Floor</code>.</p>\n<p>Let $q = \\frac{x}{y}$:</p>\n<p>$f(x, y, \\mathrm{Down}) = f(x, y, \\mathrm{Floor}) = y \\lfloor q \\rfloor.$</p>\n<p>$f(x, y, \\mathrm{Up}) = f(x, y, \\mathrm{Ceiling}) = y \\lceil q \\rceil.$</p>\n<p>$$\nf(x, y, \\mathrm{Nearest}) = \\begin{cases}\ny \\lfloor q \\rfloor &amp; \\text{if} \\quad\nq - \\lfloor q \\rfloor &lt; \\frac{1}{2} \\\\\ny \\lceil q \\rceil &amp; \\text{if} \\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2} \\\\\ny \\lfloor q \\rfloor &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even} \\\\\ny \\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2}\n\\ \\text{and} \\ \\lfloor q \\rfloor \\ \\text{is odd.}\n\\end{cases}\n$$</p>\n<p>$f(x, y, \\mathrm{Exact}) = x$, but panics if $q \\notin \\N$.</p>\n<p>The following two expressions are equivalent:</p>\n<ul>\n<li><code>x.round_to_multiple(other, Exact)</code></li>\n<li><code>{ assert!(x.divisible_by(other)); x }</code></li>\n</ul>\n<p>but the latter should be used as it is clearer and more efficient.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<ul>\n<li>If <code>rm</code> is <code>Exact</code>, but <code>self</code> is not a multiple of <code>other</code>.</li>\n<li>If the multiple is outside the representable range.</li>\n<li>If <code>self</code> is nonzero, <code>other</code> is zero, and <code>rm</code> is trying to round away from zero.</li>\n</ul>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::round_to_multiple#round_to_multiple\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","RoundToMultiple","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoundToMultipleAssign-for-u16\" class=\"impl\"><a href=\"#impl-RoundToMultipleAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RoundToMultipleAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.round_to_multiple_assign\" class=\"method trait-impl\"><a href=\"#method.round_to_multiple_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">round_to_multiple_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Rounds a number to a multiple of another number in place, according to a specified\nrounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned, indicating whether the returned value is\nless than, equal to, or greater than the original value.</p>\n<p>The only rounding modes that are guaranteed to return without a panic are <code>Down</code> and\n<code>Floor</code>.</p>\n<p>See the [<code>RoundToMultiple</code>] documentation for details.</p>\n<p>The following two expressions are equivalent:</p>\n<ul>\n<li><code>x.round_to_multiple_assign(other, Exact);</code></li>\n<li><code>assert!(x.divisible_by(other));</code></li>\n</ul>\n<p>but the latter should be used as it is clearer and more efficient.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<ul>\n<li>If <code>rm</code> is <code>Exact</code>, but <code>self</code> is not a multiple of <code>other</code>.</li>\n<li>If the multiple is outside the representable range.</li>\n<li>If <code>self</code> is nonzero, <code>other</code> is zero, and <code>rm</code> is trying to round away from zero.</li>\n</ul>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::round_to_multiple#round_to_multiple_assign\">here</a>.</p>\n</div></details></div></details>","RoundToMultipleAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoundToMultipleOfPowerOf2%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-RoundToMultipleOfPowerOf2%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RoundToMultipleOfPowerOf2&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.round_to_multiple_of_power_of_2\" class=\"method trait-impl\"><a href=\"#method.round_to_multiple_of_power_of_2\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">round_to_multiple_of_power_of_2</a>(\n    self,\n    pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n    rm: RoundingMode,\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Rounds a number to a multiple of $2^k$ according to a specified rounding mode. An\n<a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating whether the returned value is less than,\nequal to, or greater than the original value.</p>\n<p>The only rounding mode that is guaranteed to return without a panic is <code>Down</code>.</p>\n<p>Let $q = \\frac{x}{2^k}$:</p>\n<p>$f(x, k, \\mathrm{Down}) = 2^k \\operatorname{sgn}(q) \\lfloor |q| \\rfloor.$</p>\n<p>$f(x, k, \\mathrm{Up}) = 2^k \\operatorname{sgn}(q) \\lceil |q| \\rceil.$</p>\n<p>$f(x, k, \\mathrm{Floor}) = 2^k \\lfloor q \\rfloor.$</p>\n<p>$f(x, k, \\mathrm{Ceiling}) = 2^k \\lceil q \\rceil.$</p>\n<p>$$\nf(x, k, \\mathrm{Nearest}) = \\begin{cases}\n2^k \\lfloor q \\rfloor &amp; \\text{if} \\quad\nq - \\lfloor q \\rfloor &lt; \\frac{1}{2} \\\\\n2^k \\lceil q \\rceil &amp; \\text{if} \\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2} \\\\\n2^k \\lfloor q \\rfloor &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even} \\\\\n2^k \\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor \\ \\text{is odd.}\n\\end{cases}\n$$</p>\n<p>$f(x, k, \\mathrm{Exact}) = 2^k q$, but panics if $q \\notin \\Z$.</p>\n<p>The following two expressions are equivalent:</p>\n<ul>\n<li><code>x.round_to_multiple_of_power_of_2(pow, Exact)</code></li>\n<li><code>{ assert!(x.divisible_by_power_of_2(pow)); x }</code></li>\n</ul>\n<p>but the latter should be used as it is clearer and more efficient.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<ul>\n<li>If <code>rm</code> is <code>Exact</code>, but <code>self</code> is not a multiple of the power of 2.</li>\n<li>If <code>rm</code> is <code>Floor</code>, but <code>self</code> is negative with a too-large absolute value to\nround to the next lowest multiple.</li>\n<li>If <code>rm</code> is <code>Ceiling</code>, but <code>self</code> is too large to round to the next highest\nmultiple.</li>\n<li>If <code>rm</code> is <code>Up</code>, but <code>self</code> has too large an absolute value to round to the next\nmultiple with a greater absolute value.</li>\n<li>If <code>rm</code> is <code>Nearest</code>, but the nearest multiple is outside the representable range.</li>\n</ul>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::round_to_multiple_of_power_of_2#round_to_multiple_of_power_of_2\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","RoundToMultipleOfPowerOf2<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoundToMultipleOfPowerOf2Assign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-RoundToMultipleOfPowerOf2Assign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RoundToMultipleOfPowerOf2Assign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.round_to_multiple_of_power_of_2_assign\" class=\"method trait-impl\"><a href=\"#method.round_to_multiple_of_power_of_2_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">round_to_multiple_of_power_of_2_assign</a>(\n    &amp;mut self,\n    pow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n    rm: RoundingMode,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Rounds a number to a multiple of $2^k$ in place, according to a specified rounding\nmode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned, indicating whether the returned value is less\nthan, equal to, or greater than the original value.</p>\n<p>The only rounding mode that is guaranteed to return without a panic is <code>Down</code>.</p>\n<p>See the [<code>RoundToMultipleOfPowerOf2</code>] documentation for details.</p>\n<p>The following two expressions are equivalent:</p>\n<ul>\n<li><code>x.round_to_multiple_of_power_of_2_assign(pow, Exact);</code></li>\n<li><code>assert!(x.divisible_by_power_of_2(pow));</code></li>\n</ul>\n<p>but the latter should be used as it is clearer and more efficient.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<ul>\n<li>If <code>rm</code> is <code>Exact</code>, but <code>self</code> is not a multiple of the power of 2.</li>\n<li>If <code>rm</code> is <code>Floor</code>, but <code>self</code> is negative with a too-large absolute value to\nround to the next lowest multiple.</li>\n<li>If <code>rm</code> is <code>Ceiling</code>, but <code>self</code> is too large to round to the next highest\nmultiple.</li>\n<li>If <code>rm</code> is <code>Up</code>, but <code>self</code> has too large an absolute value to round to the next\nmultiple with a greater absolute value.</li>\n<li>If <code>rm</code> is <code>Nearest</code>, but the nearest multiple is outside the representable range.</li>\n</ul>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See\n<a href=\"super::round_to_multiple_of_power_of_2#round_to_multiple_of_power_of_2_assign\">here</a>.</p>\n</div></details></div></details>","RoundToMultipleOfPowerOf2Assign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoundingFrom%3Cf32%3E-for-u16\" class=\"impl\"><a href=\"#impl-RoundingFrom%3Cf32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RoundingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rounding_from\" class=\"method trait-impl\"><a href=\"#method.rounding_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rounding_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value of a floating point type to a value of an unsigned type\naccording to a specified [<code>RoundingMode</code>]. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned,\nindicating whether the returned value is less than, equal to, or greater\nthan the original value.</p>\n<ul>\n<li>If the rounding mode is <code>Floor</code>, the largest number less than or equal to\nthe value is returned. If the float is greater than the maximum\nrepresentable unsigned value, the maximum unsigned value is returned. If\nthe float is negative, the function panics.</li>\n<li>If the rounding mode is <code>Ceiling</code>, the smallest number greater than or\nequal to the value is returned. If the float is negative, zero is\nreturned. If the float is greater than the maximum representable unsigned\nvalue, the function panics.</li>\n<li>If the rounding mode is <code>Down</code>, then the rounding proceeds as with <code>Floor</code>\nif the float is non-negative and as with <code>Ceiling</code> if the value is\nnegative.</li>\n<li>If the rounding mode is <code>Up</code>, then the rounding proceeds as with <code>Ceiling</code>\nif the value is non-negative and as with <code>Floor</code> if the value is negative.</li>\n<li>If the rounding mode is <code>Nearest</code>, then the nearest value is returned. If\nthe value is exactly between two numbers, the even one is selected. If the\nfloat is greater than the maximum representable unsigned value, the\nmaximum unsigned value is returned. If the float is negative, zero is\nreturned.</li>\n</ul>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<ul>\n<li>If <code>value</code> is <code>NaN</code>.</li>\n<li>If <code>rm</code> is <code>Exact</code> but <code>value</code> is not exactly equal to any value of the\nunsigned type.</li>\n<li>If <code>value</code> is greater than the maximum value of the unsigned type and <code>rm</code>\nis <code>Ceiling</code> or <code>Up</code>.</li>\n<li>If <code>value</code> is negative and <code>rm</code> is <code>Floor</code> or <code>Up</code>.</li>\n</ul>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#rounding_from\">here</a>.</p>\n</div></details></div></details>","RoundingFrom<f32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RoundingFrom%3Cf64%3E-for-u16\" class=\"impl\"><a href=\"#impl-RoundingFrom%3Cf64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl RoundingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rounding_from\" class=\"method trait-impl\"><a href=\"#method.rounding_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">rounding_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Converts a value of a floating point type to a value of an unsigned type\naccording to a specified [<code>RoundingMode</code>]. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned,\nindicating whether the returned value is less than, equal to, or greater\nthan the original value.</p>\n<ul>\n<li>If the rounding mode is <code>Floor</code>, the largest number less than or equal to\nthe value is returned. If the float is greater than the maximum\nrepresentable unsigned value, the maximum unsigned value is returned. If\nthe float is negative, the function panics.</li>\n<li>If the rounding mode is <code>Ceiling</code>, the smallest number greater than or\nequal to the value is returned. If the float is negative, zero is\nreturned. If the float is greater than the maximum representable unsigned\nvalue, the function panics.</li>\n<li>If the rounding mode is <code>Down</code>, then the rounding proceeds as with <code>Floor</code>\nif the float is non-negative and as with <code>Ceiling</code> if the value is\nnegative.</li>\n<li>If the rounding mode is <code>Up</code>, then the rounding proceeds as with <code>Ceiling</code>\nif the value is non-negative and as with <code>Floor</code> if the value is negative.</li>\n<li>If the rounding mode is <code>Nearest</code>, then the nearest value is returned. If\nthe value is exactly between two numbers, the even one is selected. If the\nfloat is greater than the maximum representable unsigned value, the\nmaximum unsigned value is returned. If the float is negative, zero is\nreturned.</li>\n</ul>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<ul>\n<li>If <code>value</code> is <code>NaN</code>.</li>\n<li>If <code>rm</code> is <code>Exact</code> but <code>value</code> is not exactly equal to any value of the\nunsigned type.</li>\n<li>If <code>value</code> is greater than the maximum value of the unsigned type and <code>rm</code>\nis <code>Ceiling</code> or <code>Up</code>.</li>\n<li>If <code>value</code> is negative and <code>rm</code> is <code>Floor</code> or <code>Up</code>.</li>\n</ul>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#rounding_from\">here</a>.</p>\n</div></details></div></details>","RoundingFrom<f64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SampleUniform-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://rust-random.github.io/rand/src/rand/distr/uniform_int.rs.html#269\">Source</a><a href=\"#impl-SampleUniform-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand/distr/uniform/trait.SampleUniform.html\" title=\"trait rand::distr::uniform::SampleUniform\">SampleUniform</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Sampler\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://rust-random.github.io/rand/src/rand/distr/uniform_int.rs.html#269\">Source</a><a href=\"#associatedtype.Sampler\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://rust-random.github.io/rand/rand/distr/uniform/trait.SampleUniform.html#associatedtype.Sampler\" class=\"associatedtype\">Sampler</a> = <a class=\"struct\" href=\"https://rust-random.github.io/rand/rand/distr/uniform/int/struct.UniformInt.html\" title=\"struct rand::distr::uniform::int::UniformInt\">UniformInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The <code>UniformSampler</code> implementation supporting type <code>X</code>.</div></details></div></details>","SampleUniform","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SampleUniform-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://rust-random.github.io/rand/src/rand/distributions/uniform.rs.html#566\">Source</a><a href=\"#impl-SampleUniform-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand/distributions/uniform/trait.SampleUniform.html\" title=\"trait rand::distributions::uniform::SampleUniform\">SampleUniform</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Sampler\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://rust-random.github.io/rand/src/rand/distributions/uniform.rs.html#566\">Source</a><a href=\"#associatedtype.Sampler\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://rust-random.github.io/rand/rand/distributions/uniform/trait.SampleUniform.html#associatedtype.Sampler\" class=\"associatedtype\">Sampler</a> = <a class=\"struct\" href=\"https://rust-random.github.io/rand/rand/distributions/uniform/struct.UniformInt.html\" title=\"struct rand::distributions::uniform::UniformInt\">UniformInt</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The <code>UniformSampler</code> implementation supporting type <code>X</code>.</div></details></div></details>","SampleUniform","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Saturating-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#32\">Source</a><a href=\"#impl-Saturating-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.Saturating.html\" title=\"trait num_traits::ops::saturating::Saturating\">Saturating</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#32\">Source</a><a href=\"#method.saturating_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.Saturating.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#32\">Source</a><a href=\"#method.saturating_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.Saturating.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.</div></details></div></details>","Saturating","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingAdd-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#53\">Source</a><a href=\"#impl-SaturatingAdd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.SaturatingAdd.html\" title=\"trait num_traits::ops::saturating::SaturatingAdd\">SaturatingAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#53\">Source</a><a href=\"#method.saturating_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.SaturatingAdd.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Saturating addition. Computes <code>self + other</code>, saturating at the relevant high or low boundary of\nthe type.</div></details></div></details>","SaturatingAdd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingAdd-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingAdd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingAdd for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method trait-impl\"><a href=\"#method.saturating_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_add</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>saturating_add</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html#method.saturating_add\" title=\"method i32::saturating_add\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","SaturatingAdd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingAddAssign-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingAddAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingAddAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_assign\" class=\"method trait-impl\"><a href=\"#method.saturating_add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Adds a number to another number, in place, saturating at the numeric bounds instead\nof overflowing.</p>\n<p>$$\nx \\gets \\begin{cases}\nx + y &amp; \\text{if} \\quad m \\leq x + y \\leq M, \\\\\nM &amp; \\text{if} \\quad x + y &gt; M, \\\\\nm &amp; \\text{if} \\quad x + y &lt; m,\n\\end{cases}\n$$\nwhere $m$ is <code>Self::MIN</code> and $M$ is <code>Self::MAX</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::saturating_add#saturating_add_assign\">here</a>.</p>\n</div></details></div></details>","SaturatingAddAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingAddMul-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingAddMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingAddMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_mul\" class=\"method trait-impl\"><a href=\"#method.saturating_add_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_add_mul</a>(self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Adds a number and the product of two other numbers, saturating at the numeric bounds\ninstead of overflowing.</p>\n<p>$$\nf(x, y, z) = \\begin{cases}\nx + yz &amp; \\text{if} \\quad m \\leq x + yz \\leq M, \\\\\nM &amp; \\text{if} \\quad x + yz &gt; M, \\\\\nm &amp; \\text{if} \\quad x + yz &lt; m,\n\\end{cases}\n$$\nwhere $m$ is <code>Self::MIN</code> and $M$ is <code>Self::MAX</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::saturating_add_mul#saturating_add_mul\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","SaturatingAddMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingAddMulAssign-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingAddMulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingAddMulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_mul_assign\" class=\"method trait-impl\"><a href=\"#method.saturating_add_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_add_mul_assign</a>(&amp;mut self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Adds a number and the product of two other numbers in place, saturating at the\nnumeric bounds instead of overflowing.</p>\n<p>$$\nx \\gets \\begin{cases}\nx + yz &amp; \\text{if} \\quad m \\leq x + yz \\leq M, \\\\\nM &amp; \\text{if} \\quad x + yz &gt; M, \\\\\nm &amp; \\text{if} \\quad x + yz &lt; m,\n\\end{cases}\n$$\nwhere $m$ is <code>Self::MIN</code> and $M$ is <code>Self::MAX</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::saturating_add#saturating_add_mul_assign\">here</a>.</p>\n</div></details></div></details>","SaturatingAddMulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3C%26Integer%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3C%26Integer%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; SaturatingFrom&lt;&amp;'a Integer&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: &amp;Integer) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts an [<code>Integer</code>] to an unsigned primitive integer.</p>\n<p>If the [<code>Integer</code>] cannot be represented by the output type, then either zero or the\nmaximum representable value is returned, whichever is closer.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primitive_int_from_integer#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<&'a Integer>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3C%26Natural%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3C%26Natural%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; SaturatingFrom&lt;&amp;'a Natural&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: &amp;Natural) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a [<code>Natural</code>] to a value of an unsigned primitive integer type that’s\nsmaller than a <a href=\"crate#limbs\"><code>Limb</code></a>. If the [<code>Natural</code>] is too large to fit in the\noutput type, the largest representable value is returned.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primitive_int_from_natural#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<&'a Natural>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, the maximum or minimum value of the new type, whichever is closer, is\nreturned.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then\n$$\nf_W(n) = \\begin{cases}\n0 &amp; n &lt; 0 \\\\\n2^W-1 &amp; \\text{if} \\quad n \\geq 2^W, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<p>If the target type is signed, then\n$$\nf_W(n) = \\begin{cases}\n-2^{W-1} &amp; \\text{if} \\quad n &lt; -2^{W-1}, \\\\\n2^{W-1}-1 &amp; \\text{if} \\quad n \\geq 2^{W-1}, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, the maximum or minimum value of the new type, whichever is closer, is\nreturned.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then\n$$\nf_W(n) = \\begin{cases}\n0 &amp; n &lt; 0 \\\\\n2^W-1 &amp; \\text{if} \\quad n \\geq 2^W, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<p>If the target type is signed, then\n$$\nf_W(n) = \\begin{cases}\n-2^{W-1} &amp; \\text{if} \\quad n &lt; -2^{W-1}, \\\\\n2^{W-1}-1 &amp; \\text{if} \\quad n \\geq 2^{W-1}, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, the maximum or minimum value of the new type, whichever is closer, is\nreturned.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then\n$$\nf_W(n) = \\begin{cases}\n0 &amp; n &lt; 0 \\\\\n2^W-1 &amp; \\text{if} \\quad n \\geq 2^W, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<p>If the target type is signed, then\n$$\nf_W(n) = \\begin{cases}\n-2^{W-1} &amp; \\text{if} \\quad n &lt; -2^{W-1}, \\\\\n2^{W-1}-1 &amp; \\text{if} \\quad n \\geq 2^{W-1}, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, the maximum or minimum value of the new type, whichever is closer, is\nreturned.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then\n$$\nf_W(n) = \\begin{cases}\n0 &amp; n &lt; 0 \\\\\n2^W-1 &amp; \\text{if} \\quad n \\geq 2^W, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<p>If the target type is signed, then\n$$\nf_W(n) = \\begin{cases}\n-2^{W-1} &amp; \\text{if} \\quad n &lt; -2^{W-1}, \\\\\n2^{W-1}-1 &amp; \\text{if} \\quad n \\geq 2^{W-1}, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, the maximum or minimum value of the new type, whichever is closer, is\nreturned.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then\n$$\nf_W(n) = \\begin{cases}\n0 &amp; n &lt; 0 \\\\\n2^W-1 &amp; \\text{if} \\quad n \\geq 2^W, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<p>If the target type is signed, then\n$$\nf_W(n) = \\begin{cases}\n-2^{W-1} &amp; \\text{if} \\quad n &lt; -2^{W-1}, \\\\\n2^{W-1}-1 &amp; \\text{if} \\quad n \\geq 2^{W-1}, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, the maximum or minimum value of the new type, whichever is closer, is\nreturned.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then\n$$\nf_W(n) = \\begin{cases}\n0 &amp; n &lt; 0 \\\\\n2^W-1 &amp; \\text{if} \\quad n \\geq 2^W, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<p>If the target type is signed, then\n$$\nf_W(n) = \\begin{cases}\n-2^{W-1} &amp; \\text{if} \\quad n &lt; -2^{W-1}, \\\\\n2^{W-1}-1 &amp; \\text{if} \\quad n \\geq 2^{W-1}, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, the maximum or minimum value of the new type, whichever is closer, is\nreturned.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then\n$$\nf_W(n) = \\begin{cases}\n0 &amp; n &lt; 0 \\\\\n2^W-1 &amp; \\text{if} \\quad n \\geq 2^W, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<p>If the target type is signed, then\n$$\nf_W(n) = \\begin{cases}\n-2^{W-1} &amp; \\text{if} \\quad n &lt; -2^{W-1}, \\\\\n2^{W-1}-1 &amp; \\text{if} \\quad n \\geq 2^{W-1}, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to its own type. This conversion is always valid and always leaves\nthe value unchanged.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, the maximum or minimum value of the new type, whichever is closer, is\nreturned.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then\n$$\nf_W(n) = \\begin{cases}\n0 &amp; n &lt; 0 \\\\\n2^W-1 &amp; \\text{if} \\quad n \\geq 2^W, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<p>If the target type is signed, then\n$$\nf_W(n) = \\begin{cases}\n-2^{W-1} &amp; \\text{if} \\quad n &lt; -2^{W-1}, \\\\\n2^{W-1}-1 &amp; \\text{if} \\quad n \\geq 2^{W-1}, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, the maximum or minimum value of the new type, whichever is closer, is\nreturned.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then\n$$\nf_W(n) = \\begin{cases}\n0 &amp; n &lt; 0 \\\\\n2^W-1 &amp; \\text{if} \\quad n \\geq 2^W, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<p>If the target type is signed, then\n$$\nf_W(n) = \\begin{cases}\n-2^{W-1} &amp; \\text{if} \\quad n &lt; -2^{W-1}, \\\\\n2^{W-1}-1 &amp; \\text{if} \\quad n \\geq 2^{W-1}, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. This conversion is always valid and always leaves\nthe value unchanged.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingFrom%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingFrom%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_from\" class=\"method trait-impl\"><a href=\"#method.saturating_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, the maximum or minimum value of the new type, whichever is closer, is\nreturned.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then\n$$\nf_W(n) = \\begin{cases}\n0 &amp; n &lt; 0 \\\\\n2^W-1 &amp; \\text{if} \\quad n \\geq 2^W, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<p>If the target type is signed, then\n$$\nf_W(n) = \\begin{cases}\n-2^{W-1} &amp; \\text{if} \\quad n &lt; -2^{W-1}, \\\\\n2^{W-1}-1 &amp; \\text{if} \\quad n \\geq 2^{W-1}, \\\\\nn &amp; \\text{otherwise}.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#saturating_from\">here</a>.</p>\n</div></details></div></details>","SaturatingFrom<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingMul-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#95\">Source</a><a href=\"#impl-SaturatingMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.SaturatingMul.html\" title=\"trait num_traits::ops::saturating::SaturatingMul\">SaturatingMul</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#95\">Source</a><a href=\"#method.saturating_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.SaturatingMul.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Saturating multiplication. Computes <code>self * other</code>, saturating at the relevant high or low boundary of\nthe type.</div></details></div></details>","SaturatingMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingMul-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method trait-impl\"><a href=\"#method.saturating_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_mul</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>saturating_mul</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html#method.saturating_mul\" title=\"method i32::saturating_mul\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","SaturatingMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingMulAssign-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingMulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingMulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul_assign\" class=\"method trait-impl\"><a href=\"#method.saturating_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Multiplies a number by another number, in place, saturating at the numeric bounds\ninstead of overflowing.</p>\n<p>$$\nx \\gets \\begin{cases}\nxy &amp; \\text{if} \\quad m \\leq xy \\leq M, \\\\\nM &amp; \\text{if} \\quad xy &gt; M, \\\\\nm &amp; \\text{if} \\quad xy &lt; m,\n\\end{cases}\n$$\nwhere $m$ is <code>Self::MIN</code> and $M$ is <code>Self::MAX</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::saturating_mul#saturating_mul_assign\">here</a>.</p>\n</div></details></div></details>","SaturatingMulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingPow%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingPow%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingPow&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method trait-impl\"><a href=\"#method.saturating_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>saturating_pow</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.saturating_pow\" title=\"method u32::saturating_pow\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","SaturatingPow<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingPowAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingPowAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingPowAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow_assign\" class=\"method trait-impl\"><a href=\"#method.saturating_pow_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_pow_assign</a>(&amp;mut self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Raises a number to a power, in place, saturating at the numeric bounds instead of\noverflowing.</p>\n<p>$$\nx \\gets \\begin{cases}\nx^y &amp; \\text{if} \\quad m \\leq x^y \\leq M, \\\\\nM &amp; \\text{if} \\quad x^y &gt; M, \\\\\nm &amp; \\text{if} \\quad x^y &lt; m,\n\\end{cases}\n$$\nwhere $m$ is <code>Self::MIN</code> and $M$ is <code>Self::MAX</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::saturating_pow#saturating_pow_assign\">here</a>.</p>\n</div></details></div></details>","SaturatingPowAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingSquare-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingSquare-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingSquare for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_square\" class=\"method trait-impl\"><a href=\"#method.saturating_square\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_square</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Squares a number, saturating at the numeric bounds instead of overflowing.</p>\n<p>$$\nf(x) = \\begin{cases}\nx^2 &amp; \\text{if} \\quad x^2 \\leq M, \\\\\nM &amp; \\text{if} \\quad x^2 &gt; M,\n\\end{cases}\n$$\nwhere $M$ is <code>Self::MAX</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::saturating_square#saturating_square\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","SaturatingSquare","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingSquareAssign-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingSquareAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingSquareAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_square_assign\" class=\"method trait-impl\"><a href=\"#method.saturating_square_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_square_assign</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Squares a number in place, saturating at the numeric bounds instead of overflowing.</p>\n<p>$$\nx \\gets \\begin{cases}\nx^2 &amp; \\text{if} \\quad x^2 \\leq M, \\\\\nM &amp; \\text{if} \\quad x^2 &gt; M,\n\\end{cases}\n$$\nwhere $M$ is <code>Self::MAX</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::saturating_square#saturating_square_assign\">here</a>.</p>\n</div></details></div></details>","SaturatingSquareAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingSub-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#74\">Source</a><a href=\"#impl-SaturatingSub-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.SaturatingSub.html\" title=\"trait num_traits::ops::saturating::SaturatingSub\">SaturatingSub</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/saturating.rs.html#74\">Source</a><a href=\"#method.saturating_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/saturating/trait.SaturatingSub.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Saturating subtraction. Computes <code>self - other</code>, saturating at the relevant high or low boundary of\nthe type.</div></details></div></details>","SaturatingSub","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingSub-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingSub-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingSub for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method trait-impl\"><a href=\"#method.saturating_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>saturating_sub</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html#method.saturating_sub\" title=\"method i32::saturating_sub\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","SaturatingSub","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingSubAssign-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingSubAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingSubAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_assign\" class=\"method trait-impl\"><a href=\"#method.saturating_sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Subtracts a number by another number in place, saturating at the numeric bounds\ninstead of overflowing.</p>\n<p>$$\nx \\gets \\begin{cases}\nx - y &amp; \\text{if} \\quad m \\leq x - y \\leq M, \\\\\nM &amp; \\text{if} \\quad x - y &gt; M, \\\\\nm &amp; \\text{if} \\quad x - y &lt; m,\n\\end{cases}\n$$\nwhere $m$ is <code>Self::MIN</code> and $M$ is <code>Self::MAX</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::saturating_sub#saturating_sub_assign\">here</a>.</p>\n</div></details></div></details>","SaturatingSubAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingSubMul-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingSubMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingSubMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_mul\" class=\"method trait-impl\"><a href=\"#method.saturating_sub_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_sub_mul</a>(self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Subtracts a number by the product of two other numbers, saturating at the numeric\nbounds instead of overflowing.</p>\n<p>$$\nf(x, y, z) = \\begin{cases}\nx - yz &amp; \\text{if} \\quad m \\leq x - yz \\leq M, \\\\\nM &amp; \\text{if} \\quad x - yz &gt; M, \\\\\nm &amp; \\text{if} \\quad x - yz &lt; m,\n\\end{cases}\n$$\nwhere $m$ is <code>Self::MIN</code> and $M$ is <code>Self::MAX</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::saturating_sub_mul#saturating_sub_mul_assign\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","SaturatingSubMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SaturatingSubMulAssign-for-u16\" class=\"impl\"><a href=\"#impl-SaturatingSubMulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SaturatingSubMulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_mul_assign\" class=\"method trait-impl\"><a href=\"#method.saturating_sub_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">saturating_sub_mul_assign</a>(&amp;mut self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Subtracts a number by the product of two other numbers in place, saturating at the\nnumeric bounds instead of overflowing.</p>\n<p>$$\nx \\gets \\begin{cases}\nx - yz &amp; \\text{if} \\quad m \\leq x - yz \\leq M, \\\\\nM &amp; \\text{if} \\quad x - yz &gt; M, \\\\\nm &amp; \\text{if} \\quad x - yz &lt; m,\n\\end{cases}\n$$\nwhere $m$ is <code>Self::MIN</code> and $M$ is <code>Self::MAX</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::saturating_sub_mul#saturating_sub_mul_assign\">here</a>.</p>\n</div></details></div></details>","SaturatingSubMulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SciMantissaAndExponent%3Cf32,+u64%3E-for-u16\" class=\"impl\"><a href=\"#impl-SciMantissaAndExponent%3Cf32,+u64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SciMantissaAndExponent&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sci_mantissa_and_exponent\" class=\"method trait-impl\"><a href=\"#method.sci_mantissa_and_exponent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sci_mantissa_and_exponent</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Returns the scientific mantissa and exponent.</p>\n<p>When $x$ is positive, we can write $x = 2^{e_s}m_s$, where $e_s$ is an\ninteger and $m_s$ is a rational number with $1 \\leq m_s &lt; 2$. We represent\nthe rational mantissa as a float. The conversion might not be exact, so we\nround to the nearest float using the <code>Nearest</code> rounding mode. To use other\nrounding modes, use [<code>sci_mantissa_and_exponent_round</code>].</p>\n<p>If the result cannot be expressed as an integer of the specified type,\n<code>None</code> is returned.\n$$\nf(x) \\approx (\\frac{x}{2^{\\lfloor \\log_2 x \\rfloor}},\n\\lfloor \\log_2 x \\rfloor).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mantissa_and_exponent#sci_mantissa_and_exponent\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sci_mantissa_and_exponent\" class=\"method trait-impl\"><a href=\"#method.from_sci_mantissa_and_exponent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sci_mantissa_and_exponent</a>(\n    sci_mantissa: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>,\n    sci_exponent: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a primitive integer from its scientific mantissa and exponent.</p>\n<p>When $x$ is positive, we can write $x = 2^{e_s}m_s$, where $e_s$ is an\ninteger and $m_s$ is a rational number with $1 \\leq m_s &lt; 2$. Here, the\nrational mantissa is provided as a float. If the mantissa is outside the\nrange $[1, 2)$, <code>None</code> is returned.</p>\n<p>Some combinations of mantissas and exponents do not specify an integer, in\nwhich case the resulting value is rounded to an integer using the <code>Nearest</code>\nrounding mode. To specify other rounding modes, use\n[<code>from_sci_mantissa_and_exponent_round</code>].</p>\n<p>$$\nf(x) \\approx 2^{e_s}m_s.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>sci_mantissa</code> is zero.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::mantissa_and_exponent#from_sci_mantissa_and_exponent\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sci_mantissa\" class=\"method trait-impl\"><a href=\"#method.sci_mantissa\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sci_mantissa</a>(self) -&gt; M</h4></section></summary><div class='docblock'>Extracts the scientific mantissa from a number.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sci_exponent\" class=\"method trait-impl\"><a href=\"#method.sci_exponent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sci_exponent</a>(self) -&gt; E</h4></section></summary><div class='docblock'>Extracts the scientific exponent from a number.</div></details></div></details>","SciMantissaAndExponent<f32, u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SciMantissaAndExponent%3Cf64,+u64%3E-for-u16\" class=\"impl\"><a href=\"#impl-SciMantissaAndExponent%3Cf64,+u64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SciMantissaAndExponent&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sci_mantissa_and_exponent\" class=\"method trait-impl\"><a href=\"#method.sci_mantissa_and_exponent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sci_mantissa_and_exponent</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Returns the scientific mantissa and exponent.</p>\n<p>When $x$ is positive, we can write $x = 2^{e_s}m_s$, where $e_s$ is an\ninteger and $m_s$ is a rational number with $1 \\leq m_s &lt; 2$. We represent\nthe rational mantissa as a float. The conversion might not be exact, so we\nround to the nearest float using the <code>Nearest</code> rounding mode. To use other\nrounding modes, use [<code>sci_mantissa_and_exponent_round</code>].</p>\n<p>If the result cannot be expressed as an integer of the specified type,\n<code>None</code> is returned.\n$$\nf(x) \\approx (\\frac{x}{2^{\\lfloor \\log_2 x \\rfloor}},\n\\lfloor \\log_2 x \\rfloor).\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>self</code> is zero.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::mantissa_and_exponent#sci_mantissa_and_exponent\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_sci_mantissa_and_exponent\" class=\"method trait-impl\"><a href=\"#method.from_sci_mantissa_and_exponent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_sci_mantissa_and_exponent</a>(\n    sci_mantissa: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>,\n    sci_exponent: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a primitive integer from its scientific mantissa and exponent.</p>\n<p>When $x$ is positive, we can write $x = 2^{e_s}m_s$, where $e_s$ is an\ninteger and $m_s$ is a rational number with $1 \\leq m_s &lt; 2$. Here, the\nrational mantissa is provided as a float. If the mantissa is outside the\nrange $[1, 2)$, <code>None</code> is returned.</p>\n<p>Some combinations of mantissas and exponents do not specify an integer, in\nwhich case the resulting value is rounded to an integer using the <code>Nearest</code>\nrounding mode. To specify other rounding modes, use\n[<code>from_sci_mantissa_and_exponent_round</code>].</p>\n<p>$$\nf(x) \\approx 2^{e_s}m_s.\n$$</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>sci_mantissa</code> is zero.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::mantissa_and_exponent#from_sci_mantissa_and_exponent\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sci_mantissa\" class=\"method trait-impl\"><a href=\"#method.sci_mantissa\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sci_mantissa</a>(self) -&gt; M</h4></section></summary><div class='docblock'>Extracts the scientific mantissa from a number.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sci_exponent\" class=\"method trait-impl\"><a href=\"#method.sci_exponent\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sci_exponent</a>(self) -&gt; E</h4></section></summary><div class='docblock'>Extracts the scientific exponent from a number.</div></details></div></details>","SciMantissaAndExponent<f64, u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#30\">Source</a><a href=\"#impl-Serialize-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde/1.0.219/src/serde/ser/impls.rs.html#30\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Shl%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_repr/struct.OwnedRepr.html\" title=\"struct ndarray::data_repr::OwnedRepr\">OwnedRepr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&'a ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Shl%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataOwned.html\" title=\"trait ndarray::data_traits::DataOwned\">DataOwned</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; + <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataMut.html\" title=\"trait ndarray::data_traits::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-Shl%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = U16&lt;O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: U16&lt;O&gt;) -&gt; U16&lt;O&gt;</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a></span><a href=\"#impl-Shl-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#496\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlAssign%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, rhs: U16&lt;O&gt;)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a></span><a href=\"#impl-ShlAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#950\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlRound%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlRound%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShlRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_round\" class=\"method trait-impl\"><a href=\"#method.shl_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shl_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2 or divides it by a power\nof 2 and takes the floor) and rounds according to the specified rounding\nmode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating whether the returned\nvalue is less than, equal to, or greater than the exact value. If <code>bits</code> is\nnon-negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always <code>Equal</code>, even if the\nhigher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>bits &gt; 0 || self.divisible_by_power_of_2(bits)</code>.\nRounding might only be necessary if <code>bits</code> is negative.</p>\n<p>Let $q = x2^k$, and let $g$ be the function that just returns the first\nelement of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shl_round#shl_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShlRound<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlRound%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlRound%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShlRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_round\" class=\"method trait-impl\"><a href=\"#method.shl_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shl_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2 or divides it by a power\nof 2 and takes the floor) and rounds according to the specified rounding\nmode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating whether the returned\nvalue is less than, equal to, or greater than the exact value. If <code>bits</code> is\nnon-negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always <code>Equal</code>, even if the\nhigher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>bits &gt; 0 || self.divisible_by_power_of_2(bits)</code>.\nRounding might only be necessary if <code>bits</code> is negative.</p>\n<p>Let $q = x2^k$, and let $g$ be the function that just returns the first\nelement of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shl_round#shl_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShlRound<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlRound%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlRound%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShlRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_round\" class=\"method trait-impl\"><a href=\"#method.shl_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shl_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2 or divides it by a power\nof 2 and takes the floor) and rounds according to the specified rounding\nmode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating whether the returned\nvalue is less than, equal to, or greater than the exact value. If <code>bits</code> is\nnon-negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always <code>Equal</code>, even if the\nhigher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>bits &gt; 0 || self.divisible_by_power_of_2(bits)</code>.\nRounding might only be necessary if <code>bits</code> is negative.</p>\n<p>Let $q = x2^k$, and let $g$ be the function that just returns the first\nelement of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shl_round#shl_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShlRound<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlRound%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlRound%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShlRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_round\" class=\"method trait-impl\"><a href=\"#method.shl_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shl_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2 or divides it by a power\nof 2 and takes the floor) and rounds according to the specified rounding\nmode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating whether the returned\nvalue is less than, equal to, or greater than the exact value. If <code>bits</code> is\nnon-negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always <code>Equal</code>, even if the\nhigher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>bits &gt; 0 || self.divisible_by_power_of_2(bits)</code>.\nRounding might only be necessary if <code>bits</code> is negative.</p>\n<p>Let $q = x2^k$, and let $g$ be the function that just returns the first\nelement of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shl_round#shl_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShlRound<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlRound%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlRound%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShlRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_round\" class=\"method trait-impl\"><a href=\"#method.shl_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shl_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2 or divides it by a power\nof 2 and takes the floor) and rounds according to the specified rounding\nmode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating whether the returned\nvalue is less than, equal to, or greater than the exact value. If <code>bits</code> is\nnon-negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always <code>Equal</code>, even if the\nhigher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>bits &gt; 0 || self.divisible_by_power_of_2(bits)</code>.\nRounding might only be necessary if <code>bits</code> is negative.</p>\n<p>Let $q = x2^k$, and let $g$ be the function that just returns the first\nelement of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shl_round#shl_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShlRound<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlRound%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlRound%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShlRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_round\" class=\"method trait-impl\"><a href=\"#method.shl_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shl_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2 or divides it by a power\nof 2 and takes the floor) and rounds according to the specified rounding\nmode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating whether the returned\nvalue is less than, equal to, or greater than the exact value. If <code>bits</code> is\nnon-negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always <code>Equal</code>, even if the\nhigher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>bits &gt; 0 || self.divisible_by_power_of_2(bits)</code>.\nRounding might only be necessary if <code>bits</code> is negative.</p>\n<p>Let $q = x2^k$, and let $g$ be the function that just returns the first\nelement of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shl_round#shl_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShlRound<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlRoundAssign%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlRoundAssign%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShlRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_round_assign\" class=\"method trait-impl\"><a href=\"#method.shl_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shl_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2 or divides it by a power\nof 2 and takes the floor) and rounds according to the specified rounding\nmode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned, indicating whether the assigned\nvalue is less than, equal to, or greater than the exact value. If <code>bits</code> is\nnon-negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always <code>Equal</code>, even if the\nhigher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>bits &gt; 0 || self.divisible_by_power_of_2(bits)</code>.\nRounding might only be necessary if <code>bits</code> is negative.</p>\n<p>See the [<code>ShlRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shl_round#shl_round_assign\">here</a>.</p>\n</div></details></div></details>","ShlRoundAssign<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlRoundAssign%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlRoundAssign%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShlRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_round_assign\" class=\"method trait-impl\"><a href=\"#method.shl_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shl_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2 or divides it by a power\nof 2 and takes the floor) and rounds according to the specified rounding\nmode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned, indicating whether the assigned\nvalue is less than, equal to, or greater than the exact value. If <code>bits</code> is\nnon-negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always <code>Equal</code>, even if the\nhigher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>bits &gt; 0 || self.divisible_by_power_of_2(bits)</code>.\nRounding might only be necessary if <code>bits</code> is negative.</p>\n<p>See the [<code>ShlRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shl_round#shl_round_assign\">here</a>.</p>\n</div></details></div></details>","ShlRoundAssign<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlRoundAssign%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlRoundAssign%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShlRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_round_assign\" class=\"method trait-impl\"><a href=\"#method.shl_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shl_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2 or divides it by a power\nof 2 and takes the floor) and rounds according to the specified rounding\nmode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned, indicating whether the assigned\nvalue is less than, equal to, or greater than the exact value. If <code>bits</code> is\nnon-negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always <code>Equal</code>, even if the\nhigher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>bits &gt; 0 || self.divisible_by_power_of_2(bits)</code>.\nRounding might only be necessary if <code>bits</code> is negative.</p>\n<p>See the [<code>ShlRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shl_round#shl_round_assign\">here</a>.</p>\n</div></details></div></details>","ShlRoundAssign<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlRoundAssign%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlRoundAssign%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShlRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_round_assign\" class=\"method trait-impl\"><a href=\"#method.shl_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shl_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2 or divides it by a power\nof 2 and takes the floor) and rounds according to the specified rounding\nmode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned, indicating whether the assigned\nvalue is less than, equal to, or greater than the exact value. If <code>bits</code> is\nnon-negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always <code>Equal</code>, even if the\nhigher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>bits &gt; 0 || self.divisible_by_power_of_2(bits)</code>.\nRounding might only be necessary if <code>bits</code> is negative.</p>\n<p>See the [<code>ShlRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shl_round#shl_round_assign\">here</a>.</p>\n</div></details></div></details>","ShlRoundAssign<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlRoundAssign%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlRoundAssign%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShlRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_round_assign\" class=\"method trait-impl\"><a href=\"#method.shl_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shl_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2 or divides it by a power\nof 2 and takes the floor) and rounds according to the specified rounding\nmode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned, indicating whether the assigned\nvalue is less than, equal to, or greater than the exact value. If <code>bits</code> is\nnon-negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always <code>Equal</code>, even if the\nhigher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>bits &gt; 0 || self.divisible_by_power_of_2(bits)</code>.\nRounding might only be necessary if <code>bits</code> is negative.</p>\n<p>See the [<code>ShlRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shl_round#shl_round_assign\">here</a>.</p>\n</div></details></div></details>","ShlRoundAssign<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlRoundAssign%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShlRoundAssign%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShlRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_round_assign\" class=\"method trait-impl\"><a href=\"#method.shl_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shl_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Left-shifts a number (multiplies it by a power of 2 or divides it by a power\nof 2 and takes the floor) and rounds according to the specified rounding\nmode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned, indicating whether the assigned\nvalue is less than, equal to, or greater than the exact value. If <code>bits</code> is\nnon-negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always <code>Equal</code>, even if the\nhigher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>bits &gt; 0 || self.divisible_by_power_of_2(bits)</code>.\nRounding might only be necessary if <code>bits</code> is negative.</p>\n<p>See the [<code>ShlRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shl_round#shl_round_assign\">here</a>.</p>\n</div></details></div></details>","ShlRoundAssign<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Shr%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_repr/struct.OwnedRepr.html\" title=\"struct ndarray::data_repr::OwnedRepr\">OwnedRepr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&'a ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Shr%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataOwned.html\" title=\"trait ndarray::data_traits::DataOwned\">DataOwned</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; + <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataMut.html\" title=\"trait ndarray::data_traits::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-Shr%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = U16&lt;O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: U16&lt;O&gt;) -&gt; U16&lt;O&gt;</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a></span><a href=\"#impl-Shr-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#614\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrAssign%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, rhs: U16&lt;O&gt;)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a></span><a href=\"#impl-ShrAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/bit.rs.html#1032\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRound%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRound%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round\" class=\"method trait-impl\"><a href=\"#method.shr_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating\nwhether the returned value is less than, equal to, or greater than the exact\nvalue. If <code>bits</code> is negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always\n<code>Equal</code>, even if the higher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>. Rounding\nmight only be necessary if <code>bits</code> is non-negative.</p>\n<p>Let $q = \\frac{x}{2^k}$, and let $g$ be the function that just returns the\nfirst element of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = \\operatorname{sgn}(q) \\lfloor |q| \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = \\operatorname{sgn}(q) \\lceil |q| \\rceil.$</p>\n<p>$g(x, k, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\Z$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShrRound<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRound%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRound%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round\" class=\"method trait-impl\"><a href=\"#method.shr_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating\nwhether the returned value is less than, equal to, or greater than the exact\nvalue. If <code>bits</code> is negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always\n<code>Equal</code>, even if the higher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>. Rounding\nmight only be necessary if <code>bits</code> is non-negative.</p>\n<p>Let $q = \\frac{x}{2^k}$, and let $g$ be the function that just returns the\nfirst element of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = \\operatorname{sgn}(q) \\lfloor |q| \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = \\operatorname{sgn}(q) \\lceil |q| \\rceil.$</p>\n<p>$g(x, k, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\Z$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShrRound<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRound%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRound%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round\" class=\"method trait-impl\"><a href=\"#method.shr_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating\nwhether the returned value is less than, equal to, or greater than the exact\nvalue. If <code>bits</code> is negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always\n<code>Equal</code>, even if the higher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>. Rounding\nmight only be necessary if <code>bits</code> is non-negative.</p>\n<p>Let $q = \\frac{x}{2^k}$, and let $g$ be the function that just returns the\nfirst element of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = \\operatorname{sgn}(q) \\lfloor |q| \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = \\operatorname{sgn}(q) \\lceil |q| \\rceil.$</p>\n<p>$g(x, k, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\Z$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShrRound<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRound%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRound%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round\" class=\"method trait-impl\"><a href=\"#method.shr_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating\nwhether the returned value is less than, equal to, or greater than the exact\nvalue. If <code>bits</code> is negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always\n<code>Equal</code>, even if the higher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>. Rounding\nmight only be necessary if <code>bits</code> is non-negative.</p>\n<p>Let $q = \\frac{x}{2^k}$, and let $g$ be the function that just returns the\nfirst element of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = \\operatorname{sgn}(q) \\lfloor |q| \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = \\operatorname{sgn}(q) \\lceil |q| \\rceil.$</p>\n<p>$g(x, k, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\Z$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShrRound<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRound%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRound%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round\" class=\"method trait-impl\"><a href=\"#method.shr_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating\nwhether the returned value is less than, equal to, or greater than the exact\nvalue. If <code>bits</code> is negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always\n<code>Equal</code>, even if the higher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>. Rounding\nmight only be necessary if <code>bits</code> is non-negative.</p>\n<p>Let $q = \\frac{x}{2^k}$, and let $g$ be the function that just returns the\nfirst element of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = \\operatorname{sgn}(q) \\lfloor |q| \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = \\operatorname{sgn}(q) \\lceil |q| \\rceil.$</p>\n<p>$g(x, k, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\Z$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShrRound<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRound%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRound%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round\" class=\"method trait-impl\"><a href=\"#method.shr_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating\nwhether the returned value is less than, equal to, or greater than the exact\nvalue. If <code>bits</code> is negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is always\n<code>Equal</code>, even if the higher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>. Rounding\nmight only be necessary if <code>bits</code> is non-negative.</p>\n<p>Let $q = \\frac{x}{2^k}$, and let $g$ be the function that just returns the\nfirst element of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = \\operatorname{sgn}(q) \\lfloor |q| \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = \\operatorname{sgn}(q) \\lceil |q| \\rceil.$</p>\n<p>$g(x, k, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\Z$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShrRound<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRound%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRound%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round\" class=\"method trait-impl\"><a href=\"#method.shr_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating\nwhether the returned value is less than, equal to, or greater than the exact\nvalue.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>.</p>\n<p>Let $q = \\frac{x}{2^k}$, and let $g$ be the function that just returns the\nfirst element of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShrRound<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRound%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRound%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round\" class=\"method trait-impl\"><a href=\"#method.shr_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating\nwhether the returned value is less than, equal to, or greater than the exact\nvalue.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>.</p>\n<p>Let $q = \\frac{x}{2^k}$, and let $g$ be the function that just returns the\nfirst element of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShrRound<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRound%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRound%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round\" class=\"method trait-impl\"><a href=\"#method.shr_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating\nwhether the returned value is less than, equal to, or greater than the exact\nvalue.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>.</p>\n<p>Let $q = \\frac{x}{2^k}$, and let $g$ be the function that just returns the\nfirst element of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShrRound<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRound%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRound%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round\" class=\"method trait-impl\"><a href=\"#method.shr_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating\nwhether the returned value is less than, equal to, or greater than the exact\nvalue.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>.</p>\n<p>Let $q = \\frac{x}{2^k}$, and let $g$ be the function that just returns the\nfirst element of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShrRound<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRound%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRound%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round\" class=\"method trait-impl\"><a href=\"#method.shr_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating\nwhether the returned value is less than, equal to, or greater than the exact\nvalue.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>.</p>\n<p>Let $q = \\frac{x}{2^k}$, and let $g$ be the function that just returns the\nfirst element of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShrRound<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRound%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRound%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRound&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round\" class=\"method trait-impl\"><a href=\"#method.shr_round\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round</a>(self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, rm: RoundingMode) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is also returned, indicating\nwhether the returned value is less than, equal to, or greater than the exact\nvalue.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>.</p>\n<p>Let $q = \\frac{x}{2^k}$, and let $g$ be the function that just returns the\nfirst element of the pair, without the <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>:</p>\n<p>$g(x, k, \\mathrm{Down}) = g(x, y, \\mathrm{Floor}) = \\lfloor q \\rfloor.$</p>\n<p>$g(x, k, \\mathrm{Up}) = g(x, y, \\mathrm{Ceiling}) = \\lceil q \\rceil.$</p>\n<p>$$\ng(x, k, \\mathrm{Nearest}) = \\begin{cases}\n\\lfloor q \\rfloor &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &lt; \\frac{1}{2}, \\\\\n\\lceil q \\rceil &amp; \\text{if}\n\\quad q - \\lfloor q \\rfloor &gt; \\frac{1}{2}, \\\\\n\\lfloor q \\rfloor &amp; \\text{if} \\quad q - \\lfloor q \\rfloor =\n\\frac{1}{2} \\ \\text{and} \\ \\lfloor q \\rfloor\n\\ \\text{is even}, \\\\\n\\lceil q \\rceil &amp;\n\\text{if} \\quad q - \\lfloor q \\rfloor = \\frac{1}{2} \\ \\text{and}\n\\ \\lfloor q \\rfloor \\ \\text{is odd}.\n\\end{cases}\n$$</p>\n<p>$g(x, k, \\mathrm{Exact}) = q$, but panics if $q \\notin \\N$.</p>\n<p>Then</p>\n<p>$f(x, k, r) = (g(x, k, r), \\operatorname{cmp}(g(x, k, r), q))$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","ShrRound<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRoundAssign%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRoundAssign%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round_assign\" class=\"method trait-impl\"><a href=\"#method.shr_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned,\nindicating whether the assigned value is less than, equal to, or greater\nthan the exact value. If <code>bits</code> is negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>\nis always <code>Equal</code>, even if the higher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>. Rounding\nmight only be necessary if <code>bits</code> is non-negative.</p>\n<p>See the [<code>ShrRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round_assign\">here</a>.</p>\n</div></details></div></details>","ShrRoundAssign<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRoundAssign%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRoundAssign%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round_assign\" class=\"method trait-impl\"><a href=\"#method.shr_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned,\nindicating whether the assigned value is less than, equal to, or greater\nthan the exact value. If <code>bits</code> is negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>\nis always <code>Equal</code>, even if the higher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>. Rounding\nmight only be necessary if <code>bits</code> is non-negative.</p>\n<p>See the [<code>ShrRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round_assign\">here</a>.</p>\n</div></details></div></details>","ShrRoundAssign<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRoundAssign%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRoundAssign%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round_assign\" class=\"method trait-impl\"><a href=\"#method.shr_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned,\nindicating whether the assigned value is less than, equal to, or greater\nthan the exact value. If <code>bits</code> is negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>\nis always <code>Equal</code>, even if the higher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>. Rounding\nmight only be necessary if <code>bits</code> is non-negative.</p>\n<p>See the [<code>ShrRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round_assign\">here</a>.</p>\n</div></details></div></details>","ShrRoundAssign<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRoundAssign%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRoundAssign%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round_assign\" class=\"method trait-impl\"><a href=\"#method.shr_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned,\nindicating whether the assigned value is less than, equal to, or greater\nthan the exact value. If <code>bits</code> is negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>\nis always <code>Equal</code>, even if the higher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>. Rounding\nmight only be necessary if <code>bits</code> is non-negative.</p>\n<p>See the [<code>ShrRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round_assign\">here</a>.</p>\n</div></details></div></details>","ShrRoundAssign<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRoundAssign%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRoundAssign%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round_assign\" class=\"method trait-impl\"><a href=\"#method.shr_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned,\nindicating whether the assigned value is less than, equal to, or greater\nthan the exact value. If <code>bits</code> is negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>\nis always <code>Equal</code>, even if the higher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>. Rounding\nmight only be necessary if <code>bits</code> is non-negative.</p>\n<p>See the [<code>ShrRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round_assign\">here</a>.</p>\n</div></details></div></details>","ShrRoundAssign<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRoundAssign%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRoundAssign%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round_assign\" class=\"method trait-impl\"><a href=\"#method.shr_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned,\nindicating whether the assigned value is less than, equal to, or greater\nthan the exact value. If <code>bits</code> is negative, then the returned <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a>\nis always <code>Equal</code>, even if the higher bits of the result are lost.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>. Rounding\nmight only be necessary if <code>bits</code> is non-negative.</p>\n<p>See the [<code>ShrRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>bits</code> is positive and <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible\nby $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round_assign\">here</a>.</p>\n</div></details></div></details>","ShrRoundAssign<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRoundAssign%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRoundAssign%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round_assign\" class=\"method trait-impl\"><a href=\"#method.shr_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned,\nindicating whether the assigned value is less than, equal to, or greater\nthan the exact value.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>.</p>\n<p>See the [<code>ShrRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round_assign\">here</a>.</p>\n</div></details></div></details>","ShrRoundAssign<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRoundAssign%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRoundAssign%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round_assign\" class=\"method trait-impl\"><a href=\"#method.shr_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned,\nindicating whether the assigned value is less than, equal to, or greater\nthan the exact value.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>.</p>\n<p>See the [<code>ShrRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round_assign\">here</a>.</p>\n</div></details></div></details>","ShrRoundAssign<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRoundAssign%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRoundAssign%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round_assign\" class=\"method trait-impl\"><a href=\"#method.shr_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned,\nindicating whether the assigned value is less than, equal to, or greater\nthan the exact value.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>.</p>\n<p>See the [<code>ShrRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round_assign\">here</a>.</p>\n</div></details></div></details>","ShrRoundAssign<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRoundAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRoundAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round_assign\" class=\"method trait-impl\"><a href=\"#method.shr_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned,\nindicating whether the assigned value is less than, equal to, or greater\nthan the exact value.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>.</p>\n<p>See the [<code>ShrRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round_assign\">here</a>.</p>\n</div></details></div></details>","ShrRoundAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRoundAssign%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRoundAssign%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round_assign\" class=\"method trait-impl\"><a href=\"#method.shr_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned,\nindicating whether the assigned value is less than, equal to, or greater\nthan the exact value.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>.</p>\n<p>See the [<code>ShrRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round_assign\">here</a>.</p>\n</div></details></div></details>","ShrRoundAssign<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrRoundAssign%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-ShrRoundAssign%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ShrRoundAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_round_assign\" class=\"method trait-impl\"><a href=\"#method.shr_round_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">shr_round_assign</a>(&amp;mut self, bits: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, rm: RoundingMode) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Shifts a number right (divides it by a power of 2) and rounds according to\nthe specified rounding mode, in place. An <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> is returned,\nindicating whether the assigned value is less than, equal to, or greater\nthan the exact value.</p>\n<p>Passing <code>Floor</code> or <code>Down</code> is equivalent to using <code>&gt;&gt;</code>. To test whether\n<code>Exact</code> can be passed, use <code>self.divisible_by_power_of_2(bits)</code>.</p>\n<p>See the [<code>ShrRound</code>] documentation for details.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>rm</code> is <code>Exact</code> but <code>self</code> is not divisible by $2^b$.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::shr_round#shr_round_assign\">here</a>.</p>\n</div></details></div></details>","ShrRoundAssign<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sign-for-u16\" class=\"impl\"><a href=\"#impl-Sign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Sign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sign\" class=\"method trait-impl\"><a href=\"#method.sign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sign</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><p>Compares a number to zero.</p>\n<p>Returns <code>Greater</code>, <code>Equal</code>, or <code>Less</code>, depending on whether the number is positive,\nzero, or negative, respectively.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::sign#sign\">here</a>.</p>\n</div></details></div></details>","Sign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SignificantBits-for-u16\" class=\"impl\"><a href=\"#impl-SignificantBits-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SignificantBits for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.significant_bits\" class=\"method trait-impl\"><a href=\"#method.significant_bits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">significant_bits</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of significant bits of an unsigned primitive integer.</p>\n<p>This is the integer’s width minus the number of leading zeros.</p>\n<p>$$\nf(n) = \\begin{cases}\n0 &amp; \\text{if} \\quad n = 0, \\\\\n\\lfloor \\log_2 n \\rfloor + 1 &amp; \\text{if} \\quad n &gt; 0.\n\\end{cases}\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::significant_bits#significant_bits\">here</a>.</p>\n</div></details></div></details>","SignificantBits","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1095\">Source</a><a href=\"#impl-SimdElement-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/core_simd/vector/trait.SimdElement.html\" title=\"trait core::core_simd::vector::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/portable-simd/crates/core_simd/src/vector.rs.html#1096\">Source</a><a href=\"#associatedtype.Mask\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/core_simd/vector/trait.SimdElement.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SolValue-for-u16\" class=\"impl\"><a href=\"#impl-SolValue-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SolValue for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.SolType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SolType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SolType</a> = Uint&lt;16&gt;</h4></section></summary><div class='docblock'>The Solidity type that this type corresponds to.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sol_name\" class=\"method trait-impl\"><a href=\"#method.sol_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sol_name</a>(&amp;self) -&gt; &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The name of the associated Solidity type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sol_type_name\" class=\"method trait-impl\"><a href=\"#method.sol_type_name\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sol_type_name</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.6.3: use <code>sol_name</code> instead</span></div></span><div class='docblock'>The name of the associated Solidity type. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.tokenize\" class=\"method trait-impl\"><a href=\"#method.tokenize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">tokenize</a>(&amp;self) -&gt; &lt;Self::SolType as SolType&gt;::Token&lt;'_&gt;</h4></section></summary><div class='docblock'>Tokenizes the given value into this type’s token. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.detokenize\" class=\"method trait-impl\"><a href=\"#method.detokenize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">detokenize</a>(token: &lt;Self::SolType as SolType&gt;::Token&lt;'_&gt;) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&lt;Self::SolType as SolType&gt;::RustType&gt;,</div></h4></section></summary><div class='docblock'>Detokenize a value from the given token. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abi_encoded_size\" class=\"method trait-impl\"><a href=\"#method.abi_encoded_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abi_encoded_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Calculate the ABI-encoded size of the data. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eip712_data_word\" class=\"method trait-impl\"><a href=\"#method.eip712_data_word\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eip712_data_word</a>(&amp;self) -&gt; FixedBytes&lt;32&gt;</h4></section></summary><div class='docblock'>Encode this data according to EIP-712 <code>encodeData</code> rules, and hash it\nif necessary. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abi_encode_packed_to\" class=\"method trait-impl\"><a href=\"#method.abi_encode_packed_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abi_encode_packed_to</a>(&amp;self, out: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;)</h4></section></summary><div class='docblock'>Non-standard Packed Mode ABI encoding. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abi_encode_packed\" class=\"method trait-impl\"><a href=\"#method.abi_encode_packed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abi_encode_packed</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Non-standard Packed Mode ABI encoding. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abi_encode\" class=\"method trait-impl\"><a href=\"#method.abi_encode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abi_encode</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>ABI-encodes the value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abi_encode_sequence\" class=\"method trait-impl\"><a href=\"#method.abi_encode_sequence\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abi_encode_sequence</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a><div class=\"where\">where\n    &lt;Self::SolType as SolType&gt;::Token&lt;'a&gt;: for&lt;'a&gt; TokenSeq&lt;'a&gt;,</div></h4></section></summary><div class='docblock'>Encodes an ABI sequence. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abi_encode_params\" class=\"method trait-impl\"><a href=\"#method.abi_encode_params\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abi_encode_params</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"Vec&lt;u8&gt;\">ⓘ</a><div class=\"where\">where\n    &lt;Self::SolType as SolType&gt;::Token&lt;'a&gt;: for&lt;'a&gt; TokenSeq&lt;'a&gt;,</div></h4></section></summary><div class='docblock'>Encodes an ABI sequence suitable for function parameters. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abi_decode\" class=\"method trait-impl\"><a href=\"#method.abi_decode\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abi_decode</a>(data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], validate: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Error&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&lt;Self::SolType as SolType&gt;::RustType&gt;,</div></h4></section></summary><div class='docblock'>ABI-decode this type from the given data. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abi_decode_params\" class=\"method trait-impl\"><a href=\"#method.abi_decode_params\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abi_decode_params</a>&lt;'de&gt;(\n    data: &amp;'de [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    validate: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Error&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&lt;Self::SolType as SolType&gt;::RustType&gt;,\n    &lt;Self::SolType as SolType&gt;::Token&lt;'de&gt;: TokenSeq&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>ABI-decode this type from the given data. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abi_decode_sequence\" class=\"method trait-impl\"><a href=\"#method.abi_decode_sequence\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abi_decode_sequence</a>&lt;'de&gt;(\n    data: &amp;'de [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    validate: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Error&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&lt;Self::SolType as SolType&gt;::RustType&gt;,\n    &lt;Self::SolType as SolType&gt;::Token&lt;'de&gt;: TokenSeq&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>ABI-decode this type from the given data. <a>Read more</a></div></details></div></details>","SolValue","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SplitInHalf-for-u16\" class=\"impl\"><a href=\"#impl-SplitInHalf-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SplitInHalf for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.lower_half\" class=\"method trait-impl\"><a href=\"#method.lower_half\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lower_half</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as HasHalf&gt;::Half</h4></section></summary><div class=\"docblock\"><p>Extracts the lower, or least significant, half of an unsigned integer.</p>\n<p>Let $W$ be the width of <code>Self</code> (the input type).</p>\n<p>$f(n) = m$, where $m &lt; 2^{W/2}$ and $n + 2^{W/2} k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::half#lower_half\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.upper_half\" class=\"method trait-impl\"><a href=\"#method.upper_half\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">upper_half</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as HasHalf&gt;::Half</h4></section></summary><div class=\"docblock\"><p>Extracts the upper, or most-significant, half of an unsigned integer.</p>\n<p>Let $W$ be the width of <code>Self</code> (the input type).</p>\n<p>$f(n) = \\lfloor \\frac{n}{2^{W/2}} \\rfloor$.</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::half#upper_half\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_in_half\" class=\"method trait-impl\"><a href=\"#method.split_in_half\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">split_in_half</a>(&amp;self) -&gt; (Self::Half, Self::Half)</h4></section></summary><div class='docblock'>Extracts both halves of a number; the upper, or most-significant, half comes first. <a>Read more</a></div></details></div></details>","SplitInHalf","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SqrtAssignRem-for-u16\" class=\"impl\"><a href=\"#impl-SqrtAssignRem-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SqrtAssignRem for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sqrt_assign_rem\" class=\"method trait-impl\"><a href=\"#method.sqrt_assign_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sqrt_assign_rem</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Replaces an integer with the floor of its square root, and returns the remainder\n(the difference between the original integer and the square of the floor).</p>\n<p>$f(x) = x - \\lfloor\\sqrt{x}\\rfloor^2$,</p>\n<p>$x \\gets \\lfloor\\sqrt{x}\\rfloor$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::sqrt#sqrt_assign_rem\">here</a>.</p>\n</div></details><section id=\"associatedtype.RemOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RemOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">RemOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","SqrtAssignRem","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SqrtRem-for-u16\" class=\"impl\"><a href=\"#impl-SqrtRem-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SqrtRem for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sqrt_rem\" class=\"method trait-impl\"><a href=\"#method.sqrt_rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sqrt_rem</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Returns the floor of the square root of a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a>, and the remainder (the difference between\nthe <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> and the square of the floor).</p>\n<p>$f(x) = (\\lfloor\\sqrt{x}\\rfloor, x - \\lfloor\\sqrt{x}\\rfloor^2)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::sqrt#sqrt_rem\">here</a>.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h5>\n<p>The <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a> implementation calls the implementation for <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\" title=\"primitive u32\"><code>u32</code></a>s.</p>\n</div></details><section id=\"associatedtype.SqrtOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.SqrtOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">SqrtOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><section id=\"associatedtype.RemOutput\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.RemOutput\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">RemOutput</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","SqrtRem","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Square-for-u16\" class=\"impl\"><a href=\"#impl-Square-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Square for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.square\" class=\"method trait-impl\"><a href=\"#method.square\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">square</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Squares a number.</p>\n<p>$f(x) = x^2$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::square#square\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","Square","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SquareAssign-for-u16\" class=\"impl\"><a href=\"#impl-SquareAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SquareAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.square_assign\" class=\"method trait-impl\"><a href=\"#method.square_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">square_assign</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Squares a number in place.</p>\n<p>$x \\gets x^2$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::square#square_assign\">here</a>.</p>\n</div></details></div></details>","SquareAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StateID-for-u16\" class=\"impl\"><a href=\"#impl-StateID-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl StateID for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_usize\" class=\"method trait-impl\"><a href=\"#method.from_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_usize</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Convert from a <code>usize</code> to this implementation’s representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_usize\" class=\"method trait-impl\"><a href=\"#method.to_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_usize</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Convert this implementation’s representation to a <code>usize</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_id\" class=\"method trait-impl\"><a href=\"#method.max_id\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">max_id</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the maximum state identifier supported by this representation. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_bytes\" class=\"method trait-impl\"><a href=\"#method.read_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read_bytes</a>(slice: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Read a single state identifier from the given slice of bytes in native\nendian format. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_bytes\" class=\"method trait-impl\"><a href=\"#method.write_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_bytes</a>(self, slice: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>])</h4></section></summary><div class='docblock'>Write this state identifier to the given slice of bytes in native\nendian format. <a>Read more</a></div></details></div></details>","StateID","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/range.rs.html#426-429\">Source</a><a href=\"#impl-Step-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html\" title=\"trait core::iter::range::Step\">Step</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/range.rs.html#426-429\">Source</a><a href=\"#method.forward\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#method.forward\" class=\"fn\">forward</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/range.rs.html#426-429\">Source</a><a href=\"#method.backward\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#method.backward\" class=\"fn\">backward</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/range.rs.html#426-429\">Source</a><a href=\"#method.forward_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/range.rs.html#426-429\">Source</a><a href=\"#method.backward_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/range.rs.html#426-429\">Source</a><a href=\"#method.steps_between\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, end: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the bounds on the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>\nlike <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html#method.size_hint\" title=\"method core::iter::traits::iterator::Iterator::size_hint\"><code>Iterator::size_hint()</code></a>. <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/range.rs.html#426-429\">Source</a><a href=\"#method.forward_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/range.rs.html#426-429\">Source</a><a href=\"#method.backward_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/range/trait.Step.html#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Sub%3C%26ArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.Data.html\" title=\"trait ndarray::data_traits::Data\">Data</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_repr/struct.OwnedRepr.html\" title=\"struct ndarray::data_repr::OwnedRepr\">OwnedRepr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&'a ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26BigInt%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/subtraction.rs.html#84\">Source</a><a href=\"#impl-Sub%3C%26BigInt%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/subtraction.rs.html#84\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/subtraction.rs.html#84\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&BigInt>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26BigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/subtraction.rs.html#144\">Source</a><a href=\"#impl-Sub%3C%26BigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/subtraction.rs.html#144\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/subtraction.rs.html#144\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26Complex%3Cu16%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#impl-Sub%3C%26Complex%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;'a <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&'a Complex<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#232\">Source</a></span><a href=\"#impl-Sub%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#232\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#232\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#impl-Sub%3CArrayBase%3CS,+D%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S, D&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataOwned.html\" title=\"trait ndarray::data_traits::DataOwned\">DataOwned</a>&lt;Elem = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; + <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/data_traits/trait.DataMut.html\" title=\"trait ndarray::data_traits::DataMut\">DataMut</a>,\n    D: <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/dimension/dimension_trait/trait.Dimension.html\" title=\"trait ndarray::dimension::dimension_trait::Dimension\">Dimension</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#341\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/ndarray/0.15/ndarray/struct.ArrayBase.html\" title=\"struct ndarray::ArrayBase\">ArrayBase</a>&lt;S, D&gt;</h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<ArrayBase<S, D>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CBigInt%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/subtraction.rs.html#84\">Source</a><a href=\"#impl-Sub%3CBigInt%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/subtraction.rs.html#84\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/subtraction.rs.html#84\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<BigInt>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CBigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/subtraction.rs.html#144\">Source</a><a href=\"#impl-Sub%3CBigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/subtraction.rs.html#144\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/subtraction.rs.html#144\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CComplex%3Cu16%3E%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#impl-Sub%3CComplex%3Cu16%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-complex/0.4/src/num_complex/lib.rs.html#1179\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-complex/0.4/num_complex/struct.Complex.html\" title=\"struct num_complex::Complex\">Complex</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<Complex<u16>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-Sub%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = U16&lt;O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: U16&lt;O&gt;) -&gt; U16&lt;O&gt;</h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#232\">Source</a></span><a href=\"#impl-Sub-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#232\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#232\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#846\">Source</a></span><a href=\"#impl-SubAssign%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#846\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<&u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3CU16%3CO%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-SubAssign%3CU16%3CO%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;U16&lt;O&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    O: ByteOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: U16&lt;O&gt;)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<U16<O>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#846\">Source</a></span><a href=\"#impl-SubAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/ops/arith.rs.html#846\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/1.85.1/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubMul-for-u16\" class=\"impl\"><a href=\"#impl-SubMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SubMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_mul\" class=\"method trait-impl\"><a href=\"#method.sub_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sub_mul</a>(self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Subtracts a number by the product of two other numbers.</p>\n<p>$f(x, y, z) = x - yz$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::sub_mul#sub_mul\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","SubMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubMulAssign-for-u16\" class=\"impl\"><a href=\"#impl-SubMulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl SubMulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_mul_assign\" class=\"method trait-impl\"><a href=\"#method.sub_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">sub_mul_assign</a>(&amp;mut self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Subtracts a number by the product of two other numbers in place.</p>\n<p>$x \\gets x - yz$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::sub_mul#sub_mul_assign\">here</a>.</p>\n</div></details></div></details>","SubMulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Subfactorial-for-u16\" class=\"impl\"><a href=\"#impl-Subfactorial-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Subfactorial for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.subfactorial\" class=\"method trait-impl\"><a href=\"#method.subfactorial\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">subfactorial</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Computes the subfactorial of a number.</p>\n<p>The subfactorial of $n$ counts the number of derangements of a set of size $n$; a\nderangement is a permutation with no fixed points.</p>\n<p>If the input is too large, the function panics. For a function that returns <code>None</code>\ninstead, try <a href=\"CheckedSubfactorial::checked_subfactorial\"><code>checked_subfactorial</code></a>.</p>\n<p>$$\nf(n) = \\ !n = \\lfloor n!/e \\rfloor.\n$$</p>\n<p>$!n = O(n!) = O(\\sqrt{n}(n/e)^n)$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the output is too large to be represented.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::factorial#subfactorial\">here</a>.</p>\n</div></details></div></details>","Subfactorial","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26u16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/traits/accum.rs.html#149\">Source</a></span><a href=\"#impl-Sum%3C%26u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/traits/accum.rs.html#149\">Source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by “summing up”\nthe items.</div></details></div></details>","Sum<&'a u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/traits/accum.rs.html#149\">Source</a></span><a href=\"#impl-Sum-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/traits/accum.rs.html#149\">Source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a><div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,</div></h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by “summing up”\nthe items.</div></details></div></details>","Sum","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToBigInt-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#355\">Source</a><a href=\"#impl-ToBigInt-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/trait.ToBigInt.html\" title=\"trait num_bigint::bigint::ToBigInt\">ToBigInt</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_bigint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#355\">Source</a><a href=\"#method.to_bigint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/trait.ToBigInt.html#tymethod.to_bigint\" class=\"fn\">to_bigint</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <a href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\"><code>BigInt</code></a>.</div></details></div></details>","ToBigInt","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToBigUint-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#582\">Source</a><a href=\"#impl-ToBigUint-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/trait.ToBigUint.html\" title=\"trait num_bigint::biguint::ToBigUint\">ToBigUint</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_biguint\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#582\">Source</a><a href=\"#method.to_biguint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/trait.ToBigUint.html#tymethod.to_biguint\" class=\"fn\">to_biguint</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <a href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\"><code>BigUint</code></a>.</div></details></div></details>","ToBigUint","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToBytes-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#236\">Source</a><a href=\"#impl-ToBytes-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html\" title=\"trait num_traits::ops::bytes::ToBytes\">ToBytes</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Bytes\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#236\">Source</a><a href=\"#associatedtype.Bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#associatedtype.Bytes\" class=\"associatedtype\">Bytes</a> = [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">2</a>]</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#236\">Source</a><a href=\"#method.to_be_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html\" title=\"trait num_traits::ops::bytes::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::ToBytes::Bytes\">Bytes</a></h4></section></summary><div class='docblock'>Return the memory representation of this number as a byte array in big-endian byte order. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#tymethod.to_be_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#236\">Source</a><a href=\"#method.to_le_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html\" title=\"trait num_traits::ops::bytes::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::ToBytes::Bytes\">Bytes</a></h4></section></summary><div class='docblock'>Return the memory representation of this number as a byte array in little-endian byte order. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#tymethod.to_le_bytes\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/bytes.rs.html#236\">Source</a><a href=\"#method.to_ne_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#method.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(&amp;self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html\" title=\"trait num_traits::ops::bytes::ToBytes\">ToBytes</a>&gt;::<a class=\"associatedtype\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#associatedtype.Bytes\" title=\"type num_traits::ops::bytes::ToBytes::Bytes\">Bytes</a></h4></section></summary><div class='docblock'>Return the memory representation of this number as a byte array in native byte order. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/bytes/trait.ToBytes.html#method.to_ne_bytes\">Read more</a></div></details></div></details>","ToBytes","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToPrimitive-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#impl-ToPrimitive-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html\" title=\"trait num_traits::cast::ToPrimitive\">ToPrimitive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_isize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_isize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_isize\" class=\"fn\">to_isize</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>isize</code>. If the value cannot be\nrepresented by an <code>isize</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_i8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i8\" class=\"fn\">to_i8</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be\nrepresented by an <code>i8</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_i16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i16\" class=\"fn\">to_i16</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot be\nrepresented by an <code>i16</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_i32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i32\" class=\"fn\">to_i32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot be\nrepresented by an <code>i32</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_i64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#tymethod.to_i64\" class=\"fn\">to_i64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot be\nrepresented by an <code>i64</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_i128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_i128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i128\" class=\"fn\">to_i128</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot be\nrepresented by an <code>i128</code> (<code>i64</code> under the default implementation), then\n<code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_i128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_usize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_usize\" class=\"fn\">to_usize</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot be\nrepresented by a <code>usize</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u8\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_u8\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u8\" class=\"fn\">to_u8</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be\nrepresented by a <code>u8</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u16\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_u16\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u16\" class=\"fn\">to_u16</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be\nrepresented by a <code>u16</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u32\" class=\"fn\">to_u32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be\nrepresented by a <code>u32</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_u64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#tymethod.to_u64\" class=\"fn\">to_u64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be\nrepresented by a <code>u64</code>, then <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u128\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_u128\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u128\" class=\"fn\">to_u128</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot be\nrepresented by a <code>u128</code> (<code>u64</code> under the default implementation), then\n<code>None</code> is returned. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_u128\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_f32\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_f32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_f32\" class=\"fn\">to_f32</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to positive\nor negative inifinity, otherwise <code>None</code> is returned if the value cannot\nbe represented by an <code>f32</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_f64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/cast.rs.html#264\">Source</a><a href=\"#method.to_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_f64\" class=\"fn\">to_f64</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class='docblock'>Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to positive\nor negative inifinity, otherwise <code>None</code> is returned if the value cannot\nbe represented by an <code>f64</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.ToPrimitive.html#method.to_f64\">Read more</a></div></details></div></details>","ToPrimitive","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToSci-for-u16\" class=\"impl\"><a href=\"#impl-ToSci-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ToSci for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt_sci_valid\" class=\"method trait-impl\"><a href=\"#method.fmt_sci_valid\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt_sci_valid</a>(&amp;self, options: ToSciOptions) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Determines whether an unsigned number can be converted to a string using\n<a href=\"super::super::traits::ToSci::to_sci_with_options\"><code>to_sci_with_options</code></a> and a\nparticular set of options.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::to_sci#fmt_sci_valid\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt_sci\" class=\"method trait-impl\"><a href=\"#method.fmt_sci\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt_sci</a>(\n    &amp;self,\n    f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;,\n    options: ToSciOptions,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts an unsigned number to a string using a specified base, possibly formatting\nthe number using scientific notation.</p>\n<p>See [<code>ToSciOptions</code>] for details on the available options. Note that setting\n<code>neg_exp_threshold</code> has no effect, since there is never a need to use negative\nexponents when representing an integer.</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>options.rounding_mode</code> is <code>Exact</code>, but the size options are such that the\ninput must be rounded.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::to_sci\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sci_with_options\" class=\"method trait-impl\"><a href=\"#method.to_sci_with_options\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sci_with_options</a>(&amp;self, options: ToSciOptions) -&gt; SciWrapper&lt;'_, Self&gt;</h4></section></summary><div class='docblock'>Converts a number to a string, possibly in scientific notation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_sci\" class=\"method trait-impl\"><a href=\"#method.to_sci\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_sci</a>(&amp;self) -&gt; SciWrapper&lt;'_, Self&gt;</h4></section></summary><div class='docblock'>Converts a number to a string, possibly in scientific notation, using the default\n[<code>ToSciOptions</code>].</div></details></div></details>","ToSci","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToStringBase-for-u16\" class=\"impl\"><a href=\"#impl-ToStringBase-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ToStringBase for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string_base\" class=\"method trait-impl\"><a href=\"#method.to_string_base\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_string_base</a>(&amp;self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts an unsigned number to a string using a specified base.</p>\n<p>Digits from 0 to 9 become <code>char</code>s from ‘0’ to ‘9’. Digits from 10 to 35 become the\nlowercase <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s ‘a’ to ‘z’.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>self.significant_bits()</code>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than 36.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::to_string#to_string_base\">here</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string_base_upper\" class=\"method trait-impl\"><a href=\"#method.to_string_base_upper\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_string_base_upper</a>(&amp;self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>Converts an unsigned number to a string using a specified base.</p>\n<p>Digits from 0 to 9 become <code>char</code>s from ‘0’ to ‘9’. Digits from 10 to 35 become the\nuppercase <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>s ‘A’ to ‘Z’.</p>\n<h5 id=\"worst-case-complexity-1\"><a class=\"doc-anchor\" href=\"#worst-case-complexity-1\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>self.significant_bits()</code>.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>base</code> is less than 2 or greater than 36.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>See <a href=\"super::to_string#to_string_base_upper\">here</a>.</p>\n</div></details></div></details>","ToStringBase","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToUsize-for-u16\" class=\"impl\"><a href=\"#impl-ToUsize-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ToUsize for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_usize\" class=\"method trait-impl\"><a href=\"#method.to_usize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_usize</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>converts self to usize</div></details></div></details>","ToUsize","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TrailingZeros-for-u16\" class=\"impl\"><a href=\"#impl-TrailingZeros-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl TrailingZeros for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method trait-impl\"><a href=\"#method.trailing_zeros\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>trailing_zeros</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.trailing_zeros\" title=\"method u32::trailing_zeros\">this one</a>.</p>\n</div></details></div></details>","TrailingZeros","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TrieValue-for-u16\" class=\"impl\"><a href=\"#impl-TrieValue-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl TrieValue for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.TryFromU32Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.TryFromU32Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">TryFromU32Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.TryFromIntError.html\" title=\"struct core::num::error::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>Last-resort fallback value to return if we cannot read data from the trie. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_u32\" class=\"method trait-impl\"><a href=\"#method.try_from_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_from_u32</a>(i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as TrieValue&gt;::TryFromU32Error&gt;</h4></section></summary><div class='docblock'>A parsing function that is primarily motivated by deserialization contexts.\nWhen the serialization type width is smaller than 32 bits, then it is expected\nthat the call site will widen the value to a <code>u32</code> first.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_u32\" class=\"method trait-impl\"><a href=\"#method.to_u32\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_u32</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>A method for converting back to a <code>u32</code> that can roundtrip through\n[<code>Self::try_from_u32()</code>]. The default implementation of this trait\nmethod panics in debug mode and returns 0 in release mode. <a>Read more</a></div></details></div></details>","TrieValue","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26BigInt%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#130\">Source</a><a href=\"#impl-TryFrom%3C%26BigInt%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#130\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#130\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>&gt;&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&BigInt>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26BigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#417\">Source</a><a href=\"#impl-TryFrom%3C%26BigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#417\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#417\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: &amp;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>&gt;&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26Integer%3E-for-u16\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26Integer%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a Integer&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: &amp;Integer,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a Integer&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts an [<code>Integer</code>] to an unsigned primitive integer, returning an error if the\n[<code>Integer</code>] cannot be represented.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primitive_int_from_integer#try_from\">here</a>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = UnsignedFromIntegerError</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<&'a Integer>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26Natural%3E-for-u16\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26Natural%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a Natural&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: &amp;Natural,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;'a Natural&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a [<code>Natural</code>] to a value of an unsigned primitive integer type that’s\nsmaller than a <a href=\"crate#limbs\"><code>Limb</code></a>, returning an error if the [<code>Natural</code>] is too\nlarge.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primitive_int_from_natural#try_from\">here</a>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = UnsignedFromNaturalError</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<&'a Natural>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3C%26Uint%3CBITS,+LIMBS%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-TryFrom%3C%26Uint%3CBITS,+LIMBS%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const BITS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const LIMBS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;Uint&lt;BITS, LIMBS&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = FromUintError&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: &amp;Uint&lt;BITS, LIMBS&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;&amp;Uint&lt;BITS, LIMBS&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<&Uint<BITS, LIMBS>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CAnyRef%3C'_%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-TryFrom%3CAnyRef%3C'_%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;AnyRef&lt;'_&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = Error</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(any: AnyRef&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, Error&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<AnyRef<'_>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CBigInt%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#130\">Source</a><a href=\"#impl-TryFrom%3CBigInt%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#130\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/bigint/convert.rs.html#130\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/bigint/struct.BigInt.html\" title=\"struct num_bigint::bigint::BigInt\">BigInt</a>&gt;&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<BigInt>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CBigUint%3E-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#417\">Source</a><a href=\"#impl-TryFrom%3CBigUint%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#417\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-bigint/0.4/src/num_bigint/biguint/convert.rs.html#417\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(value: <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/struct.TryFromBigIntError.html\" title=\"struct num_bigint::TryFromBigIntError\">TryFromBigIntError</a>&lt;<a class=\"struct\" href=\"https://docs.rs/num-bigint/0.4/num_bigint/biguint/struct.BigUint.html\" title=\"struct num_bigint::biguint::BigUint\">BigUint</a>&gt;&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<BigUint>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNiceFloat%3Cf32%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-TryFrom%3CNiceFloat%3Cf32%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;NiceFloat&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: NiceFloat&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;NiceFloat&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f32.html\">f32</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a value of a floating point type to a value of an unsigned type,\nreturning an error if an exact conversion is not possible.</p>\n<p>The conversion succeeds if the floating point value is an integer, not\nnegative (negative zero is ok), and not too large.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#try_from\">here</a>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = UnsignedFromFloatError</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NiceFloat<f32>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CNiceFloat%3Cf64%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-TryFrom%3CNiceFloat%3Cf64%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;NiceFloat&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: NiceFloat&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;NiceFloat&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.f64.html\">f64</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a value of a floating point type to a value of an unsigned type,\nreturning an error if an exact conversion is not possible.</p>\n<p>The conversion succeeds if the floating point value is an integer, not\nnegative (negative zero is ok), and not too large.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#try_from\">here</a>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = UnsignedFromFloatError</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<NiceFloat<f64>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CSigned%3CBITS,+LIMBS%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-TryFrom%3CSigned%3CBITS,+LIMBS%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const BITS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const LIMBS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;Signed&lt;BITS, LIMBS&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = BigIntConversionError</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: Signed&lt;BITS, LIMBS&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;Signed&lt;BITS, LIMBS&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Signed<BITS, LIMBS>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CUint%3CBITS,+LIMBS%3E%3E-for-u16\" class=\"impl\"><a href=\"#impl-TryFrom%3CUint%3CBITS,+LIMBS%3E%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const BITS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>, const LIMBS: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;Uint&lt;BITS, LIMBS&gt;&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = FromUintError&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    value: Uint&lt;BITS, LIMBS&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;Uint&lt;BITS, LIMBS&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Uint<BITS, LIMBS>>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cchar%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/char/convert.rs.html#126\">Source</a></span><a href=\"#impl-TryFrom%3Cchar%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.char.html\">char</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3><div class=\"docblock\"><p>Maps a <code>char</code> with code point in U+0000..=U+FFFF to a <code>u16</code> in 0x0000..=0xFFFF with same value,\nfailing if the code point is greater than U+FFFF.</p>\n</div></section></summary><div class=\"docblock\"><p>This corresponds to the UCS-2 encoding, as specified in ISO/IEC 10646:2003.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/char/convert.rs.html#140\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.char.html\">char</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to convert a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\" title=\"primitive u16\"><code>u16</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>trans_rights = <span class=\"string\">'⚧'</span>; <span class=\"comment\">// U+26A7\n</span><span class=\"kw\">let </span>ninjas = <span class=\"string\">'🥷'</span>; <span class=\"comment\">// U+1F977\n</span><span class=\"macro\">assert_eq!</span>(u16::try_from(trans_rights), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">0x26A7_u16</span>));\n<span class=\"macro\">assert!</span>(u16::try_from(ninjas).is_err());</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/char/convert.rs.html#127\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/char/struct.TryFromCharError.html\" title=\"struct core::char::TryFromCharError\">TryFromCharError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<char>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#323\">Source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#323\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#323\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.TryFromIntError.html\" title=\"struct core::num::error::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci16%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#318\">Source</a></span><a href=\"#impl-TryFrom%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#318\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#318\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.TryFromIntError.html\" title=\"struct core::num::error::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#319\">Source</a></span><a href=\"#impl-TryFrom%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#319\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#319\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.TryFromIntError.html\" title=\"struct core::num::error::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#321\">Source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#321\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#321\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.TryFromIntError.html\" title=\"struct core::num::error::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci8%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#316\">Source</a></span><a href=\"#impl-TryFrom%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#316\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#316\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.TryFromIntError.html\" title=\"struct core::num::error::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#386\">Source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#386\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#386\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.TryFromIntError.html\" title=\"struct core::num::error::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#300\">Source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#300\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#300\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.TryFromIntError.html\" title=\"struct core::num::error::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu32%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#298\">Source</a></span><a href=\"#impl-TryFrom%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#298\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#298\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.TryFromIntError.html\" title=\"struct core::num::error::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#299\">Source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#299\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#299\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.TryFromIntError.html\" title=\"struct core::num::error::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#381\">Source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#381\">Source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Tries to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/convert/num.rs.html#381\">Source</a><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.85.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.TryFromIntError.html\" title=\"struct core::num::error::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFromBytes-for-u16\" class=\"impl\"><a href=\"#impl-TryFromBytes-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl TryFromBytes for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_bytes\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_bytes</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the given <code>source</code> as a <code>&amp;Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_prefix\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_prefix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;Self, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the prefix of the given <code>source</code> as a <code>&amp;Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_suffix\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_suffix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], &amp;Self), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the suffix of the given <code>source</code> as a <code>&amp;Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_bytes\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_bytes</a>(\n    bytes: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the given <code>source</code> as a <code>&amp;mut Self</code> without\ncopying. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_prefix\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_prefix</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut Self, &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the prefix of the given <code>source</code> as a <code>&amp;mut Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_suffix\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_suffix</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], &amp;mut Self), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the suffix of the given <code>source</code> as a <code>&amp;mut Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_bytes_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_bytes_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_bytes_with_elems</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;Self, ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the given <code>source</code> as a <code>&amp;Self</code> with a DST length\nequal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_prefix_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_prefix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_prefix_with_elems</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;Self, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the prefix of the given <code>source</code> as a <code>&amp;Self</code> with\na DST length equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_ref_from_suffix_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_ref_from_suffix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_ref_from_suffix_with_elems</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], &amp;Self), ConvertError&lt;AlignmentError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; + Immutable,</div></h4></section></summary><div class='docblock'>Attempts to interpret the suffix of the given <code>source</code> as a <code>&amp;Self</code> with\na DST length equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_bytes_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_bytes_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_bytes_with_elems</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the given <code>source</code> as a <code>&amp;mut Self</code> with a DST\nlength equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_prefix_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_prefix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_prefix_with_elems</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut Self, &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the prefix of the given <code>source</code> as a <code>&amp;mut Self</code>\nwith a DST length equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_mut_from_suffix_with_elems\" class=\"method trait-impl\"><a href=\"#method.try_mut_from_suffix_with_elems\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_mut_from_suffix_with_elems</a>(\n    source: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], &amp;mut Self), ConvertError&lt;AlignmentError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, SizeError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: KnownLayout&lt;PointerMetadata = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; + IntoBytes,</div></h4></section></summary><div class='docblock'>Attempts to interpret the suffix of the given <code>source</code> as a <code>&amp;mut Self</code>\nwith a DST length equal to <code>count</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_read_from_bytes\" class=\"method trait-impl\"><a href=\"#method.try_read_from_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_read_from_bytes</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, ConvertError&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Attempts to read the given <code>source</code> as a <code>Self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_read_from_prefix\" class=\"method trait-impl\"><a href=\"#method.try_read_from_prefix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_read_from_prefix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(Self, &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]), ConvertError&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Attempts to read a <code>Self</code> from the prefix of the given <code>source</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_read_from_suffix\" class=\"method trait-impl\"><a href=\"#method.try_read_from_suffix\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">try_read_from_suffix</a>(\n    source: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>],\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self), ConvertError&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/convert/enum.Infallible.html\" title=\"enum core::convert::Infallible\">Infallible</a>, SizeError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;, ValidityError&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>], Self&gt;&gt;&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Attempts to read a <code>Self</code> from the suffix of the given <code>source</code>. <a>Read more</a></div></details></div></details>","TryFromBytes","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Two-for-u16\" class=\"impl\"><a href=\"#impl-Two-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Two for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3><div class=\"docblock\"><p>The constant 2.</p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<p>See <a href=\"self\">here</a>.</p>\n</div><div class=\"impl-items\"><section id=\"associatedconstant.TWO\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.TWO\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">TWO</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 2u16</h4></section></div></details>","Two","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Unsigned-for-u16\" class=\"impl\"><a href=\"#impl-Unsigned-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Unsigned for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two\" class=\"method trait-impl\"><a href=\"#method.is_power_of_two\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_power_of_two\" class=\"method trait-impl\"><a href=\"#method.next_power_of_two\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns the smallest power of two greater than or equal to <code>self</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two\" class=\"method trait-impl\"><a href=\"#method.checked_next_power_of_two\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Returns the smallest power of two greater than or equal to <code>n</code>. If the\nnext power of two is greater than the type’s maximum value, <code>None</code> is\nreturned, otherwise the power of two is wrapped in <code>Some</code>.</div></details></div></details>","Unsigned","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#527-530\">Source</a></span><a href=\"#impl-UpperExp-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.UpperExp.html\" title=\"trait core::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#527-530\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.UpperExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.UpperExp.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperExp","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#169\">Source</a></span><a href=\"#impl-UpperHex-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/fmt/num.rs.html#169\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.UpperHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperHex","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Valid-for-u16\" class=\"impl\"><a href=\"#impl-Valid-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Valid for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.check\" class=\"method trait-impl\"><a href=\"#method.check\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">check</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, SerializationError&gt;</h4></section><section id=\"method.batch_check\" class=\"method trait-impl\"><a href=\"#method.batch_check\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">batch_check</a>&lt;'a&gt;(\n    _batch: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, SerializationError&gt;<div class=\"where\">where\n    <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>: 'a,</div></h4></section></div></details>","Valid","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Value-for-u16\" class=\"impl\"><a href=\"#impl-Value-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Value for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.record\" class=\"method trait-impl\"><a href=\"#method.record\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">record</a>(&amp;self, key: &amp;Field, visitor: &amp;mut dyn Visit)</h4></section></summary><div class='docblock'>Visits this value with the given <code>Visitor</code>.</div></details></div></details>","Value","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueOrd-for-u16\" class=\"impl\"><a href=\"#impl-ValueOrd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ValueOrd for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_cmp\" class=\"method trait-impl\"><a href=\"#method.value_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>, Error&gt;</h4></section></summary><div class='docblock'>Return an <a href=\"https://doc.rust-lang.org/1.85.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between value portion of TLV-encoded <code>self</code> and\n<code>other</code> when serialized as ASN.1 DER.</div></details></div></details>","ValueOrd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ValueParserFactory-for-u16\" class=\"impl\"><a href=\"#impl-ValueParserFactory-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl ValueParserFactory for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Parser\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Parser\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Parser</a> = RangedI64ValueParser&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>Generated parser, usually [<code>ValueParser</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_parser\" class=\"method trait-impl\"><a href=\"#method.value_parser\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">value_parser</a>() -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as ValueParserFactory&gt;::Parser</h4></section></summary><div class='docblock'>Create the specified [<code>Self::Parser</code>]</div></details></div></details>","ValueParserFactory","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecFromOtherType%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-VecFromOtherType%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl VecFromOtherType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_from_other_type\" class=\"method trait-impl\"><a href=\"#method.vec_from_other_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">vec_from_other_type</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a value of one type of unsigned integer to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of a smaller unsigned\ntype.</p>\n<p>The input value will be broken up into several values in the output <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>.</p>\n<p>$f(x) = (y_k)<em>{k=0}^{m-1}$, where $x = \\sum</em>{j=0}^{m-1}2^{jW}y_j$ and $m =\n2^{V-W}n$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#vec_from_other_type\">here</a>.</p>\n</div></details></div></details>","VecFromOtherType<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecFromOtherType%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-VecFromOtherType%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl VecFromOtherType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_from_other_type\" class=\"method trait-impl\"><a href=\"#method.vec_from_other_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">vec_from_other_type</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a value of one type to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of the same type.</p>\n<p>In this case, it just creates a one-element <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#vec_from_other_type\">here</a>.</p>\n</div></details></div></details>","VecFromOtherType<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecFromOtherType%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-VecFromOtherType%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl VecFromOtherType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_from_other_type\" class=\"method trait-impl\"><a href=\"#method.vec_from_other_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">vec_from_other_type</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a value of one type of unsigned integer to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of a smaller unsigned\ntype.</p>\n<p>The input value will be broken up into several values in the output <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>.</p>\n<p>$f(x) = (y_k)<em>{k=0}^{m-1}$, where $x = \\sum</em>{j=0}^{m-1}2^{jW}y_j$ and $m =\n2^{V-W}n$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#vec_from_other_type\">here</a>.</p>\n</div></details></div></details>","VecFromOtherType<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecFromOtherType%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-VecFromOtherType%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl VecFromOtherType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_from_other_type\" class=\"method trait-impl\"><a href=\"#method.vec_from_other_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">vec_from_other_type</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a value of one type of unsigned integer to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of a smaller unsigned\ntype.</p>\n<p>The input value will be broken up into several values in the output <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>.</p>\n<p>$f(x) = (y_k)<em>{k=0}^{m-1}$, where $x = \\sum</em>{j=0}^{m-1}2^{jW}y_j$ and $m =\n2^{V-W}n$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#vec_from_other_type\">here</a>.</p>\n</div></details></div></details>","VecFromOtherType<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecFromOtherType%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-VecFromOtherType%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl VecFromOtherType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_from_other_type\" class=\"method trait-impl\"><a href=\"#method.vec_from_other_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">vec_from_other_type</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a value of one type of unsigned integer to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of a larger unsigned\ntype.</p>\n<p>The output <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> only contains one value. The least-significant bits of the output\nvalue contain the input value, and the most-significant bits are set to 0.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#vec_from_other_type\">here</a>.</p>\n</div></details></div></details>","VecFromOtherType<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecFromOtherType%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-VecFromOtherType%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl VecFromOtherType&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_from_other_type\" class=\"method trait-impl\"><a href=\"#method.vec_from_other_type\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">vec_from_other_type</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a value of one type of unsigned integer to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of a smaller unsigned\ntype.</p>\n<p>The input value will be broken up into several values in the output <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>.</p>\n<p>$f(x) = (y_k)<em>{k=0}^{m-1}$, where $x = \\sum</em>{j=0}^{m-1}2^{jW}y_j$ and $m =\n2^{V-W}n$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#vec_from_other_type\">here</a>.</p>\n</div></details></div></details>","VecFromOtherType<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecFromOtherTypeSlice%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-VecFromOtherTypeSlice%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl VecFromOtherTypeSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_from_other_type_slice\" class=\"method trait-impl\"><a href=\"#method.vec_from_other_type_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">vec_from_other_type_slice</a>(xs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a slice of one type of unsigned integer to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of a smaller unsigned\ntype.</p>\n<p>Each value of the input slice will be broken up into several values in the output\n<a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>.</p>\n<p>Let $V$ be the the width of the input type and $W$ the width of the output type.</p>\n<p>$f((x_k)_ {k=0}^{n-1}) = (y_k)_ {k=0}^{m-1}$, where</p>\n<p>$$\n\\sum_{j=0}^{n-1}2^{jV}x_j = \\sum_{j=0}^{m-1}2^{jW}y_j,\n$$</p>\n<p>$y_j &lt; 2^W$ for all $j$, and $m = 2^{V-W}n$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>xs.len()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#vec_from_other_type_slice\">here</a>.</p>\n</div></details></div></details>","VecFromOtherTypeSlice<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecFromOtherTypeSlice%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-VecFromOtherTypeSlice%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl VecFromOtherTypeSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_from_other_type_slice\" class=\"method trait-impl\"><a href=\"#method.vec_from_other_type_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">vec_from_other_type_slice</a>(xs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a slice of one type of value to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of the same type.</p>\n<p>In this case, it just converts the slice to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> the usual way.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>xs.len()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#vec_from_other_type_slice\">here</a>.</p>\n</div></details></div></details>","VecFromOtherTypeSlice<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecFromOtherTypeSlice%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-VecFromOtherTypeSlice%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl VecFromOtherTypeSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_from_other_type_slice\" class=\"method trait-impl\"><a href=\"#method.vec_from_other_type_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">vec_from_other_type_slice</a>(xs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a slice of one type of unsigned integer to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of a smaller unsigned\ntype.</p>\n<p>Each value of the input slice will be broken up into several values in the output\n<a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>.</p>\n<p>Let $V$ be the the width of the input type and $W$ the width of the output type.</p>\n<p>$f((x_k)_ {k=0}^{n-1}) = (y_k)_ {k=0}^{m-1}$, where</p>\n<p>$$\n\\sum_{j=0}^{n-1}2^{jV}x_j = \\sum_{j=0}^{m-1}2^{jW}y_j,\n$$</p>\n<p>$y_j &lt; 2^W$ for all $j$, and $m = 2^{V-W}n$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>xs.len()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#vec_from_other_type_slice\">here</a>.</p>\n</div></details></div></details>","VecFromOtherTypeSlice<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecFromOtherTypeSlice%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-VecFromOtherTypeSlice%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl VecFromOtherTypeSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_from_other_type_slice\" class=\"method trait-impl\"><a href=\"#method.vec_from_other_type_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">vec_from_other_type_slice</a>(xs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a slice of one type of unsigned integer to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of a smaller unsigned\ntype.</p>\n<p>Each value of the input slice will be broken up into several values in the output\n<a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>.</p>\n<p>Let $V$ be the the width of the input type and $W$ the width of the output type.</p>\n<p>$f((x_k)_ {k=0}^{n-1}) = (y_k)_ {k=0}^{m-1}$, where</p>\n<p>$$\n\\sum_{j=0}^{n-1}2^{jV}x_j = \\sum_{j=0}^{m-1}2^{jW}y_j,\n$$</p>\n<p>$y_j &lt; 2^W$ for all $j$, and $m = 2^{V-W}n$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>xs.len()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#vec_from_other_type_slice\">here</a>.</p>\n</div></details></div></details>","VecFromOtherTypeSlice<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecFromOtherTypeSlice%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-VecFromOtherTypeSlice%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl VecFromOtherTypeSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_from_other_type_slice\" class=\"method trait-impl\"><a href=\"#method.vec_from_other_type_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">vec_from_other_type_slice</a>(xs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a slice of one type of unsigned integer to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of a larger unsigned\ntype.</p>\n<p>Adjacent chunks of values in the input slice will be joined into values of the\noutput <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>. If the last few elements of the input slice don’t make up a full\nchunk, the most-significant bits of the last output value are set to 0.</p>\n<p>Let $V$ be the the width of the input type and $W$ the width of the output type.</p>\n<p>$f((x_k)_ {k=0}^{n-1}) = (y_k)_ {k=0}^{m-1}$, where</p>\n<p>$$\n\\sum_{j=0}^{n-1}2^{jV}x_j = \\sum_{j=0}^{m-1}2^{jW}y_j,\n$$</p>\n<p>$y_j &lt; 2^W$ for all $j$, and $m = \\lceil n / 2^{W-V} \\rceil$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>xs.len()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#vec_from_other_type_slice\">here</a>.</p>\n</div></details></div></details>","VecFromOtherTypeSlice<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VecFromOtherTypeSlice%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-VecFromOtherTypeSlice%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl VecFromOtherTypeSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_from_other_type_slice\" class=\"method trait-impl\"><a href=\"#method.vec_from_other_type_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">vec_from_other_type_slice</a>(xs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>]) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a slice of one type of unsigned integer to a <a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a> of a smaller unsigned\ntype.</p>\n<p>Each value of the input slice will be broken up into several values in the output\n<a href=\"https://doc.rust-lang.org/1.85.1/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\"><code>Vec</code></a>.</p>\n<p>Let $V$ be the the width of the input type and $W$ the width of the output type.</p>\n<p>$f((x_k)_ {k=0}^{n-1}) = (y_k)_ {k=0}^{m-1}$, where</p>\n<p>$$\n\\sum_{j=0}^{n-1}2^{jV}x_j = \\sum_{j=0}^{m-1}2^{jW}y_j,\n$$</p>\n<p>$y_j &lt; 2^W$ for all $j$, and $m = 2^{V-W}n$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>$T(n) = O(n)$</p>\n<p>$M(n) = O(n)$</p>\n<p>where $T$ is time, $M$ is additional memory, and $n$ is <code>xs.len()</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::slice#vec_from_other_type_slice\">here</a>.</p>\n</div></details></div></details>","VecFromOtherTypeSlice<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VectorFromWasmAbi-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/slices.rs.html#232-234\">Source</a><a href=\"#impl-VectorFromWasmAbi-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.VectorFromWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::VectorFromWasmAbi\">VectorFromWasmAbi</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Abi\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/slices.rs.html#232-234\">Source</a><a href=\"#associatedtype.Abi\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.VectorFromWasmAbi.html#associatedtype.Abi\" class=\"associatedtype\">Abi</a> = <a class=\"struct\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/slices/struct.WasmSlice.html\" title=\"struct wasm_bindgen::convert::slices::WasmSlice\">WasmSlice</a></h4></section><section id=\"method.vector_from_abi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/slices.rs.html#232-234\">Source</a><a href=\"#method.vector_from_abi\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.VectorFromWasmAbi.html#tymethod.vector_from_abi\" class=\"fn\">vector_from_abi</a>(js: <a class=\"struct\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/slices/struct.WasmSlice.html\" title=\"struct wasm_bindgen::convert::slices::WasmSlice\">WasmSlice</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>]&gt;</h4></section></div></details>","VectorFromWasmAbi","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VectorIntoWasmAbi-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/slices.rs.html#232-234\">Source</a><a href=\"#impl-VectorIntoWasmAbi-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.VectorIntoWasmAbi.html\" title=\"trait wasm_bindgen::convert::traits::VectorIntoWasmAbi\">VectorIntoWasmAbi</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Abi\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/slices.rs.html#232-234\">Source</a><a href=\"#associatedtype.Abi\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.VectorIntoWasmAbi.html#associatedtype.Abi\" class=\"associatedtype\">Abi</a> = <a class=\"struct\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/slices/struct.WasmSlice.html\" title=\"struct wasm_bindgen::convert::slices::WasmSlice\">WasmSlice</a></h4></section><section id=\"method.vector_into_abi\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/wasm-bindgen/0.2/src/wasm_bindgen/convert/slices.rs.html#232-234\">Source</a><a href=\"#method.vector_into_abi\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/traits/trait.VectorIntoWasmAbi.html#tymethod.vector_into_abi\" class=\"fn\">vector_into_abi</a>(vector: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>]&gt;) -&gt; <a class=\"struct\" href=\"https://docs.rs/wasm-bindgen/0.2/wasm_bindgen/convert/slices/struct.WasmSlice.html\" title=\"struct wasm_bindgen::convert::slices::WasmSlice\">WasmSlice</a></h4></section></div></details>","VectorIntoWasmAbi","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Weight-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://rust-random.github.io/rand/src/rand/distr/weighted/mod.rs.html#60\">Source</a><a href=\"#impl-Weight-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand/distr/weighted/trait.Weight.html\" title=\"trait rand::distr::weighted::Weight\">Weight</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.ZERO\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"https://rust-random.github.io/rand/src/rand/distr/weighted/mod.rs.html#60\">Source</a><a href=\"#associatedconstant.ZERO\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"https://rust-random.github.io/rand/rand/distr/weighted/trait.Weight.html#associatedconstant.ZERO\" class=\"constant\">ZERO</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 0u16</h4></section></summary><div class='docblock'>Representation of 0</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://rust-random.github.io/rand/src/rand/distr/weighted/mod.rs.html#60\">Source</a><a href=\"#method.checked_add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://rust-random.github.io/rand/rand/distr/weighted/trait.Weight.html#tymethod.checked_add_assign\" class=\"fn\">checked_add_assign</a>(&amp;mut self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Checked addition <a href=\"https://rust-random.github.io/rand/rand/distr/weighted/trait.Weight.html#tymethod.checked_add_assign\">Read more</a></div></details></div></details>","Weight","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingAdd-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#31\">Source</a><a href=\"#impl-WrappingAdd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingAdd.html\" title=\"trait num_traits::ops::wrapping::WrappingAdd\">WrappingAdd</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#31\">Source</a><a href=\"#method.wrapping_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingAdd.html#tymethod.wrapping_add\" class=\"fn\">wrapping_add</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping (modular) addition. Computes <code>self + other</code>, wrapping around at the boundary of\nthe type.</div></details></div></details>","WrappingAdd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingAdd-for-u16\" class=\"impl\"><a href=\"#impl-WrappingAdd-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingAdd for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add\" class=\"method trait-impl\"><a href=\"#method.wrapping_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_add</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>wrapping_add</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.wrapping_add\" title=\"method u32::wrapping_add\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","WrappingAdd","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingAddAssign-for-u16\" class=\"impl\"><a href=\"#impl-WrappingAddAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingAddAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_assign\" class=\"method trait-impl\"><a href=\"#method.wrapping_add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Adds a number to another number in place, wrapping around at the boundary of the\ntype.</p>\n<p>$x \\gets z$, where $z \\equiv x + y \\mod 2^W$ and $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::wrapping_add#wrapping_add_assign\">here</a>.</p>\n</div></details></div></details>","WrappingAddAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingAddMul-for-u16\" class=\"impl\"><a href=\"#impl-WrappingAddMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingAddMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_mul\" class=\"method trait-impl\"><a href=\"#method.wrapping_add_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_add_mul</a>(self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Adds a number and the product of two other numbers, wrapping around at the boundary\nof the type.</p>\n<p>$f(x, y, z) = w$, where $w \\equiv x + yz \\mod 2^W$ and $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::wrapping_add_mul#wrapping_add_mul\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","WrappingAddMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingAddMulAssign-for-u16\" class=\"impl\"><a href=\"#impl-WrappingAddMulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingAddMulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_mul_assign\" class=\"method trait-impl\"><a href=\"#method.wrapping_add_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_add_mul_assign</a>(&amp;mut self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Adds a number and the product of two other numbers in place, wrapping around at the\nboundary of the type.</p>\n<p>$x \\gets w$, where $w \\equiv x + yz \\mod 2^W$ and $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::wrapping_add_mul#wrapping_add_mul_assign\">here</a>.</p>\n</div></details></div></details>","WrappingAddMulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingDiv-for-u16\" class=\"impl\"><a href=\"#impl-WrappingDiv-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingDiv for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div\" class=\"method trait-impl\"><a href=\"#method.wrapping_div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_div</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>wrapping_div</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.wrapping_div\" title=\"method u32::wrapping_div\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","WrappingDiv","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingDivAssign-for-u16\" class=\"impl\"><a href=\"#impl-WrappingDivAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingDivAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_assign\" class=\"method trait-impl\"><a href=\"#method.wrapping_div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Divides a number by another number in place, wrapping around at the boundary of the\ntype.</p>\n<p>Wrapping only occurs when <code>Self</code> is signed, <code>self</code> is <code>Self::MIN</code>, and <code>other</code> is\n-1. The “actual” result, <code>-Self::MIN</code>, can’t be represented and is wrapped back to\n<code>Self::MIN</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::wrapping_div#wrapping_div_assign\">here</a>.</p>\n</div></details></div></details>","WrappingDivAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3C%26Integer%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3C%26Integer%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; WrappingFrom&lt;&amp;'a Integer&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: &amp;Integer) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts an [<code>Integer</code>] to an unsigned primitive integer, wrapping modulo $2^W$,\nwhere $W$ is the width of the primitive integer.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primitive_int_from_integer#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<&'a Integer>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3C%26Natural%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3C%26Natural%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; WrappingFrom&lt;&amp;'a Natural&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: &amp;Natural) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a [<code>Natural</code>] to a value of an unsigned primitive integer type that’s\nsmaller than a <a href=\"crate#limbs\"><code>Limb</code></a>, wrapping modulo $2^W$, where $W$ is the width\nof a limb.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::primitive_int_from_natural#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<&'a Natural>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3Ci128%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3Ci128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = m$, where $m &lt; 2^W$ and $n + 2^W k =\nm$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = m$, where $-2^{W-1} \\leq m &lt; 2^{W-1}$\nand $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<i128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3Ci16%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3Ci16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = m$, where $m &lt; 2^W$ and $n + 2^W k =\nm$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = m$, where $-2^{W-1} \\leq m &lt; 2^{W-1}$\nand $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<i16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3Ci32%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3Ci32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = m$, where $m &lt; 2^W$ and $n + 2^W k =\nm$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = m$, where $-2^{W-1} \\leq m &lt; 2^{W-1}$\nand $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<i32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3Ci64%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3Ci64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = m$, where $m &lt; 2^W$ and $n + 2^W k =\nm$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = m$, where $-2^{W-1} \\leq m &lt; 2^{W-1}$\nand $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<i64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3Ci8%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3Ci8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = m$, where $m &lt; 2^W$ and $n + 2^W k =\nm$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = m$, where $-2^{W-1} \\leq m &lt; 2^{W-1}$\nand $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<i8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3Cisize%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3Cisize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = m$, where $m &lt; 2^W$ and $n + 2^W k =\nm$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = m$, where $-2^{W-1} \\leq m &lt; 2^{W-1}$\nand $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<isize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3Cu128%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3Cu128%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = m$, where $m &lt; 2^W$ and $n + 2^W k =\nm$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = m$, where $-2^{W-1} \\leq m &lt; 2^{W-1}$\nand $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<u128>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3Cu16%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3Cu16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to its own type. This conversion is always valid and always leaves\nthe value unchanged.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3Cu32%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3Cu32%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = m$, where $m &lt; 2^W$ and $n + 2^W k =\nm$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = m$, where $-2^{W-1} \\leq m &lt; 2^{W-1}$\nand $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<u32>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = m$, where $m &lt; 2^W$ and $n + 2^W k =\nm$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = m$, where $-2^{W-1} \\leq m &lt; 2^{W-1}$\nand $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3Cu8%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3Cu8%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. This conversion is always valid and always leaves\nthe value unchanged.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<u8>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingFrom%3Cusize%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingFrom%3Cusize%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingFrom&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_from\" class=\"method trait-impl\"><a href=\"#method.wrapping_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_from</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts a value to another type. If the value cannot be represented in the new\ntype, it is wrapped.</p>\n<p>Let $W$ be the width of the target type.</p>\n<p>If the target type is unsigned, then $f_W(n) = m$, where $m &lt; 2^W$ and $n + 2^W k =\nm$ for some $k \\in \\Z$.</p>\n<p>If the target type is signed, then $f_W(n) = m$, where $-2^{W-1} \\leq m &lt; 2^{W-1}$\nand $n + 2^W k = m$ for some $k \\in \\Z$.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::from#wrapping_from\">here</a>.</p>\n</div></details></div></details>","WrappingFrom<usize>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingMul-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#73\">Source</a><a href=\"#impl-WrappingMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingMul.html\" title=\"trait num_traits::ops::wrapping::WrappingMul\">WrappingMul</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#73\">Source</a><a href=\"#method.wrapping_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingMul.html#tymethod.wrapping_mul\" class=\"fn\">wrapping_mul</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping (modular) multiplication. Computes <code>self * other</code>, wrapping around at the boundary\nof the type.</div></details></div></details>","WrappingMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingMul-for-u16\" class=\"impl\"><a href=\"#impl-WrappingMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul\" class=\"method trait-impl\"><a href=\"#method.wrapping_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_mul</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>wrapping_mul</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.wrapping_mul\" title=\"method u32::wrapping_mul\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","WrappingMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingMulAssign-for-u16\" class=\"impl\"><a href=\"#impl-WrappingMulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingMulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul_assign\" class=\"method trait-impl\"><a href=\"#method.wrapping_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Adds a number to another number in place, wrapping around at the boundary of the\ntype.</p>\n<p>$x \\gets z$, where $z \\equiv xy \\mod 2^W$ and $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::wrapping_mul#wrapping_mul_assign\">here</a>.</p>\n</div></details></div></details>","WrappingMulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingNeg-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#120\">Source</a><a href=\"#impl-WrappingNeg-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingNeg.html\" title=\"trait num_traits::ops::wrapping::WrappingNeg\">WrappingNeg</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#120\">Source</a><a href=\"#method.wrapping_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingNeg.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping (modular) negation. Computes <code>-self</code>,\nwrapping around at the boundary of the type. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingNeg.html#tymethod.wrapping_neg\">Read more</a></div></details></div></details>","WrappingNeg","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingNeg-for-u16\" class=\"impl\"><a href=\"#impl-WrappingNeg-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingNeg for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method trait-impl\"><a href=\"#method.wrapping_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>wrapping_neg</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.wrapping_neg\" title=\"method u32::wrapping_neg\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","WrappingNeg","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingNegAssign-for-u16\" class=\"impl\"><a href=\"#impl-WrappingNegAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingNegAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg_assign\" class=\"method trait-impl\"><a href=\"#method.wrapping_neg_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_neg_assign</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Negates a number in place, wrapping around at the boundary of the type.</p>\n<p>$x \\gets y$, where $y \\equiv -x \\mod 2^W$ and $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::wrapping_neg#wrapping_neg_assign\">here</a>.</p>\n</div></details></div></details>","WrappingNegAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingPow%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingPow%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingPow&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow\" class=\"method trait-impl\"><a href=\"#method.wrapping_pow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>wrapping_pow</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.wrapping_pow\" title=\"method u32::wrapping_pow\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","WrappingPow<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingPowAssign%3Cu64%3E-for-u16\" class=\"impl\"><a href=\"#impl-WrappingPowAssign%3Cu64%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingPowAssign&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow_assign\" class=\"method trait-impl\"><a href=\"#method.wrapping_pow_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_pow_assign</a>(&amp;mut self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u64.html\">u64</a>)</h4></section></summary><div class=\"docblock\"><p>Raises a number to a power, in place, wrapping around at the boundary of the type.</p>\n<p>$x \\gets y$, where $y \\equiv x^n \\mod 2^W$ and $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::wrapping_pow#wrapping_pow_assign\">here</a>.</p>\n</div></details></div></details>","WrappingPowAssign<u64>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingShl-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#163\">Source</a><a href=\"#impl-WrappingShl-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingShl.html\" title=\"trait num_traits::ops::wrapping::WrappingShl\">WrappingShl</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#163\">Source</a><a href=\"#method.wrapping_shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingShl.html#tymethod.wrapping_shl\" class=\"fn\">wrapping_shl</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high order bits of <code>rhs</code> that would\ncause the shift to exceed the bitwidth of the type. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingShl.html#tymethod.wrapping_shl\">Read more</a></div></details></div></details>","WrappingShl","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingShr-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#196\">Source</a><a href=\"#impl-WrappingShr-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingShr.html\" title=\"trait num_traits::ops::wrapping::WrappingShr\">WrappingShr</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#196\">Source</a><a href=\"#method.wrapping_shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingShr.html#tymethod.wrapping_shr\" class=\"fn\">wrapping_shr</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high order bits of <code>rhs</code> that would\ncause the shift to exceed the bitwidth of the type. <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingShr.html#tymethod.wrapping_shr\">Read more</a></div></details></div></details>","WrappingShr","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingSquare-for-u16\" class=\"impl\"><a href=\"#impl-WrappingSquare-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingSquare for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_square\" class=\"method trait-impl\"><a href=\"#method.wrapping_square\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_square</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Squares a number, wrapping around at the boundary of the type.</p>\n<p>$f(x) = y$, where $y \\equiv x^2 \\mod 2^W$ and $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::wrapping_square#wrapping_square\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","WrappingSquare","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingSquareAssign-for-u16\" class=\"impl\"><a href=\"#impl-WrappingSquareAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingSquareAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_square_assign\" class=\"method trait-impl\"><a href=\"#method.wrapping_square_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_square_assign</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Squares a number in place, wrapping around at the boundary of the type.</p>\n<p>$x \\gets y$, where $y \\equiv x^2 \\mod 2^W$ and $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::wrapping_square#wrapping_square_assign\">here</a>.</p>\n</div></details></div></details>","WrappingSquareAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingSub-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#52\">Source</a><a href=\"#impl-WrappingSub-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingSub.html\" title=\"trait num_traits::ops::wrapping::WrappingSub\">WrappingSub</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/ops/wrapping.rs.html#52\">Source</a><a href=\"#method.wrapping_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/ops/wrapping/trait.WrappingSub.html#tymethod.wrapping_sub\" class=\"fn\">wrapping_sub</a>(&amp;self, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Wrapping (modular) subtraction. Computes <code>self - other</code>, wrapping around at the boundary\nof the type.</div></details></div></details>","WrappingSub","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingSub-for-u16\" class=\"impl\"><a href=\"#impl-WrappingSub-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingSub for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub\" class=\"method trait-impl\"><a href=\"#method.wrapping_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_sub</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>This is a wrapper over the <code>wrapping_sub</code> functions in the standard library, for\nexample <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html#method.wrapping_sub\" title=\"method u32::wrapping_sub\">this one</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","WrappingSub","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingSubAssign-for-u16\" class=\"impl\"><a href=\"#impl-WrappingSubAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingSubAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_assign\" class=\"method trait-impl\"><a href=\"#method.wrapping_sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Subtracts a number by another number in place, wrapping around at the boundary of\nthe type.</p>\n<p>$x \\gets z$, where $z \\equiv x - y \\mod 2^W$ and $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::wrapping_sub#wrapping_sub_assign\">here</a>.</p>\n</div></details></div></details>","WrappingSubAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingSubMul-for-u16\" class=\"impl\"><a href=\"#impl-WrappingSubMul-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingSubMul for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_mul\" class=\"method trait-impl\"><a href=\"#method.wrapping_sub_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_sub_mul</a>(self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Subtracts a number by the product of two other numbers, wrapping around at the\nboundary of the type.</p>\n<p>$f(x, y, z) = w$, where $w \\equiv x - yz \\mod 2^W$ and $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::wrapping_sub_mul#wrapping_sub_mul\">here</a>.</p>\n</div></details><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></div></details>","WrappingSubMul","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WrappingSubMulAssign-for-u16\" class=\"impl\"><a href=\"#impl-WrappingSubMulAssign-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WrappingSubMulAssign for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_mul_assign\" class=\"method trait-impl\"><a href=\"#method.wrapping_sub_mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">wrapping_sub_mul_assign</a>(&amp;mut self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, z: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Subtracts a number by the product of two other numbers in place, wrapping around at\nthe boundary of the type.</p>\n<p>$x \\gets w$, where $w \\equiv x - yz \\mod 2^W$ and $W$ is <code>Self::WIDTH</code>.</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::wrapping_sub_mul#wrapping_sub_mul_assign\">here</a>.</p>\n</div></details></div></details>","WrappingSubMulAssign","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WriteHex-for-u16\" class=\"impl\"><a href=\"#impl-WriteHex-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WriteHex for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_hex\" class=\"method trait-impl\"><a href=\"#method.write_hex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_hex</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Write the value as hex.</div></details></div></details>","WriteHex","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WriteTomlValue-for-u16\" class=\"impl\"><a href=\"#impl-WriteTomlValue-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl WriteTomlValue for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.write_toml_value\" class=\"method trait-impl\"><a href=\"#method.write_toml_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_toml_value</a>&lt;W&gt;(&amp;self, writer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;<div class=\"where\">where\n    W: TomlWrite + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></div></details>","WriteTomlValue","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Writeable-for-u16\" class=\"impl\"><a href=\"#impl-Writeable-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Writeable for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a href=\"#method.write_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_to</a>&lt;W&gt;(&amp;self, sink: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut W</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">Write</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Writes a string to the given sink. Errors from the sink are bubbled up.\nThe default implementation delegates to <code>write_to_parts</code>, and discards any\n<code>Part</code> annotations.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.writeable_length_hint\" class=\"method trait-impl\"><a href=\"#method.writeable_length_hint\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">writeable_length_hint</a>(&amp;self) -&gt; LengthHint</h4></section></summary><div class='docblock'>Returns a hint for the number of UTF-8 bytes that will be written to the sink. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_parts\" class=\"method trait-impl\"><a href=\"#method.write_to_parts\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_to_parts</a>&lt;S&gt;(&amp;self, sink: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.reference.html\">&amp;mut S</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;<div class=\"where\">where\n    S: PartsWrite + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Write bytes and <code>Part</code> annotations to the given sink. Errors from the\nsink are bubbled up. The default implementation delegates to <code>write_to</code>,\nand doesn’t produce any <code>Part</code> annotations.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to_string\" class=\"method trait-impl\"><a href=\"#method.write_to_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write_to_string</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class='docblock'>Creates a new <code>String</code> with the data from this <code>Writeable</code>. Like <code>ToString</code>,\nbut smaller and faster. <a>Read more</a></div></details></div></details>","Writeable","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-XMulYToZZ-for-u16\" class=\"impl\"><a href=\"#impl-XMulYToZZ-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl XMulYToZZ for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.x_mul_y_to_zz\" class=\"method trait-impl\"><a href=\"#method.x_mul_y_to_zz\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">x_mul_y_to_zz</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Multiplies two numbers, returning the product as a pair of <code>Self</code> values.</p>\n<p>The more significant value always comes first.</p>\n<p>$$\nf(x, y) = (z_1, z_0),\n$$\nwhere $W$ is <code>Self::WIDTH</code>,</p>\n<p>$x, y, z_1, z_0 &lt; 2^W$, and\n$$\nxy = 2^Wz_1 + z_0.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::x_mul_y_to_zz#x_mul_y_to_zz\">here</a>.</p>\n<p>This is equivalent to <code>umul_ppmm</code> from <code>longlong.h</code>, GMP 6.2.1, where <code>(w1, w0)</code> is\nreturned.</p>\n</div></details></div></details>","XMulYToZZ","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-XXAddYYToZZ-for-u16\" class=\"impl\"><a href=\"#impl-XXAddYYToZZ-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl XXAddYYToZZ for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.xx_add_yy_to_zz\" class=\"method trait-impl\"><a href=\"#method.xx_add_yy_to_zz\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">xx_add_yy_to_zz</a>(x_1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, x_0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, y_1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, y_0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Adds two numbers, each composed of two <code>Self</code> values, returning the sum as a pair of\n<code>Self</code> values.</p>\n<p>The more significant value always comes first. Addition is wrapping, and overflow is\nnot indicated.</p>\n<p>$$\nf(x_1, x_0, y_1, y_0) = (z_1, z_0),\n$$\nwhere $W$ is <code>Self::WIDTH</code>,</p>\n<p>$x_1, x_0, y_1, y_0, z_1, z_0 &lt; 2^W$, and\n$$\n(2^Wx_1 + x_0) + (2^Wy_1 + y_0) \\equiv 2^Wz_1 + z_0 \\mod 2^{2W}.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::xx_add_yy_to_zz#xx_add_yy_to_zz\">here</a>.</p>\n<p>This is equivalent to <code>add_ssaaaa</code> from <code>longlong.h</code>, GMP 6.2.1, where <code>(sh, sl)</code> is\nreturned.</p>\n</div></details></div></details>","XXAddYYToZZ","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-XXDivModYToQR-for-u16\" class=\"impl\"><a href=\"#impl-XXDivModYToQR-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl XXDivModYToQR for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.xx_div_mod_y_to_qr\" class=\"method trait-impl\"><a href=\"#method.xx_div_mod_y_to_qr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">xx_div_mod_y_to_qr</a>(x_1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, x_0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the quotient and remainder of two numbers. The first is composed of two\n<code>Self</code> values, and the second of a single one.</p>\n<p><code>x_1</code> must be less than <code>y</code>.</p>\n<p>$$\nf(x_1, x_0, y) = (q, r),\n$$\nwhere $W$ is <code>Self::WIDTH</code>,</p>\n<p>$x_1, x_0, y, q, r &lt; 2^W$,</p>\n<p>$x_1, r &lt; y$, and\n$$\nqy + r = 2^Wx_1 + x_0.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::xx_div_mod_y_to_qr#xx_div_mod_y_to_qr\">here</a>.</p>\n<p>This is equivalent to <code>udiv_qrnnd</code> from <code>longlong.h</code>, FLINT 2.7.1, where <code>(q, r)</code> is\nreturned.</p>\n</div></details></div></details>","XXDivModYToQR","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-XXSubYYToZZ-for-u16\" class=\"impl\"><a href=\"#impl-XXSubYYToZZ-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl XXSubYYToZZ for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.xx_sub_yy_to_zz\" class=\"method trait-impl\"><a href=\"#method.xx_sub_yy_to_zz\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">xx_sub_yy_to_zz</a>(x_1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, x_0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, y_1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, y_0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Subtracts two numbers, each composed of two <code>Self</code> values, returning the difference\nas a pair of <code>Self</code> values.</p>\n<p>The more significant value always comes first. Subtraction is wrapping, and overflow\nis not indicated.</p>\n<p>$$\nf(x_1, x_0, y_1, y_0) = (z_1, z_0),\n$$\nwhere $W$ is <code>Self::WIDTH</code>,</p>\n<p>$x_1, x_0, y_1, y_0, z_1, z_0 &lt; 2^W$, and\n$$\n(2^Wx_1 + x_0) - (2^Wy_1 + y_0) \\equiv 2^Wz_1 + z_0 \\mod 2^{2W}.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::xx_sub_yy_to_zz#xx_sub_yy_to_zz\">here</a>.</p>\n<p>This is equivalent to <code>sub_ddmmss</code> from <code>longlong.h</code>, GMP 6.2.1, where <code>(sh, sl)</code> is\nreturned.</p>\n</div></details></div></details>","XXSubYYToZZ","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-XXXAddYYYToZZZ-for-u16\" class=\"impl\"><a href=\"#impl-XXXAddYYYToZZZ-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl XXXAddYYYToZZZ for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.xxx_add_yyy_to_zzz\" class=\"method trait-impl\"><a href=\"#method.xxx_add_yyy_to_zzz\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">xxx_add_yyy_to_zzz</a>(\n    x_2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    x_1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    x_0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    y_2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    y_1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    y_0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Adds two numbers, each composed of three <code>Self</code> values, returning the sum as a\ntriple of <code>Self</code> values.</p>\n<p>The more significant value always comes first. Addition is wrapping, and overflow is\nnot indicated.</p>\n<p>$$\nf(x_2, x_1, x_0, y_2, y_1, y_0) = (z_2, z_1, z_0),\n$$\nwhere $W$ is <code>Self::WIDTH</code>,</p>\n<p>$x_2, x_1, x_0, y_2, y_1, y_0, z_2, z_1, z_0 &lt; 2^W$, and\n$$\n(2^{2W}x_2 + 2^Wx_1 + x_0) + (2^{2W}y_2 + 2^Wy_1 + y_0)\n\\equiv 2^{2W}z_2 + 2^Wz_1 + z_0 \\mod 2^{3W}.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::xxx_add_yyy_to_zzz#xxx_add_yyy_to_zzz\">here</a>.</p>\n<p>This is equivalent to <code>add_sssaaaaaa</code> from <code>longlong.h</code>, FLINT 2.7.1, where <code>(sh, sm, sl)</code> is returned.</p>\n</div></details></div></details>","XXXAddYYYToZZZ","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-XXXSubYYYToZZZ-for-u16\" class=\"impl\"><a href=\"#impl-XXXSubYYYToZZZ-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl XXXSubYYYToZZZ for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.xxx_sub_yyy_to_zzz\" class=\"method trait-impl\"><a href=\"#method.xxx_sub_yyy_to_zzz\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">xxx_sub_yyy_to_zzz</a>(\n    x_2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    x_1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    x_0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    y_2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    y_1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    y_0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Subtracts two numbers, each composed of three <code>Self</code> values, returning the\ndifference as a triple of <code>Self</code> values.</p>\n<p>The more significant value always comes first. Subtraction is wrapping, and overflow\nis not indicated.</p>\n<p>$$\nf(x_2, x_1, x_0, y_2, y_1, y_0) = (z_2, z_1, z_0),\n$$\nwhere $W$ is <code>Self::WIDTH</code>,</p>\n<p>$x_2, x_1, x_0, y_2, y_1, y_0, z_2, z_1, z_0 &lt; 2^W$, and\n$$\n(2^{2W}x_2 + 2^Wx_1 + x_0) - (2^{2W}y_2 + 2^Wy_1 + y_0)\n\\equiv 2^{2W}z_2 + 2^Wz_1 + z_0 \\mod 2^{3W}.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::xxx_sub_yyy_to_zzz#xxx_sub_yyy_to_zzz\">here</a>.</p>\n<p>This is equivalent to <code>sub_dddmmmsss</code> from <code>longlong.h</code>, FLINT 2.7.1, where <code>(dh, dm, dl)</code> is returned.</p>\n</div></details></div></details>","XXXSubYYYToZZZ","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-XXXXAddYYYYToZZZZ-for-u16\" class=\"impl\"><a href=\"#impl-XXXXAddYYYYToZZZZ-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl XXXXAddYYYYToZZZZ for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.xxxx_add_yyyy_to_zzzz\" class=\"method trait-impl\"><a href=\"#method.xxxx_add_yyyy_to_zzzz\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">xxxx_add_yyyy_to_zzzz</a>(\n    x_3: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    x_2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    x_1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    x_0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    y_3: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    y_2: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    y_1: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    y_0: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section></summary><div class=\"docblock\"><p>Adds two numbers, each composed of four <code>Self</code> values, returning the sum as a\nquadruple of <code>Self</code> values.</p>\n<p>The more significant value always comes first. Addition is wrapping, and overflow is\nnot indicated.</p>\n<p>$$\nf(x_3, x_2, x_1, x_0, y_2, y_2, y_1, y_0) = (z_3, z_2, z_1, z_0),\n$$\nwhere $W$ is <code>Self::WIDTH</code>,</p>\n<p>$x_3, x_2, x_1, x_0, y_3, y_2, y_1, y_0, z_3, z_2, z_1, z_0 &lt; 2^W$, and\n$$\n(2^{3W}x_3 + 2^{2W}x_2 + 2^Wx_1 + x_0) + (2^{3W}y_3 + 2^{2W}y_2 + 2^Wy_1 + y_0)\n\\equiv 2^{3W}z_3 + 2^{2W}z_2 + 2^Wz_1 + z_0 \\mod 2^{4W}.\n$$</p>\n<h5 id=\"worst-case-complexity\"><a class=\"doc-anchor\" href=\"#worst-case-complexity\">§</a>Worst-case complexity</h5>\n<p>Constant time and additional memory.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>See <a href=\"super::xxxx_add_yyyy_to_zzzz#xxxx_add_yyyy_to_zzzz\">here</a>.</p>\n<p>This is equivalent to <code>add_ssssaaaaaaaa</code> from <code>longlong.h</code>, FLINT 2.7.1, where <code>(s3, s2, s1, s0)</code> is returned.</p>\n</div></details></div></details>","XXXXAddYYYYToZZZZ","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Yokeable%3C'a%3E-for-u16\" class=\"impl\"><a href=\"#impl-Yokeable%3C'a%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; Yokeable&lt;'a&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>This type MUST be <code>Self</code> with the <code>'static</code> replaced with <code>'a</code>, i.e. <code>Self&lt;'a&gt;</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform\" class=\"method trait-impl\"><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform</a>(&amp;self) -&gt; &amp;&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as Yokeable&lt;'a&gt;&gt;::Output</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a Self&lt;'static&gt;</code> and <code>&amp;'a Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_owned\" class=\"method trait-impl\"><a href=\"#method.transform_owned\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_owned</a>(self) -&gt; &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as Yokeable&lt;'a&gt;&gt;::Output</h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>Self&lt;'static&gt;</code> and <code>Self&lt;'a&gt;</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make\" class=\"method trait-impl\"><a href=\"#method.make\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">make</a>(this: &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as Yokeable&lt;'a&gt;&gt;::Output) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>This method can be used to cast away <code>Self&lt;'a&gt;</code>’s lifetime. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.transform_mut\" class=\"method trait-impl\"><a href=\"#method.transform_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">transform_mut</a>&lt;F&gt;(&amp;'a mut self, f: F)<div class=\"where\">where\n    F: 'static + for&lt;'b&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;'b mut &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as Yokeable&lt;'a&gt;&gt;::Output),</div></h4></section></summary><div class='docblock'>This method must cast <code>self</code> between <code>&amp;'a mut Self&lt;'static&gt;</code> and <code>&amp;'a mut Self&lt;'a&gt;</code>,\nand pass it to <code>f</code>. <a>Read more</a></div></details></div></details>","Yokeable<'a>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zero-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#59\">Source</a><a href=\"#impl-Zero-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#59\">Source</a><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns the additive identity element of <code>Self</code>, <code>0</code>. <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.zero\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#59\">Source</a><a href=\"#method.is_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if <code>self</code> is equal to the additive identity.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#23\">Source</a><a href=\"#method.set_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#method.set_zero\" class=\"fn\">set_zero</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.</div></details></div></details>","Zero","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zero-for-u16\" class=\"impl\"><a href=\"#impl-Zero-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Zero for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3><div class=\"docblock\"><p>The constant 0.</p>\n</div></section></summary><div class=\"docblock\"><h4 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h4>\n<p>See <a href=\"self\">here</a>.</p>\n</div><div class=\"impl-items\"><section id=\"associatedconstant.ZERO\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.ZERO\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">ZERO</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 0u16</h4></section></div></details>","Zero","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroFrom%3C'a,+u16%3E-for-u16\" class=\"impl\"><a href=\"#impl-ZeroFrom%3C'a,+u16%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; ZeroFrom&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero_from\" class=\"method trait-impl\"><a href=\"#method.zero_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zero_from</a>(this: &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Clone the other <code>C</code> into a struct that may retain references into <code>C</code>.</div></details></div></details>","ZeroFrom<'a, u16>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ZeroMapKV%3C'a%3E-for-u16\" class=\"impl\"><a href=\"#impl-ZeroMapKV%3C'a%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; ZeroMapKV&lt;'a&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Container\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Container\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Container</a> = ZeroVec&lt;'a, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class='docblock'>The container that can be used with this type: [<code>ZeroVec</code>] or [<code>VarZeroVec</code>].</div></details><section id=\"associatedtype.Slice\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Slice\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Slice</a> = ZeroSlice&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section><details class=\"toggle\" open><summary><section id=\"associatedtype.GetType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.GetType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">GetType</a> = &lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> as AsULE&gt;::ULE</h4></section></summary><div class='docblock'>The type produced by <code>Container::get()</code> <a>Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.OwnedType\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.OwnedType\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">OwnedType</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>The type produced by <code>Container::replace()</code> and <code>Container::remove()</code>,\nalso used during deserialization. If <code>Self</code> is human readable serialized,\ndeserializing to <code>Self::OwnedType</code> should produce the same value once\npassed through <code>Self::owned_as_self()</code> <a>Read more</a></div></details></div></details>","ZeroMapKV<'a>","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroable-for-u16\" class=\"impl\"><a href=\"#impl-Zeroable-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Zeroable for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroed\" class=\"method trait-impl\"><a href=\"#method.zeroed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroed</a>() -&gt; Self</h4></section></summary><div class='docblock'>Calls <a href=\"https://doc.rust-lang.org/1.85.1/core/mem/fn.zeroed.html\" title=\"fn core::mem::zeroed\"><code>zeroed</code></a>. <a>Read more</a></div></details></div></details>","Zeroable","clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1046\">Source</a><a href=\"#impl-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 0u16</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u16::MIN, <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a> = 65_535u16</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>16</sup> − 1).</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u16::MAX, <span class=\"number\">65535</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a> = 16u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u16::BITS, <span class=\"number\">16</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b01001100u16</span>;\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>max = u16::MAX;\n<span class=\"macro\">assert_eq!</span>(max.count_ones(), <span class=\"number\">16</span>);\n\n<span class=\"kw\">let </span>zero = <span class=\"number\">0u16</span>;\n<span class=\"macro\">assert_eq!</span>(zero.count_ones(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.count_zeros\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>zero = <span class=\"number\">0u16</span>;\n<span class=\"macro\">assert_eq!</span>(zero.count_zeros(), <span class=\"number\">16</span>);\n\n<span class=\"kw\">let </span>max = u16::MAX;\n<span class=\"macro\">assert_eq!</span>(max.count_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.ilog2\" title=\"method u16::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = u16::MAX &gt;&gt; <span class=\"number\">2</span>;\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span>zero = <span class=\"number\">0u16</span>;\n<span class=\"macro\">assert_eq!</span>(zero.leading_zeros(), <span class=\"number\">16</span>);\n\n<span class=\"kw\">let </span>max = u16::MAX;\n<span class=\"macro\">assert_eq!</span>(max.leading_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b0101000u16</span>;\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>zero = <span class=\"number\">0u16</span>;\n<span class=\"macro\">assert_eq!</span>(zero.trailing_zeros(), <span class=\"number\">16</span>);\n\n<span class=\"kw\">let </span>max = u16::MAX;\n<span class=\"macro\">assert_eq!</span>(max.trailing_zeros(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = !(u16::MAX &gt;&gt; <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">2</span>);\n\n<span class=\"kw\">let </span>zero = <span class=\"number\">0u16</span>;\n<span class=\"macro\">assert_eq!</span>(zero.leading_ones(), <span class=\"number\">0</span>);\n\n<span class=\"kw\">let </span>max = u16::MAX;\n<span class=\"macro\">assert_eq!</span>(max.leading_ones(), <span class=\"number\">16</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation\nof <code>self</code>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b1010111u16</span>;\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>zero = <span class=\"number\">0u16</span>;\n<span class=\"macro\">assert_eq!</span>(zero.trailing_ones(), <span class=\"number\">0</span>);\n\n<span class=\"kw\">let </span>max = u16::MAX;\n<span class=\"macro\">assert_eq!</span>(max.trailing_ones(), <span class=\"number\">16</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast_signed\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.cast_signed\" class=\"fn\">cast_signed</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>integer_sign_cast</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the bit pattern of <code>self</code> reinterpreted as a signed integer of the same size.</p>\n<p>This produces the same result as an <code>as</code> cast, but ensures that the bit-width remains\nthe same.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(integer_sign_cast)]\n\n</span><span class=\"kw\">let </span>n = u16::MAX;\n\n<span class=\"macro\">assert_eq!</span>(n.cast_signed(), -<span class=\"number\">1i16</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xa003u16</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x3a</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">4</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x3au16</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xa003</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">4</span>), m);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234u16</span>;\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x3412</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1234u16</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0u16</span>.reverse_bits());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au16</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(u16::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u16::from_be(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au16</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(u16::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(u16::from_le(n), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are\nswapped.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au16</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are\nswapped.</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Au16</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((u16::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(u16::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((u16::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_add\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.strict_add\" class=\"fn\">strict_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_overflow_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Strict integer addition. Computes <code>self + rhs</code>, panicking\nif overflow occurred.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5><h6 id=\"overflow-behavior\"><a class=\"doc-anchor\" href=\"#overflow-behavior\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"macro\">assert_eq!</span>((u16::MAX - <span class=\"number\">2</span>).strict_add(<span class=\"number\">1</span>), u16::MAX - <span class=\"number\">1</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= (u16::MAX - <span class=\"number\">2</span>).strict_add(<span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const since 1.79.0\">1.79.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.unchecked_add\" class=\"fn\">unchecked_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<p>Calling <code>x.unchecked_add(y)</code> is semantically equivalent to calling\n<code>x.</code><a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.checked_add\" title=\"method u16::checked_add\"><code>checked_add</code></a><code>(y).</code><a href=\"option/enum.Option.html#method.unwrap_unchecked\"><code>unwrap_unchecked</code></a><code>()</code>.</p>\n<p>If you’re just trying to avoid the panic in debug mode, then <strong>do not</strong>\nuse this.  Instead, you’re looking for <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.wrapping_add\" title=\"method u16::wrapping_add\"><code>wrapping_add</code></a>.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; u16::MAX</code> or <code>self + rhs &lt; u16::MIN</code>,\ni.e. when <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.checked_add\" title=\"method u16::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_signed\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_add_signed\" class=\"fn\">checked_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with a signed integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.checked_add_signed(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.checked_add_signed(-<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((u16::MAX - <span class=\"number\">2</span>).checked_add_signed(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_add_signed\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.strict_add_signed\" class=\"fn\">strict_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_overflow_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Strict addition with a signed integer. Computes <code>self + rhs</code>,\npanicking if overflow occurred.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5><h6 id=\"overflow-behavior-1\"><a class=\"doc-anchor\" href=\"#overflow-behavior-1\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.strict_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);</code></pre></div>\n<p>The following panic because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= <span class=\"number\">1u16</span>.strict_add_signed(-<span class=\"number\">2</span>);</code></pre></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= (u16::MAX - <span class=\"number\">2</span>).strict_add_signed(<span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_sub\" class=\"fn\">checked_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u16</span>.checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_sub\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.strict_sub\" class=\"fn\">strict_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_overflow_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Strict integer subtraction. Computes <code>self - rhs</code>, panicking if\noverflow occurred.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5><h6 id=\"overflow-behavior-2\"><a class=\"doc-anchor\" href=\"#overflow-behavior-2\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.strict_sub(<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= <span class=\"number\">0u16</span>.strict_sub(<span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const since 1.79.0\">1.79.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.unchecked_sub\" class=\"fn\">unchecked_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<p>Calling <code>x.unchecked_sub(y)</code> is semantically equivalent to calling\n<code>x.</code><a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.checked_sub\" title=\"method u16::checked_sub\"><code>checked_sub</code></a><code>(y).</code><a href=\"option/enum.Option.html#method.unwrap_unchecked\"><code>unwrap_unchecked</code></a><code>()</code>.</p>\n<p>If you’re just trying to avoid the panic in debug mode, then <strong>do not</strong>\nuse this.  Instead, you’re looking for <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.wrapping_sub\" title=\"method u16::wrapping_sub\"><code>wrapping_sub</code></a>.</p>\n<p>If you find yourself writing code like this:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">if </span>foo &gt;= bar {\n    <span class=\"comment\">// SAFETY: just checked it will not overflow\n    </span><span class=\"kw\">let </span>diff = <span class=\"kw\">unsafe </span>{ foo.unchecked_sub(bar) };\n    <span class=\"comment\">// ... use diff ...\n</span>}</code></pre></div>\n<p>Consider changing it to</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(diff) = foo.checked_sub(bar) {\n    <span class=\"comment\">// ... use diff ...\n</span>}</code></pre></div>\n<p>As that does exactly the same thing – including telling the optimizer\nthat the subtraction cannot overflow – but avoids needing <code>unsafe</code>.</p>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; u16::MAX</code> or <code>self - rhs &lt; u16::MIN</code>,\ni.e. when <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.checked_sub\" title=\"method u16::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_signed\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_sub_signed\" class=\"fn\">checked_sub_signed</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>mixed_integer_ops_unsigned_sub</code>)</span></div></span></summary><div class=\"docblock\"><p>Checked subtraction with a signed integer. Computes <code>self - rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(mixed_integer_ops_unsigned_sub)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.checked_sub_signed(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.checked_sub_signed(-<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>((u16::MAX - <span class=\"number\">2</span>).checked_sub_signed(-<span class=\"number\">4</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_signed_diff\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_signed_diff\" class=\"fn\">checked_signed_diff</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unsigned_signed_diff</code>)</span></div></span></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code> and checks if the result fits into an <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\" title=\"primitive i16\"><code>i16</code></a>, returning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-25\"><a class=\"doc-anchor\" href=\"#examples-25\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unsigned_signed_diff)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u16</span>.checked_signed_diff(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">8</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u16</span>.checked_signed_diff(<span class=\"number\">10</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">8</span>));\n<span class=\"macro\">assert_eq!</span>(u16::MAX.checked_signed_diff(i16::MAX <span class=\"kw\">as </span>u16), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((i16::MAX <span class=\"kw\">as </span>u16).checked_signed_diff(u16::MAX), <span class=\"prelude-val\">Some</span>(i16::MIN));\n<span class=\"macro\">assert_eq!</span>((i16::MAX <span class=\"kw\">as </span>u16 + <span class=\"number\">1</span>).checked_signed_diff(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(u16::MAX.checked_signed_diff(u16::MAX), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning\n<code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-26\"><a class=\"doc-anchor\" href=\"#examples-26\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(u16::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_mul\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.strict_mul\" class=\"fn\">strict_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_overflow_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Strict integer multiplication. Computes <code>self * rhs</code>, panicking if\noverflow occurred.</p>\n<h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5><h6 id=\"overflow-behavior-3\"><a class=\"doc-anchor\" href=\"#overflow-behavior-3\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-27\"><a class=\"doc-anchor\" href=\"#examples-27\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.strict_mul(<span class=\"number\">1</span>), <span class=\"number\">5</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= u16::MAX.strict_mul(<span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0, const since 1.79.0\">1.79.0 (const: 1.79.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<p>Calling <code>x.unchecked_mul(y)</code> is semantically equivalent to calling\n<code>x.</code><a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.checked_mul\" title=\"method u16::checked_mul\"><code>checked_mul</code></a><code>(y).</code><a href=\"option/enum.Option.html#method.unwrap_unchecked\"><code>unwrap_unchecked</code></a><code>()</code>.</p>\n<p>If you’re just trying to avoid the panic in debug mode, then <strong>do not</strong>\nuse this.  Instead, you’re looking for <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.wrapping_mul\" title=\"method u16::wrapping_mul\"><code>wrapping_mul</code></a>.</p>\n<h5 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; u16::MAX</code> or <code>self * rhs &lt; u16::MIN</code>,\ni.e. when <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.checked_mul\" title=\"method u16::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_div\" class=\"fn\">checked_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-28\"><a class=\"doc-anchor\" href=\"#examples-28\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u16</span>.checked_div(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_div\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.strict_div\" class=\"fn\">strict_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_overflow_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Strict integer division. Computes <code>self / rhs</code>.</p>\n<p>Strict division on unsigned types is just normal division. There’s no\nway overflow could ever happen. This function exists so that all\noperations are accounted for in the strict operations.</p>\n<h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-29\"><a class=\"doc-anchor\" href=\"#examples-29\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.strict_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre></div>\n<p>The following panics because of division by zero:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= (<span class=\"number\">1u16</span>).strict_div(<span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_div_euclid\" class=\"fn\">checked_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-30\"><a class=\"doc-anchor\" href=\"#examples-30\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u16</span>.checked_div_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_div_euclid\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.strict_div_euclid\" class=\"fn\">strict_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_overflow_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Strict Euclidean division. Computes <code>self.div_euclid(rhs)</code>.</p>\n<p>Strict division on unsigned types is just normal division. There’s no\nway overflow could ever happen. This function exists so that all\noperations are accounted for in the strict operations. Since, for the\npositive integers, all common definitions of division are equal, this\nis exactly equal to <code>self.strict_div(rhs)</code>.</p>\n<h5 id=\"panics-5\"><a class=\"doc-anchor\" href=\"#panics-5\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-31\"><a class=\"doc-anchor\" href=\"#examples-31\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.strict_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre></div>\n<p>The following panics because of division by zero:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= (<span class=\"number\">1u16</span>).strict_div_euclid(<span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_rem\" class=\"fn\">checked_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-32\"><a class=\"doc-anchor\" href=\"#examples-32\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_rem\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.strict_rem\" class=\"fn\">strict_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_overflow_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Strict integer remainder. Computes <code>self % rhs</code>.</p>\n<p>Strict remainder calculation on unsigned types is just the regular\nremainder calculation. There’s no way overflow could ever happen.\nThis function exists so that all operations are accounted for in the\nstrict operations.</p>\n<h5 id=\"panics-6\"><a class=\"doc-anchor\" href=\"#panics-6\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-33\"><a class=\"doc-anchor\" href=\"#examples-33\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.strict_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre></div>\n<p>The following panics because of division by zero:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= <span class=\"number\">5u16</span>.strict_rem(<span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_rem_euclid\" class=\"fn\">checked_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code>.</p>\n<h5 id=\"examples-34\"><a class=\"doc-anchor\" href=\"#examples-34\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_rem_euclid\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.strict_rem_euclid\" class=\"fn\">strict_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_overflow_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Strict Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>.</p>\n<p>Strict modulo calculation on unsigned types is just the regular\nremainder calculation. There’s no way overflow could ever happen.\nThis function exists so that all operations are accounted for in the\nstrict operations. Since, for the positive integers, all common\ndefinitions of division are equal, this is exactly equal to\n<code>self.strict_rem(rhs)</code>.</p>\n<h5 id=\"panics-7\"><a class=\"doc-anchor\" href=\"#panics-7\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-35\"><a class=\"doc-anchor\" href=\"#examples-35\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.strict_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre></div>\n<p>The following panics because of division by zero:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= <span class=\"number\">5u16</span>.strict_rem_euclid(<span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.ilog\" class=\"fn\">ilog</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-8\"><a class=\"doc-anchor\" href=\"#panics-8\">§</a>Panics</h5>\n<p>This function will panic if <code>self</code> is zero, or if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-36\"><a class=\"doc-anchor\" href=\"#examples-36\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.ilog2\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-9\"><a class=\"doc-anchor\" href=\"#panics-9\">§</a>Panics</h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"examples-37\"><a class=\"doc-anchor\" href=\"#examples-37\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u16</span>.ilog2(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.ilog10\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-10\"><a class=\"doc-anchor\" href=\"#panics-10\">§</a>Panics</h5>\n<p>This function will panic if <code>self</code> is zero.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u16</span>.ilog10(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_ilog\" class=\"fn\">checked_ilog</a>(self, base: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-38\"><a class=\"doc-anchor\" href=\"#examples-38\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_ilog2\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-39\"><a class=\"doc-anchor\" href=\"#examples-39\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u16</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_ilog10\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is zero.</p>\n<h5 id=\"examples-40\"><a class=\"doc-anchor\" href=\"#examples-40\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u16</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_neg\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> unless <code>self == 0</code>.</p>\n<p>Note that negating any positive integer will overflow.</p>\n<h5 id=\"examples-41\"><a class=\"doc-anchor\" href=\"#examples-41\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u16</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_neg\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.strict_neg\" class=\"fn\">strict_neg</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_overflow_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Strict negation. Computes <code>-self</code>, panicking unless <code>self == 0</code>.</p>\n<p>Note that negating any positive integer will overflow.</p>\n<h5 id=\"panics-11\"><a class=\"doc-anchor\" href=\"#panics-11\">§</a>Panics</h5><h6 id=\"overflow-behavior-4\"><a class=\"doc-anchor\" href=\"#overflow-behavior-4\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-42\"><a class=\"doc-anchor\" href=\"#examples-42\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u16</span>.strict_neg(), <span class=\"number\">0</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= <span class=\"number\">1u16</span>.strict_neg();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_shl\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-43\"><a class=\"doc-anchor\" href=\"#examples-43\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u16</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u16</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u16</span>.checked_shl(<span class=\"number\">15</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_shl\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.strict_shl\" class=\"fn\">strict_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_overflow_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Strict shift left. Computes <code>self &lt;&lt; rhs</code>, panicking if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"panics-12\"><a class=\"doc-anchor\" href=\"#panics-12\">§</a>Panics</h5><h6 id=\"overflow-behavior-5\"><a class=\"doc-anchor\" href=\"#overflow-behavior-5\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-44\"><a class=\"doc-anchor\" href=\"#examples-44\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u16</span>.strict_shl(<span class=\"number\">4</span>), <span class=\"number\">0x10</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= <span class=\"number\">0x10u16</span>.strict_shl(<span class=\"number\">129</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.unchecked_shl\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_shifts</code>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.checked_shl\" title=\"method u16::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unbounded_shl\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.unbounded_shl\" class=\"fn\">unbounded_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unbounded_shifts</code>)</span></div></span></summary><div class=\"docblock\"><p>Unbounded shift left. Computes <code>self &lt;&lt; rhs</code>, without bounding the value of <code>rhs</code>.</p>\n<p>If <code>rhs</code> is larger or equal to the number of bits in <code>self</code>,\nthe entire value is shifted out, and <code>0</code> is returned.</p>\n<h5 id=\"examples-45\"><a class=\"doc-anchor\" href=\"#examples-45\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unbounded_shifts)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u16</span>.unbounded_shl(<span class=\"number\">4</span>), <span class=\"number\">0x10</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u16</span>.unbounded_shl(<span class=\"number\">129</span>), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_shr\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code>\nif <code>rhs</code> is larger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-46\"><a class=\"doc-anchor\" href=\"#examples-46\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u16</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u16</span>.checked_shr(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_shr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.strict_shr\" class=\"fn\">strict_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_overflow_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Strict shift right. Computes <code>self &gt;&gt; rhs</code>, panicking <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"panics-13\"><a class=\"doc-anchor\" href=\"#panics-13\">§</a>Panics</h5><h6 id=\"overflow-behavior-6\"><a class=\"doc-anchor\" href=\"#overflow-behavior-6\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-47\"><a class=\"doc-anchor\" href=\"#examples-47\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u16</span>.strict_shr(<span class=\"number\">4</span>), <span class=\"number\">0x1</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= <span class=\"number\">0x10u16</span>.strict_shr(<span class=\"number\">129</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.unchecked_shr\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_shifts</code>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-4\"><a class=\"doc-anchor\" href=\"#safety-4\">§</a>Safety</h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.checked_shr\" title=\"method u16::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unbounded_shr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.unbounded_shr\" class=\"fn\">unbounded_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unbounded_shifts</code>)</span></div></span></summary><div class=\"docblock\"><p>Unbounded shift right. Computes <code>self &gt;&gt; rhs</code>, without bounding the value of <code>rhs</code>.</p>\n<p>If <code>rhs</code> is larger or equal to the number of bits in <code>self</code>,\nthe entire value is shifted out, and <code>0</code> is returned.</p>\n<h5 id=\"examples-48\"><a class=\"doc-anchor\" href=\"#examples-48\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unbounded_shifts)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u16</span>.unbounded_shr(<span class=\"number\">4</span>), <span class=\"number\">0x1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u16</span>.unbounded_shr(<span class=\"number\">129</span>), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-49\"><a class=\"doc-anchor\" href=\"#examples-49\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u16</span>.checked_pow(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">32</span>));\n<span class=\"macro\">assert_eq!</span>(u16::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strict_pow\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.strict_pow\" class=\"fn\">strict_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_overflow_ops</code>)</span></div></span></summary><div class=\"docblock\"><p>Strict exponentiation. Computes <code>self.pow(exp)</code>, panicking if\noverflow occurred.</p>\n<h5 id=\"panics-14\"><a class=\"doc-anchor\" href=\"#panics-14\">§</a>Panics</h5><h6 id=\"overflow-behavior-7\"><a class=\"doc-anchor\" href=\"#overflow-behavior-7\">§</a>Overflow behavior</h6>\n<p>This function will always panic on overflow, regardless of whether overflow checks are enabled.</p>\n<h5 id=\"examples-50\"><a class=\"doc-anchor\" href=\"#examples-50\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u16</span>.strict_pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre></div>\n<p>The following panics because of overflow:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(strict_overflow_ops)]\n</span><span class=\"kw\">let _ </span>= u16::MAX.strict_pow(<span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at\nthe numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-51\"><a class=\"doc-anchor\" href=\"#examples-51\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(u16::MAX.saturating_add(<span class=\"number\">127</span>), u16::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_signed\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.saturating_add_signed\" class=\"fn\">saturating_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Saturating addition with a signed integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-52\"><a class=\"doc-anchor\" href=\"#examples-52\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.saturating_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.saturating_add_signed(-<span class=\"number\">2</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((u16::MAX - <span class=\"number\">2</span>).saturating_add_signed(<span class=\"number\">4</span>), u16::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating\nat the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-53\"><a class=\"doc-anchor\" href=\"#examples-53\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.saturating_sub(<span class=\"number\">27</span>), <span class=\"number\">73</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13u16</span>.saturating_sub(<span class=\"number\">127</span>), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_signed\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.saturating_sub_signed\" class=\"fn\">saturating_sub_signed</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>mixed_integer_ops_unsigned_sub</code>)</span></div></span></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self</code> - <code>rhs</code>, saturating at\nthe numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-54\"><a class=\"doc-anchor\" href=\"#examples-54\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(mixed_integer_ops_unsigned_sub)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.saturating_sub_signed(<span class=\"number\">2</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.saturating_sub_signed(-<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((u16::MAX - <span class=\"number\">2</span>).saturating_sub_signed(-<span class=\"number\">4</span>), u16::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-55\"><a class=\"doc-anchor\" href=\"#examples-55\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u16</span>.saturating_mul(<span class=\"number\">10</span>), <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>((u16::MAX).saturating_mul(<span class=\"number\">10</span>), u16::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.saturating_div\" class=\"fn\">saturating_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"panics-15\"><a class=\"doc-anchor\" href=\"#panics-15\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-56\"><a class=\"doc-anchor\" href=\"#examples-56\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-57\"><a class=\"doc-anchor\" href=\"#examples-57\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">4u16</span>.saturating_pow(<span class=\"number\">3</span>), <span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(u16::MAX.saturating_pow(<span class=\"number\">2</span>), u16::MAX);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_add\" class=\"fn\">wrapping_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-58\"><a class=\"doc-anchor\" href=\"#examples-58\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u16</span>.wrapping_add(<span class=\"number\">55</span>), <span class=\"number\">255</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">200u16</span>.wrapping_add(u16::MAX), <span class=\"number\">199</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_signed\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_add_signed\" class=\"fn\">wrapping_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with a signed integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-59\"><a class=\"doc-anchor\" href=\"#examples-59\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.wrapping_add_signed(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.wrapping_add_signed(-<span class=\"number\">2</span>), u16::MAX);\n<span class=\"macro\">assert_eq!</span>((u16::MAX - <span class=\"number\">2</span>).wrapping_add_signed(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_sub\" class=\"fn\">wrapping_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-60\"><a class=\"doc-anchor\" href=\"#examples-60\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.wrapping_sub(<span class=\"number\">100</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.wrapping_sub(u16::MAX), <span class=\"number\">101</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_signed\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_sub_signed\" class=\"fn\">wrapping_sub_signed</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>mixed_integer_ops_unsigned_sub</code>)</span></div></span></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction with a signed integer. Computes\n<code>self - rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-61\"><a class=\"doc-anchor\" href=\"#examples-61\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(mixed_integer_ops_unsigned_sub)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.wrapping_sub_signed(<span class=\"number\">2</span>), u16::MAX);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.wrapping_sub_signed(-<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((u16::MAX - <span class=\"number\">2</span>).wrapping_sub_signed(-<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_mul\" class=\"fn\">wrapping_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-62\"><a class=\"doc-anchor\" href=\"#examples-62\">§</a>Examples</h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u8</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">25u8</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">44</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_div\" class=\"fn\">wrapping_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>.</p>\n<p>Wrapped division on unsigned types is just normal division. There’s\nno way wrapping could ever happen. This function exists so that all\noperations are accounted for in the wrapping operations.</p>\n<h5 id=\"panics-16\"><a class=\"doc-anchor\" href=\"#panics-16\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-63\"><a class=\"doc-anchor\" href=\"#examples-63\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_div_euclid\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>.</p>\n<p>Wrapped division on unsigned types is just normal division. There’s\nno way wrapping could ever happen. This function exists so that all\noperations are accounted for in the wrapping operations. Since, for\nthe positive integers, all common definitions of division are equal,\nthis is exactly equal to <code>self.wrapping_div(rhs)</code>.</p>\n<h5 id=\"panics-17\"><a class=\"doc-anchor\" href=\"#panics-17\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-64\"><a class=\"doc-anchor\" href=\"#examples-64\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_rem\" class=\"fn\">wrapping_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>.</p>\n<p>Wrapped remainder calculation on unsigned types is just the regular\nremainder calculation. There’s no way wrapping could ever happen.\nThis function exists so that all operations are accounted for in the\nwrapping operations.</p>\n<h5 id=\"panics-18\"><a class=\"doc-anchor\" href=\"#panics-18\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-65\"><a class=\"doc-anchor\" href=\"#examples-65\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_rem_euclid\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean modulo. Computes <code>self.rem_euclid(rhs)</code>.</p>\n<p>Wrapped modulo calculation on unsigned types is just the regular\nremainder calculation. There’s no way wrapping could ever happen.\nThis function exists so that all operations are accounted for in the\nwrapping operations. Since, for the positive integers, all common\ndefinitions of division are equal, this is exactly equal to\n<code>self.wrapping_rem(rhs)</code>.</p>\n<h5 id=\"panics-19\"><a class=\"doc-anchor\" href=\"#panics-19\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-66\"><a class=\"doc-anchor\" href=\"#examples-66\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>,\nwrapping around at the boundary of the type.</p>\n<p>Since unsigned types do not have negative equivalents\nall applications of this function will wrap (except for <code>-0</code>).\nFor values smaller than the corresponding signed type’s maximum\nthe result is the same as casting the corresponding signed value.\nAny larger values are equivalent to <code>MAX + 1 - (val - MAX - 1)</code> where\n<code>MAX</code> is the corresponding signed type’s maximum.</p>\n<h5 id=\"examples-67\"><a class=\"doc-anchor\" href=\"#examples-67\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0_u16</span>.wrapping_neg(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(u16::MAX.wrapping_neg(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">13_u16</span>.wrapping_neg(), (!<span class=\"number\">13</span>) + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">42_u16</span>.wrapping_neg(), !(<span class=\"number\">42 </span>- <span class=\"number\">1</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_shl\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the\nRHS of a wrapping shift-left is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.rotate_left\" title=\"method u16::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-68\"><a class=\"doc-anchor\" href=\"#examples-68\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.wrapping_shl(<span class=\"number\">7</span>), <span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.wrapping_shl(<span class=\"number\">128</span>), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_shr\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>,\nwhere <code>mask</code> removes any high-order bits of <code>rhs</code> that\nwould cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the\nRHS of a wrapping shift-right is restricted to the range\nof the type, rather than the bits shifted out of the LHS\nbeing returned to the other end. The primitive integer\ntypes all implement a <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.rotate_right\" title=\"method u16::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-69\"><a class=\"doc-anchor\" href=\"#examples-69\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u16</span>.wrapping_shr(<span class=\"number\">7</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">128u16</span>.wrapping_shr(<span class=\"number\">128</span>), <span class=\"number\">128</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_pow\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-70\"><a class=\"doc-anchor\" href=\"#examples-70\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u16</span>.wrapping_pow(<span class=\"number\">5</span>), <span class=\"number\">243</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.wrapping_pow(<span class=\"number\">6</span>), <span class=\"number\">217</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_add\" class=\"fn\">overflowing_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code>.</p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-71\"><a class=\"doc-anchor\" href=\"#examples-71\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(u16::MAX.overflowing_add(<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.carrying_add\" class=\"fn\">carrying_add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, carry: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and returns a tuple containing\nthe sum and the output carry.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns an output integer and a carry-out bit. This allows\nchaining together multiple additions to create a wider addition, and\ncan be useful for bignum addition.</p>\n<p>This can be thought of as a 16-bit “full adder”, in the electronics sense.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.overflowing_add\" title=\"method u16::overflowing_add\"><code>overflowing_add</code></a>, and the output carry is\nequal to the overflow flag. Note that although carry and overflow\nflags are similar for unsigned integers, they are different for\nsigned integers.</p>\n<h5 id=\"examples-72\"><a class=\"doc-anchor\" href=\"#examples-72\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    3  MAX    (a = 3 × 2^16 + 2^16 - 1)\n// +  5    7    (b = 5 × 2^16 + 7)\n// ---------\n//    9    6    (sum = 9 × 2^16 + 6)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u16, u16) = (<span class=\"number\">3</span>, u16::MAX);\n<span class=\"kw\">let </span>(b1, b0): (u16, u16) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(sum1, carry2) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(carry2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">9</span>, <span class=\"number\">6</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_signed\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_add_signed\" class=\"fn\">overflowing_add_signed</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with a signed <code>rhs</code>.</p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-73\"><a class=\"doc-anchor\" href=\"#examples-73\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.overflowing_add_signed(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.overflowing_add_signed(-<span class=\"number\">2</span>), (u16::MAX, <span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>((u16::MAX - <span class=\"number\">2</span>).overflowing_add_signed(<span class=\"number\">4</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_sub\" class=\"fn\">overflowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code>.</p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-74\"><a class=\"doc-anchor\" href=\"#examples-74\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u16</span>.overflowing_sub(<span class=\"number\">1</span>), (u16::MAX, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.borrowing_sub\" class=\"fn\">borrowing_sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, borrow: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and returns a tuple\ncontaining the difference and the output borrow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns an output\ninteger and a borrow-out bit. This allows chaining together multiple\nsubtractions to create a wider subtraction, and can be useful for\nbignum subtraction.</p>\n<h5 id=\"examples-75\"><a class=\"doc-anchor\" href=\"#examples-75\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n\n</span><span class=\"comment\">//    9    6    (a = 9 × 2^16 + 6)\n// -  5    7    (b = 5 × 2^16 + 7)\n// ---------\n//    3  MAX    (diff = 3 × 2^16 + 2^16 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (u16, u16) = (<span class=\"number\">9</span>, <span class=\"number\">6</span>);\n<span class=\"kw\">let </span>(b1, b0): (u16, u16) = (<span class=\"number\">5</span>, <span class=\"number\">7</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n<span class=\"kw\">let </span>(diff1, borrow2) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(borrow2, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">3</span>, u16::MAX));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_signed\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_sub_signed\" class=\"fn\">overflowing_sub_signed</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.i16.html\">i16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>mixed_integer_ops_unsigned_sub</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code> with a signed <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-76\"><a class=\"doc-anchor\" href=\"#examples-76\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(mixed_integer_ops_unsigned_sub)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.overflowing_sub_signed(<span class=\"number\">2</span>), (u16::MAX, <span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.overflowing_sub_signed(-<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((u16::MAX - <span class=\"number\">2</span>).overflowing_sub_signed(-<span class=\"number\">4</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.abs_diff\" class=\"fn\">abs_diff</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<h5 id=\"examples-77\"><a class=\"doc-anchor\" href=\"#examples-77\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100u16</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u16</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_mul\" class=\"fn\">overflowing_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean\nindicating whether an arithmetic overflow would occur. If an\noverflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-78\"><a class=\"doc-anchor\" href=\"#examples-78\">§</a>Examples</h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.widening_mul\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.widening_mul\" class=\"fn\">widening_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the complete product <code>self * rhs</code> without the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>If you also need to add a carry to the wide result, then you want\n<a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.carrying_mul\" title=\"method u16::carrying_mul\"><code>Self::carrying_mul</code></a> instead.</p>\n<h5 id=\"examples-79\"><a class=\"doc-anchor\" href=\"#examples-79\">§</a>Examples</h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.widening_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.widening_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_mul\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.carrying_mul\" class=\"fn\">carrying_mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, carry: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the “full multiplication” <code>self * rhs + carry</code>\nwithout the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>Performs “long multiplication” which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create “big integers” which represent larger values.</p>\n<p>If you don’t need the <code>carry</code>, then you can use <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.widening_mul\" title=\"method u16::widening_mul\"><code>Self::widening_mul</code></a> instead.</p>\n<h5 id=\"examples-80\"><a class=\"doc-anchor\" href=\"#examples-80\">§</a>Examples</h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">0</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul(<span class=\"number\">2</span>, <span class=\"number\">10</span>), (<span class=\"number\">20</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">0</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul(<span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">1410065418</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(u16::MAX.carrying_mul(u16::MAX, u16::MAX), (<span class=\"number\">0</span>, u16::MAX));</code></pre></div>\n<p>This is the core operation needed for scalar multiplication when\nimplementing it for wider-than-native types.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">fn </span>scalar_mul_eq(little_endian_digits: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u16&gt;, multiplicand: u16) {\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>carry = <span class=\"number\">0</span>;\n    <span class=\"kw\">for </span>d <span class=\"kw\">in </span>little_endian_digits.iter_mut() {\n        (<span class=\"kw-2\">*</span>d, carry) = d.carrying_mul(multiplicand, carry);\n    }\n    <span class=\"kw\">if </span>carry != <span class=\"number\">0 </span>{\n        little_endian_digits.push(carry);\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">10</span>, <span class=\"number\">20</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">30</span>, <span class=\"number\">60</span>]);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x87654321_u64 </span>* <span class=\"number\">0xFEED</span>, <span class=\"number\">0x86D3D159E38D</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = <span class=\"macro\">vec!</span>[<span class=\"number\">0x4321</span>, <span class=\"number\">0x8765</span>];\nscalar_mul_eq(<span class=\"kw-2\">&amp;mut </span>v, <span class=\"number\">0xFEED</span>);\n<span class=\"macro\">assert_eq!</span>(v, [<span class=\"number\">0xE38D</span>, <span class=\"number\">0xD159</span>, <span class=\"number\">0x86D3</span>]);</code></pre></div>\n<p>If <code>carry</code> is zero, this is similar to <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.overflowing_mul\" title=\"method u16::overflowing_mul\"><code>overflowing_mul</code></a>,\nexcept that it gives the value of the overflow instead of just whether one happened:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">7</span>, <span class=\"number\">13</span>));\n<span class=\"kw\">let </span>r = u8::carrying_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>, <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((r.<span class=\"number\">0</span>, r.<span class=\"number\">1 </span>!= <span class=\"number\">0</span>), u8::overflowing_mul(<span class=\"number\">13</span>, <span class=\"number\">42</span>));</code></pre></div>\n<p>The value of the first field in the returned tuple matches what you’d get\nby combining the <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.wrapping_mul\" title=\"method u16::wrapping_mul\"><code>wrapping_mul</code></a> and\n<a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.wrapping_add\" title=\"method u16::wrapping_add\"><code>wrapping_add</code></a> methods:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(\n    <span class=\"number\">789_u16</span>.carrying_mul(<span class=\"number\">456</span>, <span class=\"number\">123</span>).<span class=\"number\">0</span>,\n    <span class=\"number\">789_u16</span>.wrapping_mul(<span class=\"number\">456</span>).wrapping_add(<span class=\"number\">123</span>),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_mul_add\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.carrying_mul_add\" class=\"fn\">carrying_mul_add</a>(\n    self,\n    rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    carry: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n    add: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>,\n) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the “full multiplication” <code>self * rhs + carry1 + carry2</code>\nwithout the possibility to overflow.</p>\n<p>This returns the low-order (wrapping) bits and the high-order (overflow) bits\nof the result as two separate values, in that order.</p>\n<p>Performs “long multiplication” which takes in an extra amount to add, and may return an\nadditional amount of overflow. This allows for chaining together multiple\nmultiplications to create “big integers” which represent larger values.</p>\n<p>If you don’t need either <code>carry</code>, then you can use <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.widening_mul\" title=\"method u16::widening_mul\"><code>Self::widening_mul</code></a> instead,\nand if you only need one <code>carry</code>, then you can use <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.carrying_mul\" title=\"method u16::carrying_mul\"><code>Self::carrying_mul</code></a> instead.</p>\n<h5 id=\"examples-81\"><a class=\"doc-anchor\" href=\"#examples-81\">§</a>Examples</h5>\n<p>Basic usage:</p>\n<p>Please note that this example is shared between integer types.\nWhich explains why <code>u32</code> is used here.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul_add(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">10</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u32</span>.carrying_mul_add(<span class=\"number\">2</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">30</span>, <span class=\"number\">0</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul_add(<span class=\"number\">10</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), (<span class=\"number\">1410065408</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000u32</span>.carrying_mul_add(<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>), (<span class=\"number\">1410065428</span>, <span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(u16::MAX.carrying_mul_add(u16::MAX, u16::MAX, u16::MAX), (u16::MAX, u16::MAX));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_div\" class=\"fn\">overflowing_div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.</p>\n<h5 id=\"panics-20\"><a class=\"doc-anchor\" href=\"#panics-20\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-82\"><a class=\"doc-anchor\" href=\"#examples-82\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_div_euclid\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating\nwhether an arithmetic overflow would occur. Note that for unsigned\nintegers overflow never occurs, so the second value is always\n<code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self.overflowing_div(rhs)</code>.</p>\n<h5 id=\"panics-21\"><a class=\"doc-anchor\" href=\"#panics-21\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-83\"><a class=\"doc-anchor\" href=\"#examples-83\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_rem\" class=\"fn\">overflowing_rem</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.</p>\n<h5 id=\"panics-22\"><a class=\"doc-anchor\" href=\"#panics-22\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-84\"><a class=\"doc-anchor\" href=\"#examples-84\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_rem_euclid\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder <code>self.rem_euclid(rhs)</code> as if by Euclidean division.</p>\n<p>Returns a tuple of the modulo after dividing along with a boolean\nindicating whether an arithmetic overflow would occur. Note that for\nunsigned integers overflow never occurs, so the second value is\nalways <code>false</code>.\nSince, for the positive integers, all common\ndefinitions of division are equal, this operation\nis exactly equal to <code>self.overflowing_rem(rhs)</code>.</p>\n<h5 id=\"panics-23\"><a class=\"doc-anchor\" href=\"#panics-23\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-85\"><a class=\"doc-anchor\" href=\"#examples-85\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5u16</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_neg\" class=\"fn\">overflowing_neg</a>(self) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self in an overflowing fashion.</p>\n<p>Returns <code>!self + 1</code> using wrapping operations to return the value\nthat represents the negation of this unsigned value. Note that for\npositive unsigned values overflow always occurs, but negating 0 does\nnot overflow.</p>\n<h5 id=\"examples-86\"><a class=\"doc-anchor\" href=\"#examples-86\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u16</span>.overflowing_neg(), (<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u16</span>.overflowing_neg(), (-<span class=\"number\">2i32 </span><span class=\"kw\">as </span>u16, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_shl\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-87\"><a class=\"doc-anchor\" href=\"#examples-87\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u16</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1u16</span>.overflowing_shl(<span class=\"number\">132</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u16</span>.overflowing_shl(<span class=\"number\">15</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">false</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_shr\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean\nindicating whether the shift value was larger than or equal to the\nnumber of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then\nused to perform the shift.</p>\n<h5 id=\"examples-88\"><a class=\"doc-anchor\" href=\"#examples-88\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u16</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10u16</span>.overflowing_shr(<span class=\"number\">132</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.overflowing_pow\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-89\"><a class=\"doc-anchor\" href=\"#examples-89\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u16</span>.overflowing_pow(<span class=\"number\">5</span>), (<span class=\"number\">243</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u8</span>.overflowing_pow(<span class=\"number\">6</span>), (<span class=\"number\">217</span>, <span class=\"bool-val\">true</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.pow\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-90\"><a class=\"doc-anchor\" href=\"#examples-90\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u16</span>.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.84.0, const since 1.84.0\">1.84.0 (const: 1.84.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.isqrt\" class=\"fn\">isqrt</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"examples-91\"><a class=\"doc-anchor\" href=\"#examples-91\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10u16</span>.isqrt(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.div_euclid\" class=\"fn\">div_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Performs Euclidean division.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self / rhs</code>.</p>\n<h5 id=\"panics-24\"><a class=\"doc-anchor\" href=\"#panics-24\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-92\"><a class=\"doc-anchor\" href=\"#examples-92\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u16</span>.div_euclid(<span class=\"number\">4</span>), <span class=\"number\">1</span>); <span class=\"comment\">// or any other integer type</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.rem_euclid\" class=\"fn\">rem_euclid</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Calculates the least remainder of <code>self (mod rhs)</code>.</p>\n<p>Since, for the positive integers, all common\ndefinitions of division are equal, this\nis exactly equal to <code>self % rhs</code>.</p>\n<h5 id=\"panics-25\"><a class=\"doc-anchor\" href=\"#panics-25\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-93\"><a class=\"doc-anchor\" href=\"#examples-93\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7u16</span>.rem_euclid(<span class=\"number\">4</span>), <span class=\"number\">3</span>); <span class=\"comment\">// or any other integer type</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.div_floor\" class=\"fn\">div_floor</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<p>This is the same as performing <code>self / rhs</code> for all unsigned integers.</p>\n<h5 id=\"panics-26\"><a class=\"doc-anchor\" href=\"#panics-26\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-94\"><a class=\"doc-anchor\" href=\"#examples-94\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u16</span>.div_floor(<span class=\"number\">4</span>), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.div_ceil\" class=\"fn\">div_ceil</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-27\"><a class=\"doc-anchor\" href=\"#panics-27\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h5 id=\"examples-95\"><a class=\"doc-anchor\" href=\"#examples-95\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">7_u16</span>.div_ceil(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.next_multiple_of\" class=\"fn\">next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>.</p>\n<h5 id=\"panics-28\"><a class=\"doc-anchor\" href=\"#panics-28\">§</a>Panics</h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-8\"><a class=\"doc-anchor\" href=\"#overflow-behavior-8\">§</a>Overflow behavior</h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-96\"><a class=\"doc-anchor\" href=\"#examples-96\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u16</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u16</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.73.0, const since 1.73.0\">1.73.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_next_multiple_of\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Calculates the smallest value greater than or equal to <code>self</code> that\nis a multiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the\noperation would result in overflow.</p>\n<h5 id=\"examples-97\"><a class=\"doc-anchor\" href=\"#examples-97\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_u16</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_u16</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_u16</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(u16::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_multiple_of\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.is_multiple_of\" class=\"fn\">is_multiple_of</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unsigned_is_multiple_of</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is an integer multiple of <code>rhs</code>, and false otherwise.</p>\n<p>This function is equivalent to <code>self % rhs == 0</code>, except that it will not panic\nfor <code>rhs == 0</code>. Instead, <code>0.is_multiple_of(0) == true</code>, and for any non-zero <code>n</code>,\n<code>n.is_multiple_of(0) == false</code>.</p>\n<h5 id=\"examples-98\"><a class=\"doc-anchor\" href=\"#examples-98\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(unsigned_is_multiple_of)]\n</span><span class=\"macro\">assert!</span>(<span class=\"number\">6_u16</span>.is_multiple_of(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(!<span class=\"number\">5_u16</span>.is_multiple_of(<span class=\"number\">2</span>));\n\n<span class=\"macro\">assert!</span>(<span class=\"number\">0_u16</span>.is_multiple_of(<span class=\"number\">0</span>));\n<span class=\"macro\">assert!</span>(!<span class=\"number\">6_u16</span>.is_multiple_of(<span class=\"number\">0</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_power_of_two\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.is_power_of_two\" class=\"fn\">is_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if and only if <code>self == 2^k</code> for some <code>k</code>.</p>\n<h5 id=\"examples-99\"><a class=\"doc-anchor\" href=\"#examples-99\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">16u16</span>.is_power_of_two());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10u16</span>.is_power_of_two());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_power_of_two\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.next_power_of_two\" class=\"fn\">next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>.</p>\n<p>When return value overflows (i.e., <code>self &gt; (1 &lt;&lt; (N-1))</code> for type\n<code>uN</code>), it panics in debug mode and the return value is wrapped to 0 in\nrelease mode (the only situation in which this method can return 0).</p>\n<h5 id=\"examples-100\"><a class=\"doc-anchor\" href=\"#examples-100\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u16</span>.next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u16</span>.next_power_of_two(), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u16</span>.next_power_of_two(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_power_of_two\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.checked_next_power_of_two\" class=\"fn\">checked_next_power_of_two</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>self</code>. If\nthe next power of two is greater than the type’s maximum value,\n<code>None</code> is returned, otherwise the power of two is wrapped in <code>Some</code>.</p>\n<h5 id=\"examples-101\"><a class=\"doc-anchor\" href=\"#examples-101\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u16</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u16</span>.checked_next_power_of_two(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">4</span>));\n<span class=\"macro\">assert_eq!</span>(u16::MAX.checked_next_power_of_two(), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_next_power_of_two\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.wrapping_next_power_of_two\" class=\"fn\">wrapping_next_power_of_two</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>wrapping_next_power_of_two</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns the smallest power of two greater than or equal to <code>n</code>. If\nthe next power of two is greater than the type’s maximum value,\nthe return value is wrapped to <code>0</code>.</p>\n<h5 id=\"examples-102\"><a class=\"doc-anchor\" href=\"#examples-102\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(wrapping_next_power_of_two)]\n\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2u16</span>.wrapping_next_power_of_two(), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3u16</span>.wrapping_next_power_of_two(), <span class=\"number\">4</span>);\n<span class=\"macro\">assert_eq!</span>(u16::MAX.wrapping_next_power_of_two(), <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">2</a>]</h4></section></summary><div class=\"docblock\"><p>Returns the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-103\"><a class=\"doc-anchor\" href=\"#examples-103\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234u16</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">2</a>]</h4></section></summary><div class=\"docblock\"><p>Returns the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-104\"><a class=\"doc-anchor\" href=\"#examples-104\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234u16</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">2</a>]</h4></section></summary><div class=\"docblock\"><p>Returns the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.to_be_bytes\" title=\"method u16::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.to_le_bytes\" title=\"method u16::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-105\"><a class=\"doc-anchor\" href=\"#examples-105\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x1234u16</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">2</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Creates a native endian integer value from its representation\nas a byte array in big endian.</p>\n<h5 id=\"examples-106\"><a class=\"doc-anchor\" href=\"#examples-106\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u16::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234</span>);</code></pre></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_u16(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u16 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u16&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u16::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">2</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Creates a native endian integer value from its representation\nas a byte array in little endian.</p>\n<h5 id=\"examples-107\"><a class=\"doc-anchor\" href=\"#examples-107\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u16::from_le_bytes([<span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234</span>);</code></pre></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_u16(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u16 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u16&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u16::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.array.html\">2</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Creates a native endian integer value from its memory representation\nas a byte array in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.from_be_bytes\" title=\"associated function u16::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#method.from_le_bytes\" title=\"associated function u16::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-108\"><a class=\"doc-anchor\" href=\"#examples-108\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = u16::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x1234</span>);</code></pre></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_u16(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; u16 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;u16&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    u16::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.min_value\" class=\"fn\">min_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#associatedconstant.MIN\" title=\"associated constant u16::MIN\"><code>u16::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1047-1065\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.max_value\" class=\"fn\">max_value</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#associatedconstant.MAX\" title=\"associated constant u16::MAX\"><code>u16::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.85.0, const since 1.85.0\">1.85.0 (const: 1.85.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1066\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.midpoint\" class=\"fn\">midpoint</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h4></section></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) / 2</code> as if it were performed in a\nsufficiently-large unsigned integral type. This implies that the result is\nalways rounded towards zero and that no overflow will ever occur.</p>\n<h5 id=\"examples-109\"><a class=\"doc-anchor\" href=\"#examples-109\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0u16</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1u16</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_utf16_surrogate\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1088\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.is_utf16_surrogate\" class=\"fn\">is_utf16_surrogate</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>utf16_extra</code>)</span></div></span></summary><div class=\"docblock\"><p>Checks if the value is a Unicode surrogate code point, which are disallowed values for <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a>.</p>\n<h5 id=\"examples-110\"><a class=\"doc-anchor\" href=\"#examples-110\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(utf16_extra)]\n\n</span><span class=\"kw\">let </span>low_non_surrogate = <span class=\"number\">0xA000u16</span>;\n<span class=\"kw\">let </span>low_surrogate = <span class=\"number\">0xD800u16</span>;\n<span class=\"kw\">let </span>high_surrogate = <span class=\"number\">0xDC00u16</span>;\n<span class=\"kw\">let </span>high_non_surrogate = <span class=\"number\">0xE000u16</span>;\n\n<span class=\"macro\">assert!</span>(!low_non_surrogate.is_utf16_surrogate());\n<span class=\"macro\">assert!</span>(low_surrogate.is_utf16_surrogate());\n<span class=\"macro\">assert!</span>(high_surrogate.is_utf16_surrogate());\n<span class=\"macro\">assert!</span>(!high_non_surrogate.is_utf16_surrogate());</code></pre></div>\n</div></details></div></details>",0,"clementine_core::builder::transaction::input::BlockHeight"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1498\">Source</a><a href=\"#impl-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.82.0\">1.0.0 (const: 1.82.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/mod.rs.html#1498\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html#tymethod.from_str_radix\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.1/core/num/error/struct.ParseIntError.html\" title=\"struct core::num::error::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional\n<code>+</code>\nsign followed by only digits. Leading and trailing non-digit characters (including\nwhitespace) represent an error. Underscores (which are accepted in rust literals)\nalso represent an error.</p>\n<p>Digits are a subset of these characters, depending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(u16::from_str_radix(<span class=\"string\">\"A\"</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre></div>\n<p>Trailing space returns error:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(u16::from_str_radix(<span class=\"string\">\"1 \"</span>, <span class=\"number\">10</span>).is_err());</code></pre></div>\n</div></details></div></details>",0,"clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-AtLeast16-for-u16\" class=\"impl\"><a href=\"#impl-AtLeast16-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AtLeast16 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","AtLeast16","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-AtLeast8-for-u16\" class=\"impl\"><a href=\"#impl-AtLeast8-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AtLeast8 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","AtLeast8","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-AtMost128-for-u16\" class=\"impl\"><a href=\"#impl-AtMost128-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AtMost128 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","AtMost128","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-AtMost16-for-u16\" class=\"impl\"><a href=\"#impl-AtMost16-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AtMost16 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","AtMost16","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-AtMost32-for-u16\" class=\"impl\"><a href=\"#impl-AtMost32-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AtMost32 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","AtMost32","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-AtMost64-for-u16\" class=\"impl\"><a href=\"#impl-AtMost64-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl AtMost64 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","AtMost64","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-BitOps-for-u16\" class=\"impl\"><a href=\"#impl-BitOps-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl BitOps for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","BitOps","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-ConstParamTy_-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/marker.rs.html#1056-1065\">Source</a><a href=\"#impl-ConstParamTy_-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.ConstParamTy_.html\" title=\"trait core::marker::ConstParamTy_\">ConstParamTy_</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","ConstParamTy_","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Copy-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/marker.rs.html#437-447\">Source</a></span><a href=\"#impl-Copy-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","Copy","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-DefaultIsZeroes-for-u16\" class=\"impl\"><a href=\"#impl-DefaultIsZeroes-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl DefaultIsZeroes for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","DefaultIsZeroes","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Eq-for-u16\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.1/src/core/cmp.rs.html#1666\">Source</a></span><a href=\"#impl-Eq-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","Eq","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-EqULE-for-u16\" class=\"impl\"><a href=\"#impl-EqULE-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl EqULE for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","EqULE","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Format-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/serde_with/3.12.0/src/serde_with/formats.rs.html#30-59\">Source</a><a href=\"#impl-Format-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/serde_with/3.12.0/serde_with/formats/trait.Format.html\" title=\"trait serde_with::formats::Format\">Format</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3><div class=\"docblock\"><p>Serialize into a u16</p>\n</div></section>","Format","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-HexUint-for-u16\" class=\"impl\"><a href=\"#impl-HexUint-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl HexUint for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","HexUint","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Immutable-for-u16\" class=\"impl\"><a href=\"#impl-Immutable-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Immutable for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","Immutable","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Integer-for-u16\" class=\"impl\"><a href=\"#impl-Integer-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Integer for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","Integer","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Integer-for-u16\" class=\"impl\"><a href=\"#impl-Integer-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Integer for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","Integer","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Is16-for-u16\" class=\"impl\"><a href=\"#impl-Is16-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Is16 for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","Is16","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-MaxEncodedLen%3Calloy_rlp::::encode::%7Bimpl%2318%7D::%7Bconstant%230%7D%3E-for-u16\" class=\"impl\"><a href=\"#impl-MaxEncodedLen%3Calloy_rlp::::encode::%7Bimpl%2318%7D::%7Bconstant%230%7D%3E-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl MaxEncodedLen&lt;alloy_rlp::::encode::{impl#18}::{constant#0}&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","MaxEncodedLen<alloy_rlp::::encode::{impl#18}::{constant#0}>","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-NumericOps-for-u16\" class=\"impl\"><a href=\"#impl-NumericOps-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl NumericOps for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","NumericOps","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Pod-for-u16\" class=\"impl\"><a href=\"#impl-Pod-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Pod for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","Pod","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Pod-for-u16\" class=\"impl\"><a href=\"#impl-Pod-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Pod for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","Pod","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-PrimitiveUnsigned-for-u16\" class=\"impl\"><a href=\"#impl-PrimitiveUnsigned-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PrimitiveUnsigned for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","PrimitiveUnsigned","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-ScalarOperand-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/ndarray/0.15/src/ndarray/impl_ops.rs.html#39\">Source</a><a href=\"#impl-ScalarOperand-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/ndarray/0.15/ndarray/impl_ops/trait.ScalarOperand.html\" title=\"trait ndarray::impl_ops::ScalarOperand\">ScalarOperand</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","ScalarOperand","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-SimdCast-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/portable-simd/crates/core_simd/src/cast.rs.html#36\">Source</a><a href=\"#impl-SimdCast-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/core_simd/cast/trait.SimdCast.html\" title=\"trait core::core_simd::cast::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","SimdCast","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-StructuralPartialEq-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/marker.rs.html#220-232\">Source</a><a href=\"#impl-StructuralPartialEq-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","StructuralPartialEq","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-TrustedStep-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/iter/range.rs.html#17\">Source</a><a href=\"#impl-TrustedStep-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/iter/traits/marker/trait.TrustedStep.html\" title=\"trait core::iter::traits::marker::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","TrustedStep","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Uint-for-u16\" class=\"impl\"><a href=\"#impl-Uint-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Uint for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","Uint","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Unsigned-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/sign.rs.html#202\">Source</a><a href=\"#impl-Unsigned-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/sign/trait.Unsigned.html\" title=\"trait num_traits::sign::Unsigned\">Unsigned</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","Unsigned","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-UnsizedConstParamTy-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/marker.rs.html#1067-1080\">Source</a><a href=\"#impl-UnsizedConstParamTy-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/marker/trait.UnsizedConstParamTy.html\" title=\"trait core::marker::UnsizedConstParamTy\">UnsizedConstParamTy</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","UnsizedConstParamTy","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Weight-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://rust-random.github.io/rand/src/rand/distributions/weighted.rs.html#44\">Source</a><a href=\"#impl-Weight-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand/distributions/weighted/alias_method/trait.Weight.html\" title=\"trait rand::distributions::weighted::alias_method::Weight\">Weight</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","Weight","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-Width-for-u16\" class=\"impl\"><a href=\"#impl-Width-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Width for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","Width","clementine_core::builder::transaction::input::BlockHeight"],["<section id=\"impl-ZeroablePrimitive-for-u16\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.85.1/src/core/num/nonzero.rs.html#97-110\">Source</a><a href=\"#impl-ZeroablePrimitive-for-u16\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.1/core/num/nonzero/trait.ZeroablePrimitive.html\" title=\"trait core::num::nonzero::ZeroablePrimitive\">ZeroablePrimitive</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.1/std/primitive.u16.html\">u16</a></h3></section>","ZeroablePrimitive","clementine_core::builder::transaction::input::BlockHeight"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[2466530]}